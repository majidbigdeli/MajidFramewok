<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Majid</name>
    </assembly>
    <members>
        <member name="T:Majid.Application.Features.Feature">
            <summary>
            Defines a feature of the application. A <see cref="T:Majid.Application.Features.Feature"/> can be used in a multi-tenant application
            to enable or disable some application features depending on editions and tenants.
            </summary>
        </member>
        <member name="P:Majid.Application.Features.Feature.Item(System.String)">
            <summary>
            Gets/sets the arbitrary objects related to this object.
            Gets null if a given key does not exist.
            This is a shortcut for the <see cref="P:Majid.Application.Features.Feature.Attributes"/> dictionary.
            </summary>
            <param name="key">Key</param>
        </member>
        <member name="P:Majid.Application.Features.Feature.Attributes">
            <summary>
            Arbitrary objects related to this object.
            These objects must be serializable.
            </summary>
        </member>
        <member name="P:Majid.Application.Features.Feature.Parent">
            <summary>
            Parent of this feature, if one exists.
            If set, this feature can be enabled only if the parent is enabled.
            </summary>
        </member>
        <member name="P:Majid.Application.Features.Feature.Name">
            <summary>
            Unique name of the feature.
            </summary>
        </member>
        <member name="P:Majid.Application.Features.Feature.DisplayName">
            <summary>
            Display name of this feature.
            This can be used to show features on the UI.
            </summary>
        </member>
        <member name="P:Majid.Application.Features.Feature.Description">
            <summary>
            A brief description for this feature.
            This can be used to show this feature's description on the UI. 
            </summary>
        </member>
        <member name="P:Majid.Application.Features.Feature.InputType">
            <summary>
            Input type.
            This can be used to prepare an input for changing this feature's value.
            Default: <see cref="T:Majid.UI.Inputs.CheckboxInputType"/>.
            </summary>
        </member>
        <member name="P:Majid.Application.Features.Feature.DefaultValue">
            <summary>
            Default value of this feature.
            This value is used if this feature's value is not defined for the current edition or tenant.
            </summary>
        </member>
        <member name="P:Majid.Application.Features.Feature.Scope">
            <summary>
            Feature's scope.
            </summary>
        </member>
        <member name="P:Majid.Application.Features.Feature.Children">
            <summary>
            List of child features.
            </summary>
        </member>
        <member name="M:Majid.Application.Features.Feature.#ctor(System.String,System.String,Majid.Localization.ILocalizableString,Majid.Localization.ILocalizableString,Majid.Application.Features.FeatureScopes,Majid.UI.Inputs.IInputType)">
            <summary>
            Creates a new feature.
            </summary>
            <param name="name">Unique name of the feature</param>
            <param name="defaultValue">Default value</param>
            <param name="displayName">Display name of the feature</param>
            <param name="description">A brief description for the feature</param>
            <param name="scope">Feature scope</param>
            <param name="inputType">Input type</param>
        </member>
        <member name="M:Majid.Application.Features.Feature.CreateChildFeature(System.String,System.String,Majid.Localization.ILocalizableString,Majid.Localization.ILocalizableString,Majid.Application.Features.FeatureScopes,Majid.UI.Inputs.IInputType)">
            <summary>
            Adds a child feature.
            </summary>
            <returns>Returns a newly created child feature</returns>
        </member>
        <member name="T:Majid.Application.Features.FeatureChecker">
            <summary>
            Default implementation for <see cref="T:Majid.Application.Features.IFeatureChecker"/>.
            </summary>
        </member>
        <member name="P:Majid.Application.Features.FeatureChecker.MajidSession">
            <summary>
            Reference to the current session.
            </summary>
        </member>
        <member name="P:Majid.Application.Features.FeatureChecker.FeatureValueStore">
            <summary>
            Reference to the store used to get feature values.
            </summary>
        </member>
        <member name="M:Majid.Application.Features.FeatureChecker.#ctor(Majid.Application.Features.IFeatureManager)">
            <summary>
            Creates a new <see cref="T:Majid.Application.Features.FeatureChecker"/> object.
            </summary>
        </member>
        <member name="M:Majid.Application.Features.FeatureChecker.GetValueAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Application.Features.FeatureChecker.GetValueAsync(System.Int32,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Majid.Application.Features.FeatureCheckerExtensions">
            <summary>
            Some extension methods for <see cref="T:Majid.Application.Features.IFeatureChecker"/>.
            </summary>
        </member>
        <member name="M:Majid.Application.Features.FeatureCheckerExtensions.GetValue(Majid.Application.Features.IFeatureChecker,System.String)">
            <summary>
            Gets the value of a feature by its name. This is the sync version of <see cref="M:Majid.Application.Features.IFeatureChecker.GetValueAsync(System.String)"/>
            
            This is a shortcut for <see cref="M:Majid.Application.Features.FeatureCheckerExtensions.GetValue(Majid.Application.Features.IFeatureChecker,System.Int32,System.String)"/> that uses <see cref="P:Majid.Runtime.Session.IMajidSession.TenantId"/>.
            Note: This method should be used only if the TenantId can be obtained from the session.
            </summary>
            <param name="featureChecker"><see cref="T:Majid.Application.Features.IFeatureChecker"/> instance</param>
            <param name="featureName">Unique feature name</param>
            <returns>Feature's current value</returns>
        </member>
        <member name="M:Majid.Application.Features.FeatureCheckerExtensions.GetValue(Majid.Application.Features.IFeatureChecker,System.Int32,System.String)">
            <summary>
            Gets the value of a feature by its name. This is the sync version of <see cref="M:Majid.Application.Features.IFeatureChecker.GetValueAsync(System.Int32,System.String)"/>
            </summary>
            <param name="featureChecker"><see cref="T:Majid.Application.Features.IFeatureChecker"/> instance</param>
            <param name="tenantId">Tenant's Id</param>
            <param name="featureName">Unique feature name</param>
            <returns>Feature's current value</returns>
        </member>
        <member name="M:Majid.Application.Features.FeatureCheckerExtensions.IsEnabledAsync(Majid.Application.Features.IFeatureChecker,System.String)">
            <summary>
            Checks if a given feature is enabled.
            This should be used for boolean-value features.
            
            This is a shortcut for <see cref="M:Majid.Application.Features.FeatureCheckerExtensions.IsEnabledAsync(Majid.Application.Features.IFeatureChecker,System.Int32,System.String)"/> that uses <see cref="P:Majid.Runtime.Session.IMajidSession.TenantId"/>.
            Note: This method should be used only if the TenantId can be obtained from the session.
            </summary>
            <param name="featureChecker"><see cref="T:Majid.Application.Features.IFeatureChecker"/> instance</param>
            <param name="featureName">Unique feature name</param>
            <returns>True, if the current feature's value is "true".</returns>
        </member>
        <member name="M:Majid.Application.Features.FeatureCheckerExtensions.IsEnabledAsync(Majid.Application.Features.IFeatureChecker,System.Int32,System.String)">
            <summary>
            Checks if a given feature is enabled.
            This should be used for boolean-value features.
            </summary>
            <param name="featureChecker"><see cref="T:Majid.Application.Features.IFeatureChecker"/> instance</param>
            <param name="tenantId">Tenant's Id</param>
            <param name="featureName">Unique feature name</param>
            <returns>True, if the current feature's value is "true".</returns>
        </member>
        <member name="M:Majid.Application.Features.FeatureCheckerExtensions.IsEnabled(Majid.Application.Features.IFeatureChecker,System.String)">
            <summary>
            Checks if a given feature is enabled.
            This should be used for boolean-value features.
            
            This is a shortcut for <see cref="M:Majid.Application.Features.FeatureCheckerExtensions.IsEnabled(Majid.Application.Features.IFeatureChecker,System.Int32,System.String)"/> that uses <see cref="P:Majid.Runtime.Session.IMajidSession.TenantId"/>.
            Note: This method should be used only if the TenantId can be obtained from the session.
            </summary>
            <param name="featureChecker"><see cref="T:Majid.Application.Features.IFeatureChecker"/> instance</param>
            <param name="name">Unique feature name</param>
            <returns>True, if the current feature's value is "true".</returns>
        </member>
        <member name="M:Majid.Application.Features.FeatureCheckerExtensions.IsEnabled(Majid.Application.Features.IFeatureChecker,System.Int32,System.String)">
            <summary>
            Checks if a given feature is enabled.
            This should be used for boolean-value features.
            </summary>
            <param name="featureChecker"><see cref="T:Majid.Application.Features.IFeatureChecker"/> instance</param>
            <param name="tenantId">Tenant's Id</param>
            <param name="featureName">Unique feature name</param>
            <returns>True, if the current feature's value is "true".</returns>
        </member>
        <member name="M:Majid.Application.Features.FeatureCheckerExtensions.IsEnabledAsync(Majid.Application.Features.IFeatureChecker,System.Boolean,System.String[])">
            <summary>
            Used to check if one or all of the given features are enabled.
            </summary>
            <param name="featureChecker"><see cref="T:Majid.Application.Features.IFeatureChecker"/> instance</param>
            <param name="requiresAll">True, to require that all the given features are enabled. False, to require one or more.</param>
            <param name="featureNames">Names of the features</param>
        </member>
        <member name="M:Majid.Application.Features.FeatureCheckerExtensions.IsEnabledAsync(Majid.Application.Features.IFeatureChecker,System.Int32,System.Boolean,System.String[])">
            <summary>
            Used to check if one or all of the given features are enabled.
            </summary>
            <param name="featureChecker"><see cref="T:Majid.Application.Features.IFeatureChecker"/> instance</param>
            <param name="tenantId">Tenant id</param>
            <param name="requiresAll">True, to require that all the given features are enabled. False, to require one or more.</param>
            <param name="featureNames">Names of the features</param>
        </member>
        <member name="M:Majid.Application.Features.FeatureCheckerExtensions.IsEnabled(Majid.Application.Features.IFeatureChecker,System.Boolean,System.String[])">
            <summary>
            Used to check if one or all of the given features are enabled.
            </summary>
            <param name="featureChecker"><see cref="T:Majid.Application.Features.IFeatureChecker"/> instance</param>
            <param name="requiresAll">True, to require that all the given features are enabled. False, to require one or more.</param>
            <param name="featureNames">Names of the features</param>
        </member>
        <member name="M:Majid.Application.Features.FeatureCheckerExtensions.IsEnabled(Majid.Application.Features.IFeatureChecker,System.Int32,System.Boolean,System.String[])">
            <summary>
            Used to check if one or all of the given features are enabled.
            </summary>
            <param name="featureChecker"><see cref="T:Majid.Application.Features.IFeatureChecker"/> instance</param>
            <param name="tenantId">Tenant id</param>
            <param name="requiresAll">True, to require that all the given features are enabled. False, to require one or more.</param>
            <param name="featureNames">Names of the features</param>
        </member>
        <member name="M:Majid.Application.Features.FeatureCheckerExtensions.CheckEnabledAsync(Majid.Application.Features.IFeatureChecker,System.String)">
            <summary>
            Checks if a given feature is enabled. Throws <see cref="T:Majid.Authorization.MajidAuthorizationException"/> if not.
            </summary>
            <param name="featureChecker"><see cref="T:Majid.Application.Features.IFeatureChecker"/> instance</param>
            <param name="featureName">Unique feature name</param>
        </member>
        <member name="M:Majid.Application.Features.FeatureCheckerExtensions.CheckEnabled(Majid.Application.Features.IFeatureChecker,System.String)">
            <summary>
            Checks if a given feature is enabled. Throws <see cref="T:Majid.Authorization.MajidAuthorizationException"/> if not.
            </summary>
            <param name="featureChecker"><see cref="T:Majid.Application.Features.IFeatureChecker"/> instance</param>
            <param name="featureName">Unique feature name</param>
        </member>
        <member name="M:Majid.Application.Features.FeatureCheckerExtensions.CheckEnabledAsync(Majid.Application.Features.IFeatureChecker,System.Boolean,System.String[])">
            <summary>
            Checks if one or all of the given features are enabled. Throws <see cref="T:Majid.Authorization.MajidAuthorizationException"/> if not.
            </summary>
            <param name="featureChecker"><see cref="T:Majid.Application.Features.IFeatureChecker"/> instance</param>
            <param name="requiresAll">True, to require that all the given features are enabled. False, to require one or more.</param>
            <param name="featureNames">Names of the features</param>
        </member>
        <member name="M:Majid.Application.Features.FeatureCheckerExtensions.CheckEnabledAsync(Majid.Application.Features.IFeatureChecker,System.Int32,System.Boolean,System.String[])">
            <summary>
            Checks if one or all of the given features are enabled. Throws <see cref="T:Majid.Authorization.MajidAuthorizationException"/> if not.
            </summary>
            <param name="featureChecker"><see cref="T:Majid.Application.Features.IFeatureChecker"/> instance</param>
            <param name="tenantId">Tenant id</param>
            <param name="requiresAll">True, to require that all the given features are enabled. False, to require one or more.</param>
            <param name="featureNames">Names of the features</param>
        </member>
        <member name="M:Majid.Application.Features.FeatureCheckerExtensions.CheckEnabled(Majid.Application.Features.IFeatureChecker,System.Boolean,System.String[])">
            <summary>
            Checks if one or all of the given features are enabled. Throws <see cref="T:Majid.Authorization.MajidAuthorizationException"/> if not.
            </summary>
            <param name="featureChecker"><see cref="T:Majid.Application.Features.IFeatureChecker"/> instance</param>
            <param name="requiresAll">True, to require that all the given features are enabled. False, to require one or more.</param>
            <param name="featureNames">Names of the features</param>
        </member>
        <member name="M:Majid.Application.Features.FeatureCheckerExtensions.CheckEnabled(Majid.Application.Features.IFeatureChecker,System.Int32,System.Boolean,System.String[])">
            <summary>
            Checks if one or all of the given features are enabled. Throws <see cref="T:Majid.Authorization.MajidAuthorizationException"/> if not.
            </summary>
            <param name="featureChecker"><see cref="T:Majid.Application.Features.IFeatureChecker"/> instance</param>
            <param name="tenantId">Tenant id</param>
            <param name="requiresAll">True, to require that all the given features are enabled. False, to require one or more.</param>
            <param name="featureNames">Names of the features</param>
        </member>
        <member name="T:Majid.Application.Features.FeatureConfiguration">
            <summary>
            Internal implementation for <see cref="T:Majid.Application.Features.IFeatureConfiguration"/>.
            </summary>
        </member>
        <member name="P:Majid.Application.Features.FeatureConfiguration.Providers">
            <summary>
            Reference to the feature providers.
            </summary>
        </member>
        <member name="M:Majid.Application.Features.FeatureConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Majid.Application.Features.FeatureConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Majid.Application.Features.FeatureDefinitionContextBase">
            <summary>
            Base for implementing <see cref="T:Majid.Application.Features.IFeatureDefinitionContext"/>.
            </summary>
        </member>
        <member name="M:Majid.Application.Features.FeatureDefinitionContextBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Majid.Application.Features.FeatureDefinitionContextBase"/> class.
            </summary>
        </member>
        <member name="M:Majid.Application.Features.FeatureDefinitionContextBase.Create(System.String,System.String,Majid.Localization.ILocalizableString,Majid.Localization.ILocalizableString,Majid.Application.Features.FeatureScopes,Majid.UI.Inputs.IInputType)">
            <summary>
            Creates a new feature.
            </summary>
            <param name="name">Unique name of the feature</param>
            <param name="defaultValue">Default value</param>
            <param name="displayName">Display name of the feature</param>
            <param name="description">A brief description for this feature</param>
            <param name="scope">Feature scope</param>
            <param name="inputType">Input type</param>
        </member>
        <member name="M:Majid.Application.Features.FeatureDefinitionContextBase.GetOrNull(System.String)">
            <summary>
            Gets a feature with a given name, or null if can not be found.
            </summary>
            <param name="name">Unique name of the feature</param>
            <returns>
              <see cref="T:Majid.Application.Features.Feature" /> object or null
            </returns>
        </member>
        <member name="M:Majid.Application.Features.FeatureDefinitionContextBase.Remove(System.String)">
            <summary>
            Remove feature with given name
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Majid.Application.Features.FeatureDependencyContext">
            <summary>
            Implementation of <see cref="T:Majid.Application.Features.IFeatureDependencyContext"/>.
            </summary>
        </member>
        <member name="P:Majid.Application.Features.FeatureDependencyContext.IocResolver">
            <inheritdoc/>
        </member>
        <member name="P:Majid.Application.Features.FeatureDependencyContext.FeatureChecker">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Application.Features.FeatureDependencyContext.#ctor(Majid.Dependency.IIocResolver,Majid.Application.Features.IFeatureChecker)">
            <summary>
            Initializes a new instance of the <see cref="T:Majid.Application.Features.FeatureDependencyContext"/> class.
            </summary>
        </member>
        <member name="T:Majid.Application.Features.FeatureDependencyExtensions">
            <summary>
            Extension methods for <see cref="T:Majid.Application.Features.IFeatureDependency"/>.
            </summary>
        </member>
        <member name="M:Majid.Application.Features.FeatureDependencyExtensions.IsSatisfied(Majid.Application.Features.IFeatureDependency,Majid.Application.Features.IFeatureDependencyContext)">
            <summary>
            Checks dependent features and returns true if dependencies are satisfied.
            </summary>
            <param name="featureDependency">The feature dependency.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Majid.Application.Features.FeatureDictionary">
            <summary>
            Used to store <see cref="T:Majid.Application.Features.Feature"/>s.
            </summary>
        </member>
        <member name="M:Majid.Application.Features.FeatureDictionary.AddAllFeatures">
            <summary>
            Adds all the child features of the current features, recursively.
            </summary>
        </member>
        <member name="T:Majid.Application.Features.FeatureManager">
            <summary>
            Implements <see cref="T:Majid.Application.Features.IFeatureManager"/>.
            </summary>
        </member>
        <member name="M:Majid.Application.Features.FeatureManager.#ctor(Majid.Dependency.IIocManager,Majid.Application.Features.IFeatureConfiguration)">
            <summary>
            Creates a new <see cref="T:Majid.Application.Features.FeatureManager"/> object
            </summary>
            <param name="iocManager">IOC Manager</param>
            <param name="featureConfiguration">Feature configuration</param>
        </member>
        <member name="M:Majid.Application.Features.FeatureManager.Initialize">
            <summary>
            Initializes this <see cref="T:Majid.Application.Features.FeatureManager"/>
            </summary>
        </member>
        <member name="M:Majid.Application.Features.FeatureManager.Get(System.String)">
            <summary>
            Gets a feature by its given name
            </summary>
            <param name="name">Name of the feature</param>
        </member>
        <member name="M:Majid.Application.Features.FeatureManager.GetAll">
            <summary>
            Gets all the features
            </summary>
        </member>
        <member name="T:Majid.Application.Features.FeatureProvider">
            <summary>
            This class should be inherited in order to provide <see cref="T:Majid.Application.Features.Feature"/>s.
            </summary>
        </member>
        <member name="M:Majid.Application.Features.FeatureProvider.SetFeatures(Majid.Application.Features.IFeatureDefinitionContext)">
            <summary>
            Used to set <see cref="T:Majid.Application.Features.Feature"/>s.
            </summary>
            <param name="context">Feature definition context</param>
        </member>
        <member name="T:Majid.Application.Features.FeatureScopes">
            <summary>
            Scopes of a <see cref="T:Majid.Application.Features.Feature"/>.
            </summary>
        </member>
        <member name="F:Majid.Application.Features.FeatureScopes.Edition">
            <summary>
            This <see cref="T:Majid.Application.Features.Feature"/> can be enabled/disabled per edition.
            </summary>
        </member>
        <member name="F:Majid.Application.Features.FeatureScopes.Tenant">
            <summary>
            This Feature<see cref="T:Majid.Application.Features.Feature"/> can be enabled/disabled per tenant.
            </summary>
        </member>
        <member name="F:Majid.Application.Features.FeatureScopes.All">
            <summary>
            This <see cref="T:Majid.Application.Features.Feature"/> can be enabled/disabled per tenant and edition.
            </summary>
        </member>
        <member name="T:Majid.Application.Features.IFeatureChecker">
            <summary>
            This interface should be used to get the value of features
            </summary>
        </member>
        <member name="M:Majid.Application.Features.IFeatureChecker.GetValueAsync(System.String)">
            <summary>
            Gets the value of a feature by its name.
            This is a shortcut for <see cref="M:Majid.Application.Features.IFeatureChecker.GetValueAsync(System.Int32,System.String)"/> that uses <see cref="P:Majid.Runtime.Session.IMajidSession.TenantId"/> as tenantId.
            Note: This method should only be used if a TenantId can be obtained from the session.
            </summary>
            <param name="name">Unique feature name</param>
            <returns>Feature's current value</returns>
        </member>
        <member name="M:Majid.Application.Features.IFeatureChecker.GetValueAsync(System.Int32,System.String)">
            <summary>
            Gets the value of a feature for a tenant by the feature's name.
            </summary>
            <param name="tenantId">Tenant's Id</param>
            <param name="name">Unique feature name</param>
            <returns>Feature's current value</returns>
        </member>
        <member name="T:Majid.Application.Features.IFeatureConfiguration">
            <summary>
            Used to configure feature system.
            </summary>
        </member>
        <member name="P:Majid.Application.Features.IFeatureConfiguration.Providers">
            <summary>
            Used to add/remove <see cref="T:Majid.Application.Features.FeatureProvider"/>s.
            </summary>
        </member>
        <member name="T:Majid.Application.Features.IFeatureDefinitionContext">
            <summary>
            Used in the <see cref="M:Majid.Application.Features.FeatureProvider.SetFeatures(Majid.Application.Features.IFeatureDefinitionContext)"/> method as context.
            </summary>
        </member>
        <member name="M:Majid.Application.Features.IFeatureDefinitionContext.Create(System.String,System.String,Majid.Localization.ILocalizableString,Majid.Localization.ILocalizableString,Majid.Application.Features.FeatureScopes,Majid.UI.Inputs.IInputType)">
            <summary>
            Creates a new feature.
            </summary>
            <param name="name">Unique name of the feature</param>
            <param name="defaultValue">Default value</param>
            <param name="displayName">Display name of the feature</param>
            <param name="description">A brief description for this feature</param>
            <param name="scope">Feature scope</param>
            <param name="inputType">Input type</param>
        </member>
        <member name="M:Majid.Application.Features.IFeatureDefinitionContext.GetOrNull(System.String)">
            <summary>
            Gets a feature with a given name or null if it can not be found.
            </summary>
            <param name="name">Unique name of the feature</param>
            <returns><see cref="T:Majid.Application.Features.Feature"/> object or null</returns>
        </member>
        <member name="M:Majid.Application.Features.IFeatureDefinitionContext.Remove(System.String)">
            <summary>
            Remove feature with given name
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Majid.Application.Features.IFeatureDependency">
            <summary>
            Defines a feature dependency.
            </summary>
        </member>
        <member name="M:Majid.Application.Features.IFeatureDependency.IsSatisfiedAsync(Majid.Application.Features.IFeatureDependencyContext)">
            <summary>
            Checks dependent features and returns true if the dependencies are satisfied.
            </summary>
        </member>
        <member name="T:Majid.Application.Features.IFeatureDependencyContext">
            <summary>
            Used in the <see cref="M:Majid.Application.Features.IFeatureDependency.IsSatisfiedAsync(Majid.Application.Features.IFeatureDependencyContext)"/> method.
            </summary>
        </member>
        <member name="P:Majid.Application.Features.IFeatureDependencyContext.TenantId">
            <summary>
            Tenant id which requires the feature.
            Null for current tenant.
            </summary>
        </member>
        <member name="P:Majid.Application.Features.IFeatureDependencyContext.IocResolver">
            <summary>
            Gets the <see cref="T:Majid.Dependency.IIocResolver"/>.
            </summary>
            <value>
            The ioc resolver.
            </value>
        </member>
        <member name="P:Majid.Application.Features.IFeatureDependencyContext.FeatureChecker">
            <summary>
            Gets the <see cref="T:Majid.Application.Features.IFeatureChecker"/>.
            </summary>
            <value>
            The feature checker.
            </value>
        </member>
        <member name="T:Majid.Application.Features.IFeatureManager">
            <summary>
            Feature manager.
            </summary>
        </member>
        <member name="M:Majid.Application.Features.IFeatureManager.Get(System.String)">
            <summary>
            Gets the <see cref="T:Majid.Application.Features.Feature"/> by a specified name.
            </summary>
            <param name="name">Unique name of the feature.</param>
        </member>
        <member name="M:Majid.Application.Features.IFeatureManager.GetOrNull(System.String)">
            <summary>
            Gets the <see cref="T:Majid.Application.Features.Feature"/> by a specified name or returns null if it can not be found.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Majid.Application.Features.IFeatureManager.GetAll">
            <summary>
            Gets all <see cref="T:Majid.Application.Features.Feature"/>s.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Majid.Application.Features.IFeatureValueStore">
            <summary>
            Defines a store to get a feature's value.
            </summary>
        </member>
        <member name="M:Majid.Application.Features.IFeatureValueStore.GetValueOrNullAsync(System.Int32,Majid.Application.Features.Feature)">
            <summary>
            Gets the feature value or null.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="feature">The feature.</param>
        </member>
        <member name="T:Majid.Application.Features.NullFeatureValueStore">
            <summary>
            Null pattern (default) implementation of <see cref="T:Majid.Application.Features.IFeatureValueStore"/>.
            It gets null for all feature values.
            <see cref="P:Majid.Application.Features.NullFeatureValueStore.Instance"/> can be used via property injection of <see cref="T:Majid.Application.Features.IFeatureValueStore"/>.
            </summary>
        </member>
        <member name="P:Majid.Application.Features.NullFeatureValueStore.Instance">
            <summary>
            Gets the singleton instance.
            </summary>
        </member>
        <member name="M:Majid.Application.Features.NullFeatureValueStore.GetValueOrNullAsync(System.Int32,Majid.Application.Features.Feature)">
            <inheritdoc/>
        </member>
        <member name="T:Majid.Application.Features.RequiresFeatureAttribute">
            <summary>
            This attribute can be used on a class/method to declare that given class/method is available
            only if required feature(s) are enabled.
            </summary>
        </member>
        <member name="P:Majid.Application.Features.RequiresFeatureAttribute.Features">
            <summary>
            A list of features to be checked if they are enabled.
            </summary>
        </member>
        <member name="P:Majid.Application.Features.RequiresFeatureAttribute.RequiresAll">
            <summary>
            If this property is set to true, all of the <see cref="P:Majid.Application.Features.RequiresFeatureAttribute.Features"/> must be enabled.
            If it's false, at least one of the <see cref="P:Majid.Application.Features.RequiresFeatureAttribute.Features"/> must be enabled.
            Default: false.
            </summary>
        </member>
        <member name="M:Majid.Application.Features.RequiresFeatureAttribute.#ctor(System.String[])">
            <summary>
            Creates a new instance of <see cref="T:Majid.Application.Features.RequiresFeatureAttribute"/> class.
            </summary>
            <param name="features">A list of features to be checked if they are enabled</param>
        </member>
        <member name="T:Majid.Application.Features.SimpleFeatureDependency">
            <summary>
            Most simple implementation of <see cref="T:Majid.Application.Features.IFeatureDependency"/>.
            It checks one or more features if they are enabled.
            </summary>
        </member>
        <member name="P:Majid.Application.Features.SimpleFeatureDependency.Features">
            <summary>
            A list of features to be checked if they are enabled.
            </summary>
        </member>
        <member name="P:Majid.Application.Features.SimpleFeatureDependency.RequiresAll">
            <summary>
            If this property is set to true, all of the <see cref="P:Majid.Application.Features.SimpleFeatureDependency.Features"/> must be enabled.
            If it's false, at least one of the <see cref="P:Majid.Application.Features.SimpleFeatureDependency.Features"/> must be enabled.
            Default: false.
            </summary>
        </member>
        <member name="M:Majid.Application.Features.SimpleFeatureDependency.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Majid.Application.Features.SimpleFeatureDependency"/> class.
            </summary>
            <param name="features">The features.</param>
        </member>
        <member name="M:Majid.Application.Features.SimpleFeatureDependency.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Majid.Application.Features.SimpleFeatureDependency"/> class.
            </summary>
            <param name="requiresAll">
            If this is set to true, all of the <see cref="P:Majid.Application.Features.SimpleFeatureDependency.Features"/> must be enabled.
            If it's false, at least one of the <see cref="P:Majid.Application.Features.SimpleFeatureDependency.Features"/> must be enabled.
            </param>
            <param name="features">The features.</param>
        </member>
        <member name="M:Majid.Application.Features.SimpleFeatureDependency.IsSatisfiedAsync(Majid.Application.Features.IFeatureDependencyContext)">
            <inheritdoc/>
        </member>
        <member name="T:Majid.Application.Navigation.HasMenuItemDefinitionsExtensions">
            <summary>
            Defines extension methods for <see cref="T:Majid.Application.Navigation.IHasMenuItemDefinitions"/>.
            </summary>
        </member>
        <member name="M:Majid.Application.Navigation.HasMenuItemDefinitionsExtensions.GetItemByName(Majid.Application.Navigation.IHasMenuItemDefinitions,System.String)">
            <summary>
            Searches and gets a <see cref="T:Majid.Application.Navigation.MenuItemDefinition"/> by it's unique name.
            Throws exception if can not find.
            </summary>
            <param name="source">Source object</param>
            <param name="name">Unique name of the source</param>
        </member>
        <member name="M:Majid.Application.Navigation.HasMenuItemDefinitionsExtensions.GetItemByNameOrNull(Majid.Application.Navigation.IHasMenuItemDefinitions,System.String)">
            <summary>
            Searches all menu items (recursively) in the source and gets a <see cref="T:Majid.Application.Navigation.MenuItemDefinition"/> by it's unique name.
            Returns null if can not find.
            </summary>
            <param name="source">Source object</param>
            <param name="name">Unique name of the source</param>
        </member>
        <member name="T:Majid.Application.Navigation.IHasMenuItemDefinitions">
            <summary>
            Declares common interface for classes those have menu items.
            </summary>
        </member>
        <member name="P:Majid.Application.Navigation.IHasMenuItemDefinitions.Items">
            <summary>
            List of menu items.
            </summary>
        </member>
        <member name="T:Majid.Application.Navigation.INavigationManager">
            <summary>
            Manages navigation in the application.
            </summary>
        </member>
        <member name="P:Majid.Application.Navigation.INavigationManager.Menus">
            <summary>
            All menus defined in the application.
            </summary>
        </member>
        <member name="P:Majid.Application.Navigation.INavigationManager.MainMenu">
            <summary>
            Gets the main menu of the application.
            A shortcut of <see cref="P:Majid.Application.Navigation.INavigationManager.Menus"/>["MainMenu"].
            </summary>
        </member>
        <member name="T:Majid.Application.Navigation.INavigationProviderContext">
            <summary>
            Provides infrastructure to set navigation.
            </summary>
        </member>
        <member name="P:Majid.Application.Navigation.INavigationProviderContext.Manager">
            <summary>
            Gets a reference to the menu manager.
            </summary>
        </member>
        <member name="T:Majid.Application.Navigation.IUserNavigationManager">
            <summary>
            Used to manage navigation for users.
            </summary>
        </member>
        <member name="M:Majid.Application.Navigation.IUserNavigationManager.GetMenuAsync(System.String,Majid.UserIdentifier)">
            <summary>
            Gets a menu specialized for given user.
            </summary>
            <param name="menuName">Unique name of the menu</param>
            <param name="user">The user, or null for anonymous users</param>
        </member>
        <member name="M:Majid.Application.Navigation.IUserNavigationManager.GetMenusAsync(Majid.UserIdentifier)">
            <summary>
            Gets all menus specialized for given user.
            </summary>
            <param name="user">User id or null for anonymous users</param>
        </member>
        <member name="T:Majid.Application.Navigation.MenuDefinition">
            <summary>
            Represents a navigation menu for an application.
            </summary>
        </member>
        <member name="P:Majid.Application.Navigation.MenuDefinition.Name">
            <summary>
            Unique name of the menu in the application. Required.
            </summary>
        </member>
        <member name="P:Majid.Application.Navigation.MenuDefinition.DisplayName">
            <summary>
            Display name of the menu. Required.
            </summary>
        </member>
        <member name="P:Majid.Application.Navigation.MenuDefinition.CustomData">
            <summary>
            Can be used to store a custom object related to this menu. Optional.
            </summary>
        </member>
        <member name="P:Majid.Application.Navigation.MenuDefinition.Items">
            <summary>
            Menu items (first level).
            </summary>
        </member>
        <member name="M:Majid.Application.Navigation.MenuDefinition.#ctor(System.String,Majid.Localization.ILocalizableString,System.Object)">
            <summary>
            Creates a new <see cref="T:Majid.Application.Navigation.MenuDefinition"/> object.
            </summary>
            <param name="name">Unique name of the menu</param>
            <param name="displayName">Display name of the menu</param>
            <param name="customData">Can be used to store a custom object related to this menu.</param>
        </member>
        <member name="M:Majid.Application.Navigation.MenuDefinition.AddItem(Majid.Application.Navigation.MenuItemDefinition)">
            <summary>
            Adds a <see cref="T:Majid.Application.Navigation.MenuItemDefinition"/> to <see cref="P:Majid.Application.Navigation.MenuDefinition.Items"/>.
            </summary>
            <param name="menuItem"><see cref="T:Majid.Application.Navigation.MenuItemDefinition"/> to be added</param>
            <returns>This <see cref="T:Majid.Application.Navigation.MenuDefinition"/> object</returns>
        </member>
        <member name="M:Majid.Application.Navigation.MenuDefinition.RemoveItem(System.String)">
            <summary>
            Remove menu item with given name
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Majid.Application.Navigation.MenuItemDefinition">
            <summary>
            Represents an item in a <see cref="T:Majid.Application.Navigation.MenuDefinition"/>.
            </summary>
        </member>
        <member name="P:Majid.Application.Navigation.MenuItemDefinition.Name">
            <summary>
            Unique name of the menu item in the application. 
            Can be used to find this menu item later.
            </summary>
        </member>
        <member name="P:Majid.Application.Navigation.MenuItemDefinition.DisplayName">
            <summary>
            Display name of the menu item. Required.
            </summary>
        </member>
        <member name="P:Majid.Application.Navigation.MenuItemDefinition.Order">
            <summary>
            The Display order of the menu. Optional.
            </summary>
        </member>
        <member name="P:Majid.Application.Navigation.MenuItemDefinition.Icon">
            <summary>
            Icon of the menu item if exists. Optional.
            </summary>
        </member>
        <member name="P:Majid.Application.Navigation.MenuItemDefinition.Url">
            <summary>
            The URL to navigate when this menu item is selected. Optional.
            </summary>
        </member>
        <member name="P:Majid.Application.Navigation.MenuItemDefinition.RequiredPermissionName">
            <summary>
            A permission name. Only users that has this permission can see this menu item.
            Optional.
            </summary>
        </member>
        <member name="P:Majid.Application.Navigation.MenuItemDefinition.PermissionDependency">
            <summary>
            A permission dependency. Only users that can satisfy this permission dependency can see this menu item.
            Optional.
            </summary>
        </member>
        <member name="P:Majid.Application.Navigation.MenuItemDefinition.FeatureDependency">
            <summary>
            A feature dependency.
            Optional.
            </summary>
        </member>
        <member name="P:Majid.Application.Navigation.MenuItemDefinition.RequiresAuthentication">
            <summary>
            This can be set to true if only authenticated users should see this menu item.
            </summary>
        </member>
        <member name="P:Majid.Application.Navigation.MenuItemDefinition.IsLeaf">
            <summary>
            Returns true if this menu item has no child <see cref="P:Majid.Application.Navigation.MenuItemDefinition.Items"/>.
            </summary>
        </member>
        <member name="P:Majid.Application.Navigation.MenuItemDefinition.Target">
            <summary>
            Target of the menu item. Can be "_blank", "_self", "_parent", "_top" or a frame name.
            </summary>
        </member>
        <member name="P:Majid.Application.Navigation.MenuItemDefinition.CustomData">
            <summary>
            Can be used to store a custom object related to this menu item. Optional.
            </summary>
        </member>
        <member name="P:Majid.Application.Navigation.MenuItemDefinition.IsEnabled">
            <summary>
            Can be used to enable/disable a menu item.
            </summary>
        </member>
        <member name="P:Majid.Application.Navigation.MenuItemDefinition.IsVisible">
            <summary>
            Can be used to show/hide a menu item.
            </summary>
        </member>
        <member name="P:Majid.Application.Navigation.MenuItemDefinition.Items">
            <summary>
            Sub items of this menu item. Optional.
            </summary>
        </member>
        <member name="M:Majid.Application.Navigation.MenuItemDefinition.#ctor(System.String,Majid.Localization.ILocalizableString,System.String,System.String,System.Boolean,System.String,System.Int32,System.Object,Majid.Application.Features.IFeatureDependency,System.String,System.Boolean,System.Boolean,Majid.Authorization.IPermissionDependency)">
            <param name="name"></param>
            <param name="displayName"></param>
            <param name="icon"></param>
            <param name="url"></param>
            <param name="requiresAuthentication"></param>
            <param name="requiredPermissionName">This parameter is obsolete. Use <paramref name="permissionDependency"/> instead!</param>
            <param name="order"></param>
            <param name="customData"></param>
            <param name="featureDependency"></param>
            <param name="target"></param>
            <param name="isEnabled"></param>
            <param name="isVisible"></param>
            <param name="permissionDependency"></param>
        </member>
        <member name="M:Majid.Application.Navigation.MenuItemDefinition.AddItem(Majid.Application.Navigation.MenuItemDefinition)">
            <summary>
            Adds a <see cref="T:Majid.Application.Navigation.MenuItemDefinition"/> to <see cref="P:Majid.Application.Navigation.MenuItemDefinition.Items"/>.
            </summary>
            <param name="menuItem"><see cref="T:Majid.Application.Navigation.MenuItemDefinition"/> to be added</param>
            <returns>This <see cref="T:Majid.Application.Navigation.MenuItemDefinition"/> object</returns>
        </member>
        <member name="M:Majid.Application.Navigation.MenuItemDefinition.RemoveItem(System.String)">
            <summary>
            Remove notification with given name
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Majid.Application.Navigation.MenuItemDefinitionExtensions">
            <summary>
            Extension methods for <see cref="T:Majid.Application.Navigation.MenuItemDefinition"/>.
            </summary>
        </member>
        <member name="M:Majid.Application.Navigation.MenuItemDefinitionExtensions.MoveMenuItemToTop(System.Collections.Generic.IList{Majid.Application.Navigation.MenuItemDefinition},System.String)">
            <summary>
            Moves a menu item to top in the list.
            </summary>
            <param name="menuItems">List of menu items</param>
            <param name="menuItemName">Name of the menu item to move</param>
        </member>
        <member name="M:Majid.Application.Navigation.MenuItemDefinitionExtensions.MoveMenuItemToBottom(System.Collections.Generic.IList{Majid.Application.Navigation.MenuItemDefinition},System.String)">
            <summary>
            Moves a menu item to bottom in the list.
            </summary>
            <param name="menuItems">List of menu items</param>
            <param name="menuItemName">Name of the menu item to move</param>
        </member>
        <member name="M:Majid.Application.Navigation.MenuItemDefinitionExtensions.MoveMenuItemBefore(System.Collections.Generic.IList{Majid.Application.Navigation.MenuItemDefinition},System.String,System.String)">
            <summary>
            Moves a menu item in the list after another menu item in the list.
            </summary>
            <param name="menuItems">List of menu items</param>
            <param name="menuItemName">Name of the menu item to move</param>
            <param name="targetMenuItemName">Target menu item (to move before it)</param>
        </member>
        <member name="M:Majid.Application.Navigation.MenuItemDefinitionExtensions.MoveMenuItemAfter(System.Collections.Generic.IList{Majid.Application.Navigation.MenuItemDefinition},System.String,System.String)">
            <summary>
            Moves a menu item in the list before another menu item in the list.
            </summary>
            <param name="menuItems">List of menu items</param>
            <param name="menuItemName">Name of the menu item to move</param>
            <param name="targetMenuItemName">Target menu item (to move after it)</param>
        </member>
        <member name="T:Majid.Application.Navigation.NavigationProvider">
            <summary>
            This interface should be implemented by classes which change
            navigation of the application.
            </summary>
        </member>
        <member name="M:Majid.Application.Navigation.NavigationProvider.SetNavigation(Majid.Application.Navigation.INavigationProviderContext)">
            <summary>
            Used to set navigation.
            </summary>
            <param name="context">Navigation context</param>
        </member>
        <member name="T:Majid.Application.Navigation.UserMenu">
            <summary>
            Represents a menu shown to the user.
            </summary>
        </member>
        <member name="P:Majid.Application.Navigation.UserMenu.Name">
            <summary>
            Unique name of the menu in the application. 
            </summary>
        </member>
        <member name="P:Majid.Application.Navigation.UserMenu.DisplayName">
            <summary>
            Display name of the menu.
            </summary>
        </member>
        <member name="P:Majid.Application.Navigation.UserMenu.CustomData">
            <summary>
            A custom object related to this menu item.
            </summary>
        </member>
        <member name="P:Majid.Application.Navigation.UserMenu.Items">
            <summary>
            Menu items (first level).
            </summary>
        </member>
        <member name="M:Majid.Application.Navigation.UserMenu.#ctor">
            <summary>
            Creates a new <see cref="T:Majid.Application.Navigation.UserMenu"/> object.
            </summary>
        </member>
        <member name="M:Majid.Application.Navigation.UserMenu.#ctor(Majid.Application.Navigation.MenuDefinition,Majid.Localization.ILocalizationContext)">
            <summary>
            Creates a new <see cref="T:Majid.Application.Navigation.UserMenu"/> object from given <see cref="T:Majid.Application.Navigation.MenuDefinition"/>.
            </summary>
        </member>
        <member name="T:Majid.Application.Navigation.UserMenuItem">
            <summary>
            Represents an item in a <see cref="T:Majid.Application.Navigation.UserMenu"/>.
            </summary>
        </member>
        <member name="P:Majid.Application.Navigation.UserMenuItem.Name">
            <summary>
            Unique name of the menu item in the application. 
            </summary>
        </member>
        <member name="P:Majid.Application.Navigation.UserMenuItem.Icon">
            <summary>
            Icon of the menu item if exists.
            </summary>
        </member>
        <member name="P:Majid.Application.Navigation.UserMenuItem.DisplayName">
            <summary>
            Display name of the menu item.
            </summary>
        </member>
        <member name="P:Majid.Application.Navigation.UserMenuItem.Order">
            <summary>
            The Display order of the menu. Optional.
            </summary>
        </member>
        <member name="P:Majid.Application.Navigation.UserMenuItem.Url">
            <summary>
            The URL to navigate when this menu item is selected.
            </summary>
        </member>
        <member name="P:Majid.Application.Navigation.UserMenuItem.CustomData">
            <summary>
            A custom object related to this menu item.
            </summary>
        </member>
        <member name="P:Majid.Application.Navigation.UserMenuItem.Target">
            <summary>
            Target of the menu item. Can be "_blank", "_self", "_parent", "_top" or a frame name.
            </summary>
        </member>
        <member name="P:Majid.Application.Navigation.UserMenuItem.IsEnabled">
            <summary>
            Can be used to enable/disable a menu item.
            </summary>
        </member>
        <member name="P:Majid.Application.Navigation.UserMenuItem.IsVisible">
            <summary>
            Can be used to show/hide a menu item.
            </summary>
        </member>
        <member name="P:Majid.Application.Navigation.UserMenuItem.Items">
            <summary>
            Sub items of this menu item.
            </summary>
        </member>
        <member name="M:Majid.Application.Navigation.UserMenuItem.#ctor">
            <summary>
            Creates a new <see cref="T:Majid.Application.Navigation.UserMenuItem"/> object.
            </summary>
        </member>
        <member name="M:Majid.Application.Navigation.UserMenuItem.#ctor(Majid.Application.Navigation.MenuItemDefinition,Majid.Localization.ILocalizationContext)">
            <summary>
            Creates a new <see cref="T:Majid.Application.Navigation.UserMenuItem"/> object from given <see cref="T:Majid.Application.Navigation.MenuItemDefinition"/>.
            </summary>
        </member>
        <member name="T:Majid.Application.Services.ApplicationService">
            <summary>
            This class can be used as a base class for application services. 
            </summary>
        </member>
        <member name="P:Majid.Application.Services.ApplicationService.MajidSession">
            <summary>
            Gets current session information.
            </summary>
        </member>
        <member name="P:Majid.Application.Services.ApplicationService.PermissionManager">
            <summary>
            Reference to the permission manager.
            </summary>
        </member>
        <member name="P:Majid.Application.Services.ApplicationService.PermissionChecker">
            <summary>
            Reference to the permission checker.
            </summary>
        </member>
        <member name="P:Majid.Application.Services.ApplicationService.FeatureManager">
            <summary>
            Reference to the feature manager.
            </summary>
        </member>
        <member name="P:Majid.Application.Services.ApplicationService.FeatureChecker">
            <summary>
            Reference to the feature checker.
            </summary>
        </member>
        <member name="P:Majid.Application.Services.ApplicationService.AppliedCrossCuttingConcerns">
            <summary>
            Gets the applied cross cutting concerns.
            </summary>
        </member>
        <member name="M:Majid.Application.Services.ApplicationService.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Majid.Application.Services.ApplicationService.IsGrantedAsync(System.String)">
            <summary>
            Checks if current user is granted for a permission.
            </summary>
            <param name="permissionName">Name of the permission</param>
        </member>
        <member name="M:Majid.Application.Services.ApplicationService.IsGranted(System.String)">
            <summary>
            Checks if current user is granted for a permission.
            </summary>
            <param name="permissionName">Name of the permission</param>
        </member>
        <member name="M:Majid.Application.Services.ApplicationService.IsEnabledAsync(System.String)">
            <summary>
            Checks if given feature is enabled for current tenant.
            </summary>
            <param name="featureName">Name of the feature</param>
            <returns></returns>
        </member>
        <member name="M:Majid.Application.Services.ApplicationService.IsEnabled(System.String)">
            <summary>
            Checks if given feature is enabled for current tenant.
            </summary>
            <param name="featureName">Name of the feature</param>
            <returns></returns>
        </member>
        <member name="T:Majid.Application.Services.CrudAppServiceBase`6">
            <summary>
            This is a common base class for CrudAppService and AsyncCrudAppService classes.
            Inherit either from CrudAppService or AsyncCrudAppService, not from this class.
            </summary>
        </member>
        <member name="M:Majid.Application.Services.CrudAppServiceBase`6.ApplySorting(System.Linq.IQueryable{`0},`3)">
            <summary>
            Should apply sorting if needed.
            </summary>
            <param name="query">The query.</param>
            <param name="input">The input.</param>
        </member>
        <member name="M:Majid.Application.Services.CrudAppServiceBase`6.ApplyPaging(System.Linq.IQueryable{`0},`3)">
            <summary>
            Should apply paging if needed.
            </summary>
            <param name="query">The query.</param>
            <param name="input">The input.</param>
        </member>
        <member name="M:Majid.Application.Services.CrudAppServiceBase`6.CreateFilteredQuery(`3)">
            <summary>
            This method should create <see cref="T:System.Linq.IQueryable`1"/> based on given input.
            It should filter query if needed, but should not do sorting or paging.
            Sorting should be done in <see cref="M:Majid.Application.Services.CrudAppServiceBase`6.ApplySorting(System.Linq.IQueryable{`0},`3)"/> and paging should be done in <see cref="M:Majid.Application.Services.CrudAppServiceBase`6.ApplyPaging(System.Linq.IQueryable{`0},`3)"/>
            methods.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:Majid.Application.Services.CrudAppServiceBase`6.MapToEntityDto(`0)">
            <summary>
            Maps <see cref="!:TEntity"/> to <see cref="!:TEntityDto"/>.
            It uses <see cref="T:Majid.ObjectMapping.IObjectMapper"/> by default.
            It can be overrided for custom mapping.
            </summary>
        </member>
        <member name="M:Majid.Application.Services.CrudAppServiceBase`6.MapToEntity(`4)">
            <summary>
            Maps <see cref="!:TEntityDto"/> to <see cref="!:TEntity"/> to create a new entity.
            It uses <see cref="T:Majid.ObjectMapping.IObjectMapper"/> by default.
            It can be overrided for custom mapping.
            </summary>
        </member>
        <member name="M:Majid.Application.Services.CrudAppServiceBase`6.MapToEntity(`5,`0)">
            <summary>
            Maps <see cref="!:TUpdateInput"/> to <see cref="!:TEntity"/> to update the entity.
            It uses <see cref="T:Majid.ObjectMapping.IObjectMapper"/> by default.
            It can be overrided for custom mapping.
            </summary>
        </member>
        <member name="T:Majid.Application.Services.Dto.AuditedEntityDto">
            <summary>
            A shortcut of <see cref="T:Majid.Application.Services.Dto.AuditedEntityDto`1"/> for most used primary key type (<see cref="T:System.Int32"/>).
            </summary>
        </member>
        <member name="T:Majid.Application.Services.Dto.AuditedEntityDto`1">
            <summary>
            This class can be inherited for simple Dto objects those are used for entities implement <see cref="T:Majid.Domain.Entities.Auditing.IAudited`1"/> interface.
            </summary>
            <typeparam name="TPrimaryKey">Type of primary key</typeparam>
        </member>
        <member name="P:Majid.Application.Services.Dto.AuditedEntityDto`1.LastModificationTime">
            <summary>
            Last modification date of this entity.
            </summary>
        </member>
        <member name="P:Majid.Application.Services.Dto.AuditedEntityDto`1.LastModifierUserId">
            <summary>
            Last modifier user of this entity.
            </summary>
        </member>
        <member name="T:Majid.Application.Services.Dto.ComboboxItemDto">
            <summary>
            This DTO can be used as a simple item for a combobox/list.
            </summary>
        </member>
        <member name="P:Majid.Application.Services.Dto.ComboboxItemDto.Value">
            <summary>
            Value of the item.
            </summary>
        </member>
        <member name="P:Majid.Application.Services.Dto.ComboboxItemDto.DisplayText">
            <summary>
            Display text of the item.
            </summary>
        </member>
        <member name="P:Majid.Application.Services.Dto.ComboboxItemDto.IsSelected">
            <summary>
            Is selected?
            </summary>
        </member>
        <member name="M:Majid.Application.Services.Dto.ComboboxItemDto.#ctor">
            <summary>
            Creates a new <see cref="T:Majid.Application.Services.Dto.ComboboxItemDto"/>.
            </summary>
        </member>
        <member name="M:Majid.Application.Services.Dto.ComboboxItemDto.#ctor(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Majid.Application.Services.Dto.ComboboxItemDto"/>.
            </summary>
            <param name="value">Value of the item</param>
            <param name="displayText">Display text of the item</param>
        </member>
        <member name="T:Majid.Application.Services.Dto.CreationAuditedEntityDto">
            <summary>
             A shortcut of <see cref="T:Majid.Application.Services.Dto.CreationAuditedEntityDto"/> for most used primary key type (<see cref="T:System.Int32"/>).
            </summary>
        </member>
        <member name="T:Majid.Application.Services.Dto.CreationAuditedEntityDto`1">
            <summary>
            This class can be inherited for simple Dto objects those are used for entities implement <see cref="T:Majid.Domain.Entities.Auditing.ICreationAudited"/> interface.
            </summary>
            <typeparam name="TPrimaryKey">Type of primary key</typeparam>
        </member>
        <member name="P:Majid.Application.Services.Dto.CreationAuditedEntityDto`1.CreationTime">
            <summary>
            Creation date of this entity.
            </summary>
        </member>
        <member name="P:Majid.Application.Services.Dto.CreationAuditedEntityDto`1.CreatorUserId">
            <summary>
            Creator user's id for this entity.
            </summary>
        </member>
        <member name="M:Majid.Application.Services.Dto.CreationAuditedEntityDto`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Majid.Application.Services.Dto.EntityDto">
            <summary>
            A shortcut of <see cref="T:Majid.Application.Services.Dto.EntityDto`1"/> for most used primary key type (<see cref="T:System.Int32"/>).
            </summary>
        </member>
        <member name="M:Majid.Application.Services.Dto.EntityDto.#ctor">
            <summary>
            Creates a new <see cref="T:Majid.Application.Services.Dto.EntityDto"/> object.
            </summary>
        </member>
        <member name="M:Majid.Application.Services.Dto.EntityDto.#ctor(System.Int32)">
            <summary>
            Creates a new <see cref="T:Majid.Application.Services.Dto.EntityDto"/> object.
            </summary>
            <param name="id">Id of the entity</param>
        </member>
        <member name="T:Majid.Application.Services.Dto.EntityDto`1">
            <summary>
            Implements common properties for entity based DTOs.
            </summary>
            <typeparam name="TPrimaryKey">Type of the primary key</typeparam>
        </member>
        <member name="P:Majid.Application.Services.Dto.EntityDto`1.Id">
            <summary>
            Id of the entity.
            </summary>
        </member>
        <member name="M:Majid.Application.Services.Dto.EntityDto`1.#ctor">
            <summary>
            Creates a new <see cref="T:Majid.Application.Services.Dto.EntityDto`1"/> object.
            </summary>
        </member>
        <member name="M:Majid.Application.Services.Dto.EntityDto`1.#ctor(`0)">
            <summary>
            Creates a new <see cref="T:Majid.Application.Services.Dto.EntityDto`1"/> object.
            </summary>
            <param name="id">Id of the entity</param>
        </member>
        <member name="T:Majid.Application.Services.Dto.FullAuditedEntityDto">
            <summary>
            A shortcut of <see cref="T:Majid.Application.Services.Dto.FullAuditedEntityDto`1"/> for most used primary key type (<see cref="T:System.Int32"/>).
            </summary>
        </member>
        <member name="T:Majid.Application.Services.Dto.FullAuditedEntityDto`1">
            <summary>
            This class can be inherited for simple Dto objects those are used for entities implement <see cref="T:Majid.Domain.Entities.Auditing.IFullAudited`1"/> interface.
            </summary>
            <typeparam name="TPrimaryKey">Type of primary key</typeparam>
        </member>
        <member name="P:Majid.Application.Services.Dto.FullAuditedEntityDto`1.IsDeleted">
            <summary>
            Is this entity deleted?
            </summary>
        </member>
        <member name="P:Majid.Application.Services.Dto.FullAuditedEntityDto`1.DeleterUserId">
            <summary>
            Deleter user's Id, if this entity is deleted,
            </summary>
        </member>
        <member name="P:Majid.Application.Services.Dto.FullAuditedEntityDto`1.DeletionTime">
            <summary>
            Deletion time, if this entity is deleted,
            </summary>
        </member>
        <member name="T:Majid.Application.Services.Dto.IEntityDto">
            <summary>
            A shortcut of <see cref="T:Majid.Application.Services.Dto.IEntityDto`1"/> for most used primary key type (<see cref="T:System.Int32"/>).
            </summary>
        </member>
        <member name="T:Majid.Application.Services.Dto.IEntityDto`1">
            <summary>
            Defines common properties for entity based DTOs.
            </summary>
            <typeparam name="TPrimaryKey"></typeparam>
        </member>
        <member name="P:Majid.Application.Services.Dto.IEntityDto`1.Id">
            <summary>
            Id of the entity.
            </summary>
        </member>
        <member name="T:Majid.Application.Services.Dto.IHasLongTotalCount">
            <summary>
            This interface is defined to standardize to set "Total Count of Items" to a DTO for long type.
            </summary>
        </member>
        <member name="P:Majid.Application.Services.Dto.IHasLongTotalCount.TotalCount">
            <summary>
            Total count of Items.
            </summary>
        </member>
        <member name="T:Majid.Application.Services.Dto.IHasTotalCount">
            <summary>
            This interface is defined to standardize to set "Total Count of Items" to a DTO.
            </summary>
        </member>
        <member name="P:Majid.Application.Services.Dto.IHasTotalCount.TotalCount">
            <summary>
            Total count of Items.
            </summary>
        </member>
        <member name="T:Majid.Application.Services.Dto.ILimitedResultRequest">
            <summary>
            This interface is defined to standardize to request a limited result.
            </summary>
        </member>
        <member name="P:Majid.Application.Services.Dto.ILimitedResultRequest.MaxResultCount">
            <summary>
            Max expected result count.
            </summary>
        </member>
        <member name="T:Majid.Application.Services.Dto.IListResult`1">
            <summary>
            This interface is defined to standardize to return a list of items to clients.
            </summary>
            <typeparam name="T">Type of the items in the <see cref="P:Majid.Application.Services.Dto.IListResult`1.Items"/> list</typeparam>
        </member>
        <member name="P:Majid.Application.Services.Dto.IListResult`1.Items">
            <summary>
            List of items.
            </summary>
        </member>
        <member name="T:Majid.Application.Services.Dto.IPagedAndSortedResultRequest">
            <summary>
            This interface is defined to standardize to request a paged and sorted result.
            </summary>
        </member>
        <member name="T:Majid.Application.Services.Dto.IPagedResult`1">
            <summary>
            This interface is defined to standardize to return a page of items to clients.
            </summary>
            <typeparam name="T">Type of the items in the <see cref="P:Majid.Application.Services.Dto.IListResult`1.Items"/> list</typeparam>
        </member>
        <member name="T:Majid.Application.Services.Dto.IPagedResultRequest">
            <summary>
            This interface is defined to standardize to request a paged result.
            </summary>
        </member>
        <member name="P:Majid.Application.Services.Dto.IPagedResultRequest.SkipCount">
            <summary>
            Skip count (beginning of the page).
            </summary>
        </member>
        <member name="T:Majid.Application.Services.Dto.ISortedResultRequest">
            <summary>
            This interface is defined to standardize to request a sorted result.
            </summary>
        </member>
        <member name="P:Majid.Application.Services.Dto.ISortedResultRequest.Sorting">
            <summary>
            Sorting information.
            Should include sorting field and optionally a direction (ASC or DESC)
            Can contain more than one field separated by comma (,).
            </summary>
            <example>
            Examples:
            "Name"
            "Name DESC"
            "Name ASC, Age DESC"
            </example>
        </member>
        <member name="T:Majid.Application.Services.Dto.LimitedResultRequestDto">
            <summary>
            Simply implements <see cref="T:Majid.Application.Services.Dto.ILimitedResultRequest"/>.
            </summary>
        </member>
        <member name="T:Majid.Application.Services.Dto.ListResultDto`1">
            <summary>
            Implements <see cref="T:Majid.Application.Services.Dto.IListResult`1"/>.
            </summary>
            <typeparam name="T">Type of the items in the <see cref="P:Majid.Application.Services.Dto.ListResultDto`1.Items"/> list</typeparam>
        </member>
        <member name="P:Majid.Application.Services.Dto.ListResultDto`1.Items">
            <summary>
            List of items.
            </summary>
        </member>
        <member name="M:Majid.Application.Services.Dto.ListResultDto`1.#ctor">
            <summary>
            Creates a new <see cref="T:Majid.Application.Services.Dto.ListResultDto`1"/> object.
            </summary>
        </member>
        <member name="M:Majid.Application.Services.Dto.ListResultDto`1.#ctor(System.Collections.Generic.IReadOnlyList{`0})">
            <summary>
            Creates a new <see cref="T:Majid.Application.Services.Dto.ListResultDto`1"/> object.
            </summary>
            <param name="items">List of items</param>
        </member>
        <member name="T:Majid.Application.Services.Dto.NameValueDto">
            <summary>
            Can be used to send/receive Name/Value (or Key/Value) pairs.
            </summary>
        </member>
        <member name="M:Majid.Application.Services.Dto.NameValueDto.#ctor">
            <summary>
            Creates a new <see cref="T:Majid.Application.Services.Dto.NameValueDto"/>.
            </summary>
        </member>
        <member name="M:Majid.Application.Services.Dto.NameValueDto.#ctor(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Majid.Application.Services.Dto.NameValueDto"/>.
            </summary>
        </member>
        <member name="M:Majid.Application.Services.Dto.NameValueDto.#ctor(Majid.NameValue)">
            <summary>
            Creates a new <see cref="T:Majid.Application.Services.Dto.NameValueDto"/>.
            </summary>
            <param name="nameValue">A <see cref="T:Majid.NameValue"/> object to get it's name and value</param>
        </member>
        <member name="T:Majid.Application.Services.Dto.NameValueDto`1">
            <summary>
            Can be used to send/receive Name/Value (or Key/Value) pairs.
            </summary>
        </member>
        <member name="M:Majid.Application.Services.Dto.NameValueDto`1.#ctor">
            <summary>
            Creates a new <see cref="T:Majid.Application.Services.Dto.NameValueDto"/>.
            </summary>
        </member>
        <member name="M:Majid.Application.Services.Dto.NameValueDto`1.#ctor(System.String,`0)">
            <summary>
            Creates a new <see cref="T:Majid.Application.Services.Dto.NameValueDto"/>.
            </summary>
        </member>
        <member name="M:Majid.Application.Services.Dto.NameValueDto`1.#ctor(Majid.NameValue{`0})">
            <summary>
            Creates a new <see cref="T:Majid.Application.Services.Dto.NameValueDto"/>.
            </summary>
            <param name="nameValue">A <see cref="T:Majid.NameValue"/> object to get it's name and value</param>
        </member>
        <member name="T:Majid.Application.Services.Dto.NullableIdDto`1">
            <summary>
            This DTO can be directly used (or inherited)
            to pass an nullable Id value to an application service method.
            </summary>
            <typeparam name="TId">Type of the Id</typeparam>
        </member>
        <member name="T:Majid.Application.Services.Dto.NullableIdDto">
            <summary>
            A shortcut of <see cref="T:Majid.Application.Services.Dto.NullableIdDto`1"/> for <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="T:Majid.Application.Services.Dto.PagedAndSortedResultRequestDto">
            <summary>
            Simply implements <see cref="T:Majid.Application.Services.Dto.IPagedAndSortedResultRequest"/>.
            </summary>
        </member>
        <member name="T:Majid.Application.Services.Dto.PagedResultDto`1">
            <summary>
            Implements <see cref="T:Majid.Application.Services.Dto.IPagedResult`1"/>.
            </summary>
            <typeparam name="T">Type of the items in the <see cref="P:Majid.Application.Services.Dto.ListResultDto`1.Items"/> list</typeparam>
        </member>
        <member name="P:Majid.Application.Services.Dto.PagedResultDto`1.TotalCount">
            <summary>
            Total count of Items.
            </summary>
        </member>
        <member name="M:Majid.Application.Services.Dto.PagedResultDto`1.#ctor">
            <summary>
            Creates a new <see cref="T:Majid.Application.Services.Dto.PagedResultDto`1"/> object.
            </summary>
        </member>
        <member name="M:Majid.Application.Services.Dto.PagedResultDto`1.#ctor(System.Int32,System.Collections.Generic.IReadOnlyList{`0})">
            <summary>
            Creates a new <see cref="T:Majid.Application.Services.Dto.PagedResultDto`1"/> object.
            </summary>
            <param name="totalCount">Total count of Items</param>
            <param name="items">List of items in current page</param>
        </member>
        <member name="T:Majid.Application.Services.Dto.PagedResultRequestDto">
            <summary>
            Simply implements <see cref="T:Majid.Application.Services.Dto.IPagedResultRequest"/>.
            </summary>
        </member>
        <member name="T:Majid.Application.Services.IApplicationService">
            <summary>
            This interface must be implemented by all application services to identify them by convention.
            </summary>
        </member>
        <member name="P:Majid.Application.Services.RemoteServiceAttribute.IsEnabled">
            <summary>
            Default: true.
            </summary>
        </member>
        <member name="P:Majid.Application.Services.RemoteServiceAttribute.IsMetadataEnabled">
            <summary>
            Default: true.
            </summary>
        </member>
        <member name="T:Majid.Auditing.AuditedAttribute">
            <summary>
            This attribute is used to apply audit logging for a single method or
            all methods of a class or interface.
            </summary>
        </member>
        <member name="T:Majid.Auditing.AuditInfo">
            <summary>
            This informations are collected for an <see cref="T:Majid.Auditing.AuditedAttribute"/> method.
            </summary>
        </member>
        <member name="P:Majid.Auditing.AuditInfo.TenantId">
            <summary>
            TenantId.
            </summary>
        </member>
        <member name="P:Majid.Auditing.AuditInfo.UserId">
            <summary>
            UserId.
            </summary>
        </member>
        <member name="P:Majid.Auditing.AuditInfo.ImpersonatorUserId">
            <summary>
            ImpersonatorUserId.
            </summary>
        </member>
        <member name="P:Majid.Auditing.AuditInfo.ImpersonatorTenantId">
            <summary>
            ImpersonatorTenantId.
            </summary>
        </member>
        <member name="P:Majid.Auditing.AuditInfo.ServiceName">
            <summary>
            Service (class/interface) name.
            </summary>
        </member>
        <member name="P:Majid.Auditing.AuditInfo.MethodName">
            <summary>
            Executed method name.
            </summary>
        </member>
        <member name="P:Majid.Auditing.AuditInfo.Parameters">
            <summary>
            Calling parameters.
            </summary>
        </member>
        <member name="P:Majid.Auditing.AuditInfo.ExecutionTime">
            <summary>
            Start time of the method execution.
            </summary>
        </member>
        <member name="P:Majid.Auditing.AuditInfo.ExecutionDuration">
            <summary>
            Total duration of the method call.
            </summary>
        </member>
        <member name="P:Majid.Auditing.AuditInfo.ClientIpAddress">
            <summary>
            IP address of the client.
            </summary>
        </member>
        <member name="P:Majid.Auditing.AuditInfo.ClientName">
            <summary>
            Name (generally computer name) of the client.
            </summary>
        </member>
        <member name="P:Majid.Auditing.AuditInfo.BrowserInfo">
            <summary>
            Browser information if this method is called in a web request.
            </summary>
        </member>
        <member name="P:Majid.Auditing.AuditInfo.CustomData">
            <summary>
            Optional custom data that can be filled and used.
            </summary>
        </member>
        <member name="P:Majid.Auditing.AuditInfo.Exception">
            <summary>
            Exception object, if an exception occurred during execution of the method.
            </summary>
        </member>
        <member name="T:Majid.Auditing.AuditingContractResolver">
            <summary>
            Decides which properties of auditing class to be serialized
            </summary>
        </member>
        <member name="T:Majid.Auditing.AuditingStoreExtensions">
            <summary>
            Extension methods for <see cref="T:Majid.Auditing.IAuditingStore"/>.
            </summary>
        </member>
        <member name="M:Majid.Auditing.AuditingStoreExtensions.Save(Majid.Auditing.IAuditingStore,Majid.Auditing.AuditInfo)">
            <summary>
            Should save audits to a persistent store.
            </summary>
            <param name="auditingStore">Auditing store</param>
            <param name="auditInfo">Audit informations</param>
        </member>
        <member name="T:Majid.Auditing.DefaultAuditInfoProvider">
            <summary>
            Default implementation of <see cref="T:Majid.Auditing.IAuditInfoProvider" />.
            </summary>
        </member>
        <member name="T:Majid.Auditing.DisableAuditingAttribute">
            <summary>
            Used to disable auditing for a single method or
            all methods of a class or interface.
            </summary>
        </member>
        <member name="T:Majid.Auditing.IAuditInfoProvider">
            <summary>
            Provides an interface to provide audit informations in the upper layers.
            </summary>
        </member>
        <member name="M:Majid.Auditing.IAuditInfoProvider.Fill(Majid.Auditing.AuditInfo)">
            <summary>
            Called to fill needed properties.
            </summary>
            <param name="auditInfo">Audit info that is partially filled</param>
        </member>
        <member name="T:Majid.Auditing.IAuditingConfiguration">
            <summary>
            Used to configure auditing.
            </summary>
        </member>
        <member name="P:Majid.Auditing.IAuditingConfiguration.IsEnabled">
            <summary>
            Used to enable/disable auditing system.
            Default: true. Set false to completely disable it.
            </summary>
        </member>
        <member name="P:Majid.Auditing.IAuditingConfiguration.IsEnabledForAnonymousUsers">
            <summary>
            Set true to enable saving audit logs if current user is not logged in.
            Default: false.
            </summary>
        </member>
        <member name="P:Majid.Auditing.IAuditingConfiguration.Selectors">
            <summary>
            List of selectors to select classes/interfaces which should be audited as default.
            </summary>
        </member>
        <member name="P:Majid.Auditing.IAuditingConfiguration.IgnoredTypes">
            <summary>
            Ignored types for serialization on audit logging.
            </summary>
        </member>
        <member name="T:Majid.Auditing.IAuditingSelectorList">
            <summary>
            List of selector functions to select classes/interfaces to be audited.
            </summary>
        </member>
        <member name="M:Majid.Auditing.IAuditingSelectorList.RemoveByName(System.String)">
            <summary>
            Removes a selector by name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Majid.Auditing.IAuditingStore">
            <summary>
            This interface should be implemented by vendors to
            make auditing working.
            Default implementation is <see cref="T:Majid.Auditing.SimpleLogAuditingStore"/>.
            </summary>
        </member>
        <member name="M:Majid.Auditing.IAuditingStore.SaveAsync(Majid.Auditing.AuditInfo)">
            <summary>
            Should save audits to a persistent store.
            </summary>
            <param name="auditInfo">Audit informations</param>
        </member>
        <member name="T:Majid.Auditing.SimpleLogAuditingStore">
            <summary>
            Implements <see cref="T:Majid.Auditing.IAuditingStore"/> to simply write audits to logs.
            </summary>
        </member>
        <member name="P:Majid.Auditing.SimpleLogAuditingStore.Instance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="T:Majid.Authorization.AuthorizationInterceptor">
            <summary>
            This class is used to intercept methods to make authorization if the method defined <see cref="T:Majid.Authorization.MajidAuthorizeAttribute"/>.
            </summary>
        </member>
        <member name="T:Majid.Authorization.AuthorizationInterceptorRegistrar">
            <summary>
            This class is used to register interceptors on the Application Layer.
            </summary>
        </member>
        <member name="T:Majid.Authorization.AuthorizationProvider">
            <summary>
            This is the main interface to define permissions for an application.
            Implement it to define permissions for your module.
            </summary>
        </member>
        <member name="M:Majid.Authorization.AuthorizationProvider.SetPermissions(Majid.Authorization.IPermissionDefinitionContext)">
            <summary>
            This method is called once on application startup to allow to define permissions.
            </summary>
            <param name="context">Permission definition context</param>
        </member>
        <member name="T:Majid.Authorization.IMajidAuthorizeAttribute">
            <summary>
            Defines standard interface for authorization attributes.
            </summary>
        </member>
        <member name="P:Majid.Authorization.IMajidAuthorizeAttribute.Permissions">
            <summary>
            A list of permissions to authorize.
            </summary>
        </member>
        <member name="P:Majid.Authorization.IMajidAuthorizeAttribute.RequireAllPermissions">
            <summary>
            If this property is set to true, all of the <see cref="P:Majid.Authorization.IMajidAuthorizeAttribute.Permissions"/> must be granted.
            If it's false, at least one of the <see cref="P:Majid.Authorization.IMajidAuthorizeAttribute.Permissions"/> must be granted.
            Default: false.
            </summary>
        </member>
        <member name="T:Majid.Authorization.IPermissionChecker">
            <summary>
            This class is used to permissions for users.
            </summary>
        </member>
        <member name="M:Majid.Authorization.IPermissionChecker.IsGrantedAsync(System.String)">
            <summary>
            Checks if current user is granted for a permission.
            </summary>
            <param name="permissionName">Name of the permission</param>
        </member>
        <member name="M:Majid.Authorization.IPermissionChecker.IsGrantedAsync(Majid.UserIdentifier,System.String)">
            <summary>
            Checks if a user is granted for a permission.
            </summary>
            <param name="user">User to check</param>
            <param name="permissionName">Name of the permission</param>
        </member>
        <member name="T:Majid.Authorization.IPermissionDefinitionContext">
            <summary>
            This context is used on <see cref="M:Majid.Authorization.AuthorizationProvider.SetPermissions(Majid.Authorization.IPermissionDefinitionContext)"/> method.
            </summary>
        </member>
        <member name="M:Majid.Authorization.IPermissionDefinitionContext.CreatePermission(System.String,Majid.Localization.ILocalizableString,Majid.Localization.ILocalizableString,Majid.MultiTenancy.MultiTenancySides,Majid.Application.Features.IFeatureDependency)">
            <summary>
            Creates a new permission under this group.
            </summary>
            <param name="name">Unique name of the permission</param>
            <param name="displayName">Display name of the permission</param>
            <param name="description">A brief description for this permission</param>
            <param name="multiTenancySides">Which side can use this permission</param>
            <param name="featureDependency">Depended feature(s) of this permission</param>
            <returns>New created permission</returns>
        </member>
        <member name="M:Majid.Authorization.IPermissionDefinitionContext.GetPermissionOrNull(System.String)">
            <summary>
            Gets a permission with given name or null if can not find.
            </summary>
            <param name="name">Unique name of the permission</param>
            <returns>Permission object or null</returns>
        </member>
        <member name="M:Majid.Authorization.IPermissionDefinitionContext.RemovePermission(System.String)">
            <summary>
            Remove permission with given name
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Majid.Authorization.IPermissionDependency">
            <summary>
            Defines interface to check a dependency.
            </summary>
        </member>
        <member name="M:Majid.Authorization.IPermissionDependency.IsSatisfiedAsync(Majid.Authorization.IPermissionDependencyContext)">
            <summary>
            Checks if permission dependency is satisfied.
            </summary>
            <param name="context">Context.</param>
        </member>
        <member name="T:Majid.Authorization.IPermissionDependencyContext">
            <summary>
            Permission dependency context.
            </summary>
        </member>
        <member name="P:Majid.Authorization.IPermissionDependencyContext.User">
            <summary>
            The user which requires permission. Can be null if no user.
            </summary>
        </member>
        <member name="P:Majid.Authorization.IPermissionDependencyContext.IocResolver">
            <summary>
            Gets the <see cref="T:Majid.Dependency.IIocResolver"/>.
            </summary>
            <value>
            The ioc resolver.
            </value>
        </member>
        <member name="P:Majid.Authorization.IPermissionDependencyContext.PermissionChecker">
            <summary>
            Gets the <see cref="T:Majid.Application.Features.IFeatureChecker"/>.
            </summary>
            <value>
            The feature checker.
            </value>
        </member>
        <member name="T:Majid.Authorization.IPermissionManager">
            <summary>
            Permission manager.
            </summary>
        </member>
        <member name="M:Majid.Authorization.IPermissionManager.GetPermission(System.String)">
            <summary>
            Gets <see cref="T:Majid.Authorization.Permission"/> object with given <paramref name="name"/> or throws exception
            if there is no permission with given <paramref name="name"/>.
            </summary>
            <param name="name">Unique name of the permission</param>
        </member>
        <member name="M:Majid.Authorization.IPermissionManager.GetPermissionOrNull(System.String)">
            <summary>
            Gets <see cref="T:Majid.Authorization.Permission"/> object with given <paramref name="name"/> or returns null
            if there is no permission with given <paramref name="name"/>.
            </summary>
            <param name="name">Unique name of the permission</param>
        </member>
        <member name="M:Majid.Authorization.IPermissionManager.GetAllPermissions(System.Boolean)">
            <summary>
            Gets all permissions.
            </summary>
            <param name="tenancyFilter">Can be passed false to disable tenancy filter.</param>
        </member>
        <member name="M:Majid.Authorization.IPermissionManager.GetAllPermissions(Majid.MultiTenancy.MultiTenancySides)">
            <summary>
            Gets all permissions.
            </summary>
            <param name="multiTenancySides">Multi-tenancy side to filter</param>
        </member>
        <member name="T:Majid.Authorization.MajidAllowAnonymousAttribute">
            <summary>
            Used to allow a method to be accessed by any user.
            Suppress <see cref="T:Majid.Authorization.MajidAuthorizeAttribute"/> defined in the class containing that method.
            </summary>
        </member>
        <member name="T:Majid.Authorization.MajidAuthorizationException">
            <summary>
            This exception is thrown on an unauthorized request.
            </summary>
        </member>
        <member name="P:Majid.Authorization.MajidAuthorizationException.Severity">
            <summary>
            Severity of the exception.
            Default: Warn.
            </summary>
        </member>
        <member name="M:Majid.Authorization.MajidAuthorizationException.#ctor">
            <summary>
            Creates a new <see cref="T:Majid.Authorization.MajidAuthorizationException"/> object.
            </summary>
        </member>
        <member name="M:Majid.Authorization.MajidAuthorizationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new <see cref="T:Majid.Authorization.MajidAuthorizationException"/> object.
            </summary>
        </member>
        <member name="M:Majid.Authorization.MajidAuthorizationException.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Majid.Authorization.MajidAuthorizationException"/> object.
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:Majid.Authorization.MajidAuthorizationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new <see cref="T:Majid.Authorization.MajidAuthorizationException"/> object.
            </summary>
            <param name="message">Exception message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="T:Majid.Authorization.MajidAuthorizeAttribute">
            <summary>
            This attribute is used on a method of an Application Service (A class that implements <see cref="T:Majid.Application.Services.IApplicationService"/>)
            to make that method usable only by authorized users.
            </summary>
        </member>
        <member name="P:Majid.Authorization.MajidAuthorizeAttribute.Permissions">
            <summary>
            A list of permissions to authorize.
            </summary>
        </member>
        <member name="P:Majid.Authorization.MajidAuthorizeAttribute.RequireAllPermissions">
            <summary>
            If this property is set to true, all of the <see cref="P:Majid.Authorization.MajidAuthorizeAttribute.Permissions"/> must be granted.
            If it's false, at least one of the <see cref="P:Majid.Authorization.MajidAuthorizeAttribute.Permissions"/> must be granted.
            Default: false.
            </summary>
        </member>
        <member name="M:Majid.Authorization.MajidAuthorizeAttribute.#ctor(System.String[])">
            <summary>
            Creates a new instance of <see cref="T:Majid.Authorization.MajidAuthorizeAttribute"/> class.
            </summary>
            <param name="permissions">A list of permissions to authorize</param>
        </member>
        <member name="T:Majid.Authorization.NullPermissionChecker">
            <summary>
            Null (and default) implementation of <see cref="T:Majid.Authorization.IPermissionChecker"/>.
            </summary>
        </member>
        <member name="P:Majid.Authorization.NullPermissionChecker.Instance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="T:Majid.Authorization.Permission">
            <summary>
            Represents a permission.
            A permission is used to restrict functionalities of the application from unauthorized users.
            </summary>
        </member>
        <member name="P:Majid.Authorization.Permission.Parent">
            <summary>
            Parent of this permission if one exists.
            If set, this permission can be granted only if parent is granted.
            </summary>
        </member>
        <member name="P:Majid.Authorization.Permission.Name">
            <summary>
            Unique name of the permission.
            This is the key name to grant permissions.
            </summary>
        </member>
        <member name="P:Majid.Authorization.Permission.DisplayName">
            <summary>
            Display name of the permission.
            This can be used to show permission to the user.
            </summary>
        </member>
        <member name="P:Majid.Authorization.Permission.Description">
            <summary>
            A brief description for this permission.
            </summary>
        </member>
        <member name="P:Majid.Authorization.Permission.MultiTenancySides">
            <summary>
            Which side can use this permission.
            </summary>
        </member>
        <member name="P:Majid.Authorization.Permission.FeatureDependency">
            <summary>
            Depended feature(s) of this permission.
            </summary>
        </member>
        <member name="P:Majid.Authorization.Permission.Children">
            <summary>
            List of child permissions. A child permission can be granted only if parent is granted.
            </summary>
        </member>
        <member name="M:Majid.Authorization.Permission.#ctor(System.String,Majid.Localization.ILocalizableString,Majid.Localization.ILocalizableString,Majid.MultiTenancy.MultiTenancySides,Majid.Application.Features.IFeatureDependency)">
            <summary>
            Creates a new Permission.
            </summary>
            <param name="name">Unique name of the permission</param>
            <param name="displayName">Display name of the permission</param>
            <param name="description">A brief description for this permission</param>
            <param name="multiTenancySides">Which side can use this permission</param>
            <param name="featureDependency">Depended feature(s) of this permission</param>
        </member>
        <member name="M:Majid.Authorization.Permission.CreateChildPermission(System.String,Majid.Localization.ILocalizableString,Majid.Localization.ILocalizableString,Majid.MultiTenancy.MultiTenancySides,Majid.Application.Features.IFeatureDependency)">
            <summary>
            Adds a child permission.
            A child permission can be granted only if parent is granted.
            </summary>
            <returns>Returns newly created child permission</returns>
        </member>
        <member name="T:Majid.Authorization.PermissionCheckerExtensions">
            <summary>
            Extension methods for <see cref="T:Majid.Authorization.IPermissionChecker"/>
            </summary>
        </member>
        <member name="M:Majid.Authorization.PermissionCheckerExtensions.IsGranted(Majid.Authorization.IPermissionChecker,System.String)">
            <summary>
            Checks if current user is granted for a permission.
            </summary>
            <param name="permissionChecker">Permission checker</param>
            <param name="permissionName">Name of the permission</param>
        </member>
        <member name="M:Majid.Authorization.PermissionCheckerExtensions.IsGranted(Majid.Authorization.IPermissionChecker,Majid.UserIdentifier,System.String)">
            <summary>
            Checks if a user is granted for a permission.
            </summary>
            <param name="permissionChecker">Permission checker</param>
            <param name="user">User to check</param>
            <param name="permissionName">Name of the permission</param>
        </member>
        <member name="M:Majid.Authorization.PermissionCheckerExtensions.IsGranted(Majid.Authorization.IPermissionChecker,Majid.UserIdentifier,System.Boolean,System.String[])">
            <summary>
            Checks if given user is granted for given permission.
            </summary>
            <param name="permissionChecker">Permission checker</param>
            <param name="user">User</param>
            <param name="requiresAll">True, to require all given permissions are granted. False, to require one or more.</param>
            <param name="permissionNames">Name of the permissions</param>
        </member>
        <member name="M:Majid.Authorization.PermissionCheckerExtensions.IsGrantedAsync(Majid.Authorization.IPermissionChecker,Majid.UserIdentifier,System.Boolean,System.String[])">
            <summary>
            Checks if given user is granted for given permission.
            </summary>
            <param name="permissionChecker">Permission checker</param>
            <param name="user">User</param>
            <param name="requiresAll">True, to require all given permissions are granted. False, to require one or more.</param>
            <param name="permissionNames">Name of the permissions</param>
        </member>
        <member name="M:Majid.Authorization.PermissionCheckerExtensions.IsGranted(Majid.Authorization.IPermissionChecker,System.Boolean,System.String[])">
            <summary>
            Checks if current user is granted for given permission.
            </summary>
            <param name="permissionChecker">Permission checker</param>
            <param name="requiresAll">True, to require all given permissions are granted. False, to require one or more.</param>
            <param name="permissionNames">Name of the permissions</param>
        </member>
        <member name="M:Majid.Authorization.PermissionCheckerExtensions.IsGrantedAsync(Majid.Authorization.IPermissionChecker,System.Boolean,System.String[])">
            <summary>
            Checks if current user is granted for given permission.
            </summary>
            <param name="permissionChecker">Permission checker</param>
            <param name="requiresAll">True, to require all given permissions are granted. False, to require one or more.</param>
            <param name="permissionNames">Name of the permissions</param>
        </member>
        <member name="M:Majid.Authorization.PermissionCheckerExtensions.Authorize(Majid.Authorization.IPermissionChecker,System.String[])">
            <summary>
            Authorizes current user for given permission or permissions,
            throws <see cref="T:Majid.Authorization.MajidAuthorizationException"/> if not authorized.
            User it authorized if any of the <see cref="!:permissionNames"/> are granted.
            </summary>
            <param name="permissionChecker">Permission checker</param>
            <param name="permissionNames">Name of the permissions to authorize</param>
            <exception cref="T:Majid.Authorization.MajidAuthorizationException">Throws authorization exception if</exception>
        </member>
        <member name="M:Majid.Authorization.PermissionCheckerExtensions.Authorize(Majid.Authorization.IPermissionChecker,System.Boolean,System.String[])">
            <summary>
            Authorizes current user for given permission or permissions,
            throws <see cref="T:Majid.Authorization.MajidAuthorizationException"/> if not authorized.
            User it authorized if any of the <see cref="!:permissionNames"/> are granted.
            </summary>
            <param name="permissionChecker">Permission checker</param>
            <param name="requireAll">
            If this is set to true, all of the <see cref="!:permissionNames"/> must be granted.
            If it's false, at least one of the <see cref="!:permissionNames"/> must be granted.
            </param>
            <param name="permissionNames">Name of the permissions to authorize</param>
            <exception cref="T:Majid.Authorization.MajidAuthorizationException">Throws authorization exception if</exception>
        </member>
        <member name="M:Majid.Authorization.PermissionCheckerExtensions.AuthorizeAsync(Majid.Authorization.IPermissionChecker,System.String[])">
            <summary>
            Authorizes current user for given permission or permissions,
            throws <see cref="T:Majid.Authorization.MajidAuthorizationException"/> if not authorized.
            User it authorized if any of the <see cref="!:permissionNames"/> are granted.
            </summary>
            <param name="permissionChecker">Permission checker</param>
            <param name="permissionNames">Name of the permissions to authorize</param>
            <exception cref="T:Majid.Authorization.MajidAuthorizationException">Throws authorization exception if</exception>
        </member>
        <member name="M:Majid.Authorization.PermissionCheckerExtensions.AuthorizeAsync(Majid.Authorization.IPermissionChecker,System.Boolean,System.String[])">
            <summary>
            Authorizes current user for given permission or permissions,
            throws <see cref="T:Majid.Authorization.MajidAuthorizationException"/> if not authorized.
            </summary>
            <param name="permissionChecker">Permission checker</param>
            <param name="requireAll">
            If this is set to true, all of the <see cref="!:permissionNames"/> must be granted.
            If it's false, at least one of the <see cref="!:permissionNames"/> must be granted.
            </param>
            <param name="permissionNames">Name of the permissions to authorize</param>
            <exception cref="T:Majid.Authorization.MajidAuthorizationException">Throws authorization exception if</exception>
        </member>
        <member name="T:Majid.Authorization.PermissionDependencyExtensions">
            <summary>
            Extension methods for <see cref="T:Majid.Authorization.IPermissionDependency"/>.
            </summary>
        </member>
        <member name="M:Majid.Authorization.PermissionDependencyExtensions.IsSatisfied(Majid.Authorization.IPermissionDependency,Majid.Authorization.IPermissionDependencyContext)">
            <summary>
            Checks if permission dependency is satisfied.
            </summary>
            <param name="permissionDependency">The permission dependency</param>
            <param name="context">Context.</param>
        </member>
        <member name="T:Majid.Authorization.PermissionDictionary">
            <summary>
            Used to store and manipulate dictionary of permissions.
            </summary>
        </member>
        <member name="M:Majid.Authorization.PermissionDictionary.AddAllPermissions">
            <summary>
            Adds all child permissions of current permissions recursively.
            </summary>
        </member>
        <member name="M:Majid.Authorization.PermissionDictionary.AddPermissionRecursively(Majid.Authorization.Permission)">
            <summary>
            Adds a permission and it's all child permissions to dictionary.
            </summary>
            <param name="permission">Permission to be added</param>
        </member>
        <member name="T:Majid.Authorization.PermissionFinder">
            <summary>
            This class is used to get permissions out of the system.
            Normally, you should inject and use <see cref="T:Majid.Authorization.IPermissionManager"/> and use it.
            This class can be used in database migrations or in unit tests where Majid is not initialized.
            </summary>
        </member>
        <member name="M:Majid.Authorization.PermissionFinder.GetAllPermissions(Majid.Authorization.AuthorizationProvider[])">
            <summary>
            Collects and gets all permissions in given providers.
            This method can be used to get permissions in database migrations or in unit tests where Majid is not initialized.
            Otherwise, use <see cref="M:Majid.Authorization.IPermissionManager.GetAllPermissions(System.Boolean)"/> method.
            
            </summary>
            <param name="authorizationProviders">Authorization providers</param>
            <returns>List of permissions</returns>
            <remarks>
            This method creates instances of <see cref="!:authorizationProviders"/> by order and
            calls <see cref="M:Majid.Authorization.AuthorizationProvider.SetPermissions(Majid.Authorization.IPermissionDefinitionContext)"/> to build permission list.
            So, providers should not use dependency injection.
            </remarks>
        </member>
        <member name="T:Majid.Authorization.PermissionManager">
            <summary>
            Permission manager.
            </summary>
        </member>
        <member name="M:Majid.Authorization.PermissionManager.#ctor(Majid.Dependency.IIocManager,Majid.Configuration.Startup.IAuthorizationConfiguration)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Majid.Authorization.SimplePermissionDependency">
            <summary>
            Most simple implementation of <see cref="T:Majid.Authorization.IPermissionDependency"/>.
            It checks one or more permissions if they are granted.
            </summary>
        </member>
        <member name="P:Majid.Authorization.SimplePermissionDependency.Permissions">
            <summary>
            A list of permissions to be checked if they are granted.
            </summary>
        </member>
        <member name="P:Majid.Authorization.SimplePermissionDependency.RequiresAll">
            <summary>
            If this property is set to true, all of the <see cref="P:Majid.Authorization.SimplePermissionDependency.Permissions"/> must be granted.
            If it's false, at least one of the <see cref="P:Majid.Authorization.SimplePermissionDependency.Permissions"/> must be granted.
            Default: false.
            </summary>
        </member>
        <member name="M:Majid.Authorization.SimplePermissionDependency.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Majid.Authorization.SimplePermissionDependency"/> class.
            </summary>
            <param name="permissions">The permissions.</param>
        </member>
        <member name="M:Majid.Authorization.SimplePermissionDependency.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Majid.Authorization.SimplePermissionDependency"/> class.
            </summary>
            <param name="requiresAll">
            If this is set to true, all of the <see cref="P:Majid.Authorization.SimplePermissionDependency.Permissions"/> must be granted.
            If it's false, at least one of the <see cref="P:Majid.Authorization.SimplePermissionDependency.Permissions"/> must be granted.
            </param>
            <param name="permissions">The permissions.</param>
        </member>
        <member name="M:Majid.Authorization.SimplePermissionDependency.IsSatisfiedAsync(Majid.Authorization.IPermissionDependencyContext)">
            <inheritdoc/>
        </member>
        <member name="T:Majid.BackgroundJobs.BackgroundJob`1">
            <summary>
            Base class that can be used to implement <see cref="T:Majid.BackgroundJobs.IBackgroundJob`1"/>.
            </summary>
        </member>
        <member name="P:Majid.BackgroundJobs.BackgroundJob`1.SettingManager">
            <summary>
            Reference to the setting manager.
            </summary>
        </member>
        <member name="P:Majid.BackgroundJobs.BackgroundJob`1.UnitOfWorkManager">
            <summary>
            Reference to <see cref="T:Majid.Domain.Uow.IUnitOfWorkManager"/>.
            </summary>
        </member>
        <member name="P:Majid.BackgroundJobs.BackgroundJob`1.CurrentUnitOfWork">
            <summary>
            Gets current unit of work.
            </summary>
        </member>
        <member name="P:Majid.BackgroundJobs.BackgroundJob`1.LocalizationManager">
            <summary>
            Reference to the localization manager.
            </summary>
        </member>
        <member name="P:Majid.BackgroundJobs.BackgroundJob`1.LocalizationSourceName">
            <summary>
            Gets/sets name of the localization source that is used in this application service.
            It must be set in order to use <see cref="M:Majid.BackgroundJobs.BackgroundJob`1.L(System.String)"/> and <see cref="M:Majid.BackgroundJobs.BackgroundJob`1.L(System.String,System.Globalization.CultureInfo)"/> methods.
            </summary>
        </member>
        <member name="P:Majid.BackgroundJobs.BackgroundJob`1.LocalizationSource">
            <summary>
            Gets localization source.
            It's valid if <see cref="P:Majid.BackgroundJobs.BackgroundJob`1.LocalizationSourceName"/> is set.
            </summary>
        </member>
        <member name="P:Majid.BackgroundJobs.BackgroundJob`1.Logger">
            <summary>
            Reference to the logger to write logs.
            </summary>
        </member>
        <member name="M:Majid.BackgroundJobs.BackgroundJob`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Majid.BackgroundJobs.BackgroundJob`1.L(System.String)">
            <summary>
            Gets localized string for given key name and current language.
            </summary>
            <param name="name">Key name</param>
            <returns>Localized string</returns>
        </member>
        <member name="M:Majid.BackgroundJobs.BackgroundJob`1.L(System.String,System.Object[])">
            <summary>
            Gets localized string for given key name and current language with formatting strings.
            </summary>
            <param name="name">Key name</param>
            <param name="args">Format arguments</param>
            <returns>Localized string</returns>
        </member>
        <member name="M:Majid.BackgroundJobs.BackgroundJob`1.L(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets localized string for given key name and specified culture information.
            </summary>
            <param name="name">Key name</param>
            <param name="culture">culture information</param>
            <returns>Localized string</returns>
        </member>
        <member name="M:Majid.BackgroundJobs.BackgroundJob`1.L(System.String,System.Globalization.CultureInfo,System.Object[])">
            <summary>
            Gets localized string for given key name and current language with formatting strings.
            </summary>
            <param name="name">Key name</param>
            <param name="culture">culture information</param>
            <param name="args">Format arguments</param>
            <returns>Localized string</returns>
        </member>
        <member name="M:Majid.BackgroundJobs.BackgroundJobException.#ctor">
            <summary>
            Creates a new <see cref="T:Majid.BackgroundJobs.BackgroundJobException"/> object.
            </summary>
        </member>
        <member name="M:Majid.BackgroundJobs.BackgroundJobException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new <see cref="T:Majid.BackgroundJobs.BackgroundJobException"/> object.
            </summary>
        </member>
        <member name="M:Majid.BackgroundJobs.BackgroundJobException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new <see cref="T:Majid.BackgroundJobs.BackgroundJobException"/> object.
            </summary>
            <param name="message">Exception message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="T:Majid.BackgroundJobs.BackgroundJobInfo">
            <summary>
            Represents a background job info that is used to persist jobs.
            </summary>
        </member>
        <member name="F:Majid.BackgroundJobs.BackgroundJobInfo.MaxJobTypeLength">
            <summary>
            Maximum length of <see cref="P:Majid.BackgroundJobs.BackgroundJobInfo.JobType"/>.
            Value: 512.
            </summary>
        </member>
        <member name="F:Majid.BackgroundJobs.BackgroundJobInfo.MaxJobArgsLength">
            <summary>
            Maximum length of <see cref="P:Majid.BackgroundJobs.BackgroundJobInfo.JobArgs"/>.
            Value: 1 MB (1,048,576 bytes).
            </summary>
        </member>
        <member name="P:Majid.BackgroundJobs.BackgroundJobInfo.DefaultFirstWaitDuration">
            <summary>
            Default duration (as seconds) for the first wait on a failure.
            Default value: 60 (1 minutes).
            </summary>
        </member>
        <member name="P:Majid.BackgroundJobs.BackgroundJobInfo.DefaultTimeout">
            <summary>
            Default timeout value (as seconds) for a job before it's abandoned (<see cref="P:Majid.BackgroundJobs.BackgroundJobInfo.IsAbandoned"/>).
            Default value: 172,800 (2 days).
            </summary>
        </member>
        <member name="P:Majid.BackgroundJobs.BackgroundJobInfo.DefaultWaitFactor">
            <summary>
            Default wait factor for execution failures.
            This amount is multiplated by last wait time to calculate next wait time.
            Default value: 2.0.
            </summary>
        </member>
        <member name="P:Majid.BackgroundJobs.BackgroundJobInfo.JobType">
            <summary>
            Type of the job.
            It's AssemblyQualifiedName of job type.
            </summary>
        </member>
        <member name="P:Majid.BackgroundJobs.BackgroundJobInfo.JobArgs">
            <summary>
            Job arguments as JSON string.
            </summary>
        </member>
        <member name="P:Majid.BackgroundJobs.BackgroundJobInfo.TryCount">
            <summary>
            Try count of this job.
            A job is re-tried if it fails.
            </summary>
        </member>
        <member name="P:Majid.BackgroundJobs.BackgroundJobInfo.NextTryTime">
            <summary>
            Next try time of this job.
            </summary>
        </member>
        <member name="P:Majid.BackgroundJobs.BackgroundJobInfo.LastTryTime">
            <summary>
            Last try time of this job.
            </summary>
        </member>
        <member name="P:Majid.BackgroundJobs.BackgroundJobInfo.IsAbandoned">
            <summary>
            This is true if this job is continously failed and will not be executed again.
            </summary>
        </member>
        <member name="P:Majid.BackgroundJobs.BackgroundJobInfo.Priority">
            <summary>
            Priority of this job.
            </summary>
        </member>
        <member name="M:Majid.BackgroundJobs.BackgroundJobInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Majid.BackgroundJobs.BackgroundJobInfo"/> class.
            </summary>
        </member>
        <member name="M:Majid.BackgroundJobs.BackgroundJobInfo.CalculateNextTryTime">
            <summary>
            Calculates next try time if a job fails.
            Returns null if it will not wait anymore and job should be abandoned.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Majid.BackgroundJobs.BackgroundJobManager">
            <summary>
            Default implementation of <see cref="T:Majid.BackgroundJobs.IBackgroundJobManager"/>.
            </summary>
        </member>
        <member name="P:Majid.BackgroundJobs.BackgroundJobManager.JobPollPeriod">
            <summary>
            Interval between polling jobs from <see cref="T:Majid.BackgroundJobs.IBackgroundJobStore"/>.
            Default value: 5000 (5 seconds).
            </summary>
        </member>
        <member name="M:Majid.BackgroundJobs.BackgroundJobManager.#ctor(Majid.Dependency.IIocResolver,Majid.BackgroundJobs.IBackgroundJobStore,Majid.Threading.Timers.MajidTimer)">
            <summary>
            Initializes a new instance of the <see cref="T:Majid.BackgroundJobs.BackgroundJobManager"/> class.
            </summary>
        </member>
        <member name="T:Majid.BackgroundJobs.BackgroundJobManagerExtensions">
            <summary>
            Some extension methods for <see cref="T:Majid.BackgroundJobs.IBackgroundJobManager"/>.
            </summary>
        </member>
        <member name="M:Majid.BackgroundJobs.BackgroundJobManagerExtensions.Enqueue``2(Majid.BackgroundJobs.IBackgroundJobManager,``1,Majid.BackgroundJobs.BackgroundJobPriority,System.Nullable{System.TimeSpan})">
            <summary>
            Enqueues a job to be executed.
            </summary>
            <typeparam name="TJob">Type of the job.</typeparam>
            <typeparam name="TArgs">Type of the arguments of job.</typeparam>
            <param name="backgroundJobManager">Background job manager reference</param>
            <param name="args">Job arguments.</param>
            <param name="priority">Job priority.</param>
            <param name="delay">Job delay (wait duration before first try).</param>
        </member>
        <member name="T:Majid.BackgroundJobs.BackgroundJobPriority">
            <summary>
            Priority of a background job.
            </summary>
        </member>
        <member name="F:Majid.BackgroundJobs.BackgroundJobPriority.Low">
            <summary>
            Low.
            </summary>
        </member>
        <member name="F:Majid.BackgroundJobs.BackgroundJobPriority.BelowNormal">
            <summary>
            Below normal.
            </summary>
        </member>
        <member name="F:Majid.BackgroundJobs.BackgroundJobPriority.Normal">
            <summary>
            Normal (default).
            </summary>
        </member>
        <member name="F:Majid.BackgroundJobs.BackgroundJobPriority.AboveNormal">
            <summary>
            Above normal.
            </summary>
        </member>
        <member name="F:Majid.BackgroundJobs.BackgroundJobPriority.High">
            <summary>
            High.
            </summary>
        </member>
        <member name="T:Majid.BackgroundJobs.IBackgroundJob`1">
            <summary>
            Defines interface of a background job.
            </summary>
        </member>
        <member name="M:Majid.BackgroundJobs.IBackgroundJob`1.Execute(`0)">
            <summary>
            Executes the job with the <see cref="!:args"/>.
            </summary>
            <param name="args">Job arguments.</param>
        </member>
        <member name="T:Majid.BackgroundJobs.IBackgroundJobConfiguration">
            <summary>
            Used to configure background job system.
            </summary>
        </member>
        <member name="P:Majid.BackgroundJobs.IBackgroundJobConfiguration.IsJobExecutionEnabled">
            <summary>
            Used to enable/disable background job execution.
            </summary>
        </member>
        <member name="P:Majid.BackgroundJobs.IBackgroundJobConfiguration.MajidConfiguration">
            <summary>
            Gets the MAJID configuration object.
            </summary>
        </member>
        <member name="T:Majid.BackgroundJobs.IBackgroundJobManager">
            <summary>
            Defines interface of a job manager.
            </summary>
        </member>
        <member name="M:Majid.BackgroundJobs.IBackgroundJobManager.EnqueueAsync``2(``1,Majid.BackgroundJobs.BackgroundJobPriority,System.Nullable{System.TimeSpan})">
            <summary>
            Enqueues a job to be executed.
            </summary>
            <typeparam name="TJob">Type of the job.</typeparam>
            <typeparam name="TArgs">Type of the arguments of job.</typeparam>
            <param name="args">Job arguments.</param>
            <param name="priority">Job priority.</param>
            <param name="delay">Job delay (wait duration before first try).</param>
            <returns>Unique identifier of a background job.</returns>
        </member>
        <member name="M:Majid.BackgroundJobs.IBackgroundJobManager.DeleteAsync(System.String)">
            <summary>
            Deletes a job with the specified jobId.
            </summary>
            <param name="jobId">The Job Unique Identifier.</param>
            <returns><c>True</c> on a successfull state transition, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Majid.BackgroundJobs.IBackgroundJobStore">
            <summary>
            Defines interface to store/get background jobs.
            </summary>
        </member>
        <member name="M:Majid.BackgroundJobs.IBackgroundJobStore.GetAsync(System.Int64)">
            <summary>
            Gets a BackgroundJobInfo based on the given jobId.
            </summary>
            <param name="jobId">The Job Unique Identifier.</param>
            <returns>The BackgroundJobInfo object.</returns>
        </member>
        <member name="M:Majid.BackgroundJobs.IBackgroundJobStore.InsertAsync(Majid.BackgroundJobs.BackgroundJobInfo)">
            <summary>
            Inserts a background job.
            </summary>
            <param name="jobInfo">Job information.</param>
        </member>
        <member name="M:Majid.BackgroundJobs.IBackgroundJobStore.GetWaitingJobsAsync(System.Int32)">
            <summary>
            Gets waiting jobs. It should get jobs based on these:
            Conditions: !IsAbandoned And NextTryTime &lt;= Clock.Now.
            Order by: Priority DESC, TryCount ASC, NextTryTime ASC.
            Maximum result: <paramref name="maxResultCount"/>.
            </summary>
            <param name="maxResultCount">Maximum result count.</param>
        </member>
        <member name="M:Majid.BackgroundJobs.IBackgroundJobStore.DeleteAsync(Majid.BackgroundJobs.BackgroundJobInfo)">
            <summary>
            Deletes a job.
            </summary>
            <param name="jobInfo">Job information.</param>
        </member>
        <member name="M:Majid.BackgroundJobs.IBackgroundJobStore.UpdateAsync(Majid.BackgroundJobs.BackgroundJobInfo)">
            <summary>
            Updates a job.
            </summary>
            <param name="jobInfo">Job information.</param>
        </member>
        <member name="T:Majid.BackgroundJobs.InMemoryBackgroundJobStore">
            <summary>
            In memory implementation of <see cref="T:Majid.BackgroundJobs.IBackgroundJobStore"/>.
            It's used if <see cref="T:Majid.BackgroundJobs.IBackgroundJobStore"/> is not implemented by actual persistent store
            and job execution is enabled (<see cref="P:Majid.BackgroundJobs.IBackgroundJobConfiguration.IsJobExecutionEnabled"/>) for the application.
            </summary>
        </member>
        <member name="M:Majid.BackgroundJobs.InMemoryBackgroundJobStore.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Majid.BackgroundJobs.InMemoryBackgroundJobStore"/> class.
            </summary>
        </member>
        <member name="T:Majid.BackgroundJobs.NullBackgroundJobStore">
            <summary>
            Null pattern implementation of <see cref="T:Majid.BackgroundJobs.IBackgroundJobStore"/>.
            It's used if <see cref="T:Majid.BackgroundJobs.IBackgroundJobStore"/> is not implemented by actual persistent store
            and job execution is not enabled (<see cref="P:Majid.BackgroundJobs.IBackgroundJobConfiguration.IsJobExecutionEnabled"/>) for the application.
            </summary>
        </member>
        <member name="T:Majid.Collections.Extensions.CollectionExtensions">
            <summary>
            Extension methods for Collections.
            </summary>
        </member>
        <member name="M:Majid.Collections.Extensions.CollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Checks whatever given collection object is null or has no item.
            </summary>
        </member>
        <member name="M:Majid.Collections.Extensions.CollectionExtensions.AddIfNotContains``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            Adds an item to the collection if it's not already in the collection.
            </summary>
            <param name="source">Collection</param>
            <param name="item">Item to check and add</param>
            <typeparam name="T">Type of the items in the collection</typeparam>
            <returns>Returns True if added, returns False if not.</returns>
        </member>
        <member name="T:Majid.Collections.Extensions.DictionaryExtensions">
            <summary>
            Extension methods for Dictionary.
            </summary>
        </member>
        <member name="M:Majid.Collections.Extensions.DictionaryExtensions.TryGetValue``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,``0@)">
            <summary>
            This method is used to try to get a value in a dictionary if it does exists.
            </summary>
            <typeparam name="T">Type of the value</typeparam>
            <param name="dictionary">The collection object</param>
            <param name="key">Key</param>
            <param name="value">Value of the key (or default value if key not exists)</param>
            <returns>True if key does exists in the dictionary</returns>
        </member>
        <member name="M:Majid.Collections.Extensions.DictionaryExtensions.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Gets a value from the dictionary with given key. Returns default value if can not find.
            </summary>
            <param name="dictionary">Dictionary to check and get</param>
            <param name="key">Key to find the value</param>
            <typeparam name="TKey">Type of the key</typeparam>
            <typeparam name="TValue">Type of the value</typeparam>
            <returns>Value if found, default if can not found.</returns>
        </member>
        <member name="M:Majid.Collections.Extensions.DictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            Gets a value from the dictionary with given key. Returns default value if can not find.
            </summary>
            <param name="dictionary">Dictionary to check and get</param>
            <param name="key">Key to find the value</param>
            <param name="factory">A factory method used to create the value if not found in the dictionary</param>
            <typeparam name="TKey">Type of the key</typeparam>
            <typeparam name="TValue">Type of the value</typeparam>
            <returns>Value if found, default if can not found.</returns>
        </member>
        <member name="M:Majid.Collections.Extensions.DictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})">
            <summary>
            Gets a value from the dictionary with given key. Returns default value if can not find.
            </summary>
            <param name="dictionary">Dictionary to check and get</param>
            <param name="key">Key to find the value</param>
            <param name="factory">A factory method used to create the value if not found in the dictionary</param>
            <typeparam name="TKey">Type of the key</typeparam>
            <typeparam name="TValue">Type of the value</typeparam>
            <returns>Value if found, default if can not found.</returns>
        </member>
        <member name="T:Majid.Collections.Extensions.EnumerableExtensions">
            <summary> 
            Extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:Majid.Collections.Extensions.EnumerableExtensions.JoinAsString(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Concatenates the members of a constructed <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of type System.String, using the specified separator between each member.
            This is a shortcut for string.Join(...)
            </summary>
            <param name="source">A collection that contains the strings to concatenate.</param>
            <param name="separator">The string to use as a separator. separator is included in the returned string only if values has more than one element.</param>
            <returns>A string that consists of the members of values delimited by the separator string. If values has no members, the method returns System.String.Empty.</returns>
        </member>
        <member name="M:Majid.Collections.Extensions.EnumerableExtensions.JoinAsString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Concatenates the members of a collection, using the specified separator between each member.
            This is a shortcut for string.Join(...)
            </summary>
            <param name="source">A collection that contains the objects to concatenate.</param>
            <param name="separator">The string to use as a separator. separator is included in the returned string only if values has more than one element.</param>
            <typeparam name="T">The type of the members of values.</typeparam>
            <returns>A string that consists of the members of values delimited by the separator string. If values has no members, the method returns System.String.Empty.</returns>
        </member>
        <member name="M:Majid.Collections.Extensions.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Boolean})">
            <summary>
            Filters a <see cref="T:System.Collections.Generic.IEnumerable`1"/> by given predicate if given condition is true.
            </summary>
            <param name="source">Enumerable to apply filtering</param>
            <param name="condition">A boolean value</param>
            <param name="predicate">Predicate to filter the enumerable</param>
            <returns>Filtered or not filtered enumerable based on <paramref name="condition"/></returns>
        </member>
        <member name="M:Majid.Collections.Extensions.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Filters a <see cref="T:System.Collections.Generic.IEnumerable`1"/> by given predicate if given condition is true.
            </summary>
            <param name="source">Enumerable to apply filtering</param>
            <param name="condition">A boolean value</param>
            <param name="predicate">Predicate to filter the enumerable</param>
            <returns>Filtered or not filtered enumerable based on <paramref name="condition"/></returns>
        </member>
        <member name="T:Majid.Collections.Extensions.ListExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="M:Majid.Collections.Extensions.ListExtensions.SortByDependencies``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Sort a list by a topological sorting, which consider their  dependencies
            </summary>
            <typeparam name="T">The type of the members of values.</typeparam>
            <param name="source">A list of objects to sort</param>
            <param name="getDependencies">Function to resolve the dependencies</param>
            <returns></returns>
        </member>
        <member name="M:Majid.Collections.Extensions.ListExtensions.SortByDependenciesVisit``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.List{``0},System.Collections.Generic.Dictionary{``0,System.Boolean})">
            <summary>
            
            </summary>
            <typeparam name="T">The type of the members of values.</typeparam>
            <param name="item">Item to resolve</param>
            <param name="getDependencies">Function to resolve the dependencies</param>
            <param name="sorted">List with the sortet items</param>
            <param name="visited">Dictionary with the visited items</param>
        </member>
        <member name="T:Majid.Collections.ITypeList">
            <summary>
            A shortcut for <see cref="T:Majid.Collections.ITypeList`1"/> to use object as base type.
            </summary>
        </member>
        <member name="T:Majid.Collections.ITypeList`1">
            <summary>
            Extends <see cref="T:System.Collections.Generic.IList`1"/> to add restriction a specific base type.
            </summary>
            <typeparam name="TBaseType">Base Type of <see cref="T:System.Type"/>s in this list</typeparam>
        </member>
        <member name="M:Majid.Collections.ITypeList`1.Add``1">
            <summary>
            Adds a type to list.
            </summary>
            <typeparam name="T">Type</typeparam>
        </member>
        <member name="M:Majid.Collections.ITypeList`1.Contains``1">
            <summary>
            Checks if a type exists in the list.
            </summary>
            <typeparam name="T">Type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Majid.Collections.ITypeList`1.Remove``1">
            <summary>
            Removes a type from list
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Majid.Collections.TypeList">
            <summary>
            A shortcut for <see cref="T:Majid.Collections.TypeList`1"/> to use object as base type.
            </summary>
        </member>
        <member name="T:Majid.Collections.TypeList`1">
            <summary>
            Extends <see cref="T:System.Collections.Generic.List`1"/> to add restriction a specific base type.
            </summary>
            <typeparam name="TBaseType">Base Type of <see cref="T:System.Type"/>s in this list</typeparam>
        </member>
        <member name="P:Majid.Collections.TypeList`1.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Majid.Collections.TypeList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Majid.Collections.TypeList`1.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> at the specified index.
            </summary>
            <param name="index">Index.</param>
        </member>
        <member name="M:Majid.Collections.TypeList`1.#ctor">
            <summary>
            Creates a new <see cref="T:Majid.Collections.TypeList`1"/> object.
            </summary>
        </member>
        <member name="M:Majid.Collections.TypeList`1.Add``1">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Collections.TypeList`1.Add(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Collections.TypeList`1.Insert(System.Int32,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Collections.TypeList`1.IndexOf(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Collections.TypeList`1.Contains``1">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Collections.TypeList`1.Contains(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Collections.TypeList`1.Remove``1">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Collections.TypeList`1.Remove(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Collections.TypeList`1.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Collections.TypeList`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Collections.TypeList`1.CopyTo(System.Type[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Collections.TypeList`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Majid.Configuration.CacheManagerSettingExtensions">
            <summary>
            Extension methods for <see cref="T:Majid.Runtime.Caching.ICacheManager"/> to get setting caches.
            </summary>
        </member>
        <member name="M:Majid.Configuration.CacheManagerSettingExtensions.GetApplicationSettingsCache(Majid.Runtime.Caching.ICacheManager)">
            <summary>
            Gets application settings cache.
            </summary>
        </member>
        <member name="M:Majid.Configuration.CacheManagerSettingExtensions.GetTenantSettingsCache(Majid.Runtime.Caching.ICacheManager)">
            <summary>
            Gets tenant settings cache.
            </summary>
        </member>
        <member name="M:Majid.Configuration.CacheManagerSettingExtensions.GetUserSettingsCache(Majid.Runtime.Caching.ICacheManager)">
            <summary>
            Gets user settings cache.
            </summary>
        </member>
        <member name="T:Majid.Configuration.DefaultConfigSettingStore">
            <summary>
            Implements default behavior for ISettingStore.
            Only <see cref="M:Majid.Configuration.DefaultConfigSettingStore.GetSettingOrNullAsync(System.Nullable{System.Int32},System.Nullable{System.Int64},System.String)"/> method is implemented and it gets setting's value
            from application's configuration file if exists, or returns null if not.
            </summary>
        </member>
        <member name="P:Majid.Configuration.DefaultConfigSettingStore.Instance">
            <summary>
            Gets singleton instance.
            </summary>
        </member>
        <member name="M:Majid.Configuration.DefaultConfigSettingStore.DeleteAsync(Majid.Configuration.SettingInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Configuration.DefaultConfigSettingStore.CreateAsync(Majid.Configuration.SettingInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Configuration.DefaultConfigSettingStore.UpdateAsync(Majid.Configuration.SettingInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Configuration.DefaultConfigSettingStore.GetAllListAsync(System.Nullable{System.Int32},System.Nullable{System.Int64})">
            <inheritdoc/>
        </member>
        <member name="T:Majid.Configuration.DictionaryBasedConfig">
            <summary>
            Used to set/get custom configuration.
            </summary>
        </member>
        <member name="P:Majid.Configuration.DictionaryBasedConfig.CustomSettings">
            <summary>
            Dictionary of custom configuration.
            </summary>
        </member>
        <member name="P:Majid.Configuration.DictionaryBasedConfig.Item(System.String)">
            <summary>
            Gets/sets a config value.
            Returns null if no config with given name.
            </summary>
            <param name="name">Name of the config</param>
            <returns>Value of the config</returns>
        </member>
        <member name="M:Majid.Configuration.DictionaryBasedConfig.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Majid.Configuration.DictionaryBasedConfig.Get``1(System.String)">
            <summary>
            Gets a configuration value as a specific type.
            </summary>
            <param name="name">Name of the config</param>
            <typeparam name="T">Type of the config</typeparam>
            <returns>Value of the configuration or null if not found</returns>
        </member>
        <member name="M:Majid.Configuration.DictionaryBasedConfig.Set``1(System.String,``0)">
            <summary>
            Used to set a string named configuration.
            If there is already a configuration with same <paramref name="name"/>, it's overwritten.
            </summary>
            <param name="name">Unique name of the configuration</param>
            <param name="value">Value of the configuration</param>
        </member>
        <member name="M:Majid.Configuration.DictionaryBasedConfig.Get(System.String)">
            <summary>
            Gets a configuration object with given name.
            </summary>
            <param name="name">Unique name of the configuration</param>
            <returns>Value of the configuration or null if not found</returns>
        </member>
        <member name="M:Majid.Configuration.DictionaryBasedConfig.Get(System.String,System.Object)">
            <summary>
            Gets a configuration object with given name.
            </summary>
            <param name="name">Unique name of the configuration</param>
            <param name="defaultValue">Default value of the object if can not found given configuration</param>
            <returns>Value of the configuration or null if not found</returns>
        </member>
        <member name="M:Majid.Configuration.DictionaryBasedConfig.Get``1(System.String,``0)">
            <summary>
            Gets a configuration object with given name.
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="name">Unique name of the configuration</param>
            <param name="defaultValue">Default value of the object if can not found given configuration</param>
            <returns>Value of the configuration or null if not found</returns>
        </member>
        <member name="M:Majid.Configuration.DictionaryBasedConfig.GetOrCreate``1(System.String,System.Func{``0})">
            <summary>
            Gets a configuration object with given name.
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="name">Unique name of the configuration</param>
            <param name="creator">The function that will be called to create if given configuration is not found</param>
            <returns>Value of the configuration or null if not found</returns>
        </member>
        <member name="T:Majid.Configuration.Startup.IAuthorizationConfiguration">
            <summary>
            Used to configure authorization system.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.IAuthorizationConfiguration.Providers">
            <summary>
            List of authorization providers.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.IAuthorizationConfiguration.IsEnabled">
            <summary>
            Enables/Disables attribute based authentication and authorization.
            Default: true.
            </summary>
        </member>
        <member name="T:Majid.Configuration.Startup.IEventBusConfiguration">
            <summary>
            Used to configure <see cref="T:Majid.Events.Bus.IEventBus"/>.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.IEventBusConfiguration.UseDefaultEventBus">
            <summary>
            True, to use <see cref="P:Majid.Events.Bus.EventBus.Default"/>.
            False, to create per <see cref="T:Majid.Dependency.IIocManager"/>.
            This is generally set to true. But, for unit tests,
            it can be set to false.
            Default: true.
            </summary>
        </member>
        <member name="T:Majid.Configuration.Startup.ILocalizationConfiguration">
            <summary>
            Used for localization configurations.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.ILocalizationConfiguration.Languages">
            <summary>
            Used to set languages available for this application.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.ILocalizationConfiguration.Sources">
            <summary>
            List of localization sources.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.ILocalizationConfiguration.IsEnabled">
            <summary>
            Used to enable/disable localization system.
            Default: true.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.ILocalizationConfiguration.ReturnGivenTextIfNotFound">
            <summary>
            If this is set to true, the given text (name) is returned
            if not found in the localization source. That prevent exceptions if
            given name is not defined in the localization sources.
            Also writes a warning log.
            Default: true.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.ILocalizationConfiguration.WrapGivenTextIfNotFound">
            <summary>
            It returns the given text by wrapping with [ and ] chars
            if not found in the localization source.
            This is considered only if <see cref="P:Majid.Configuration.Startup.ILocalizationConfiguration.ReturnGivenTextIfNotFound"/> is true.
            Default: true.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.ILocalizationConfiguration.HumanizeTextIfNotFound">
            <summary>
            It returns the given text by converting string from 'PascalCase' to a 'Sentense case'
            if not found in the localization source.
            This is considered only if <see cref="P:Majid.Configuration.Startup.ILocalizationConfiguration.ReturnGivenTextIfNotFound"/> is true.
            Default: true.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.ILocalizationConfiguration.LogWarnMessageIfNotFound">
            <summary>
            Write (or not write) a warning log if given text can not found in the localization source.
            Default: true.
            </summary>
        </member>
        <member name="T:Majid.Configuration.Startup.ILocalizationSourceList">
            <summary>
            Defines a specialized list to store <see cref="T:Majid.Localization.Sources.ILocalizationSource"/> object.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.ILocalizationSourceList.Extensions">
            <summary>
            Extensions for dictionay based localization sources.
            </summary>
        </member>
        <member name="T:Majid.Configuration.Startup.IMajidStartupConfiguration">
            <summary>
            Used to configure MAJID and modules on startup.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.IMajidStartupConfiguration.IocManager">
            <summary>
            Gets the IOC manager associated with this configuration.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.IMajidStartupConfiguration.Localization">
            <summary>
            Used to set localization configuration.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.IMajidStartupConfiguration.Navigation">
            <summary>
            Used to configure navigation.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.IMajidStartupConfiguration.EventBus">
            <summary>
            Used to configure <see cref="T:Majid.Events.Bus.IEventBus"/>.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.IMajidStartupConfiguration.Auditing">
            <summary>
            Used to configure auditing.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.IMajidStartupConfiguration.Caching">
            <summary>
            Used to configure caching.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.IMajidStartupConfiguration.MultiTenancy">
            <summary>
            Used to configure multi-tenancy.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.IMajidStartupConfiguration.Authorization">
            <summary>
            Used to configure authorization.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.IMajidStartupConfiguration.Validation">
            <summary>
            Used to configure validation.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.IMajidStartupConfiguration.Settings">
            <summary>
            Used to configure settings.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.IMajidStartupConfiguration.DefaultNameOrConnectionString">
            <summary>
            Gets/sets default connection string used by ORM module.
            It can be name of a connection string in application's config file or can be full connection string.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.IMajidStartupConfiguration.Modules">
            <summary>
            Used to configure modules.
            Modules can write extension methods to <see cref="T:Majid.Configuration.Startup.IModuleConfigurations"/> to add module specific configurations.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.IMajidStartupConfiguration.UnitOfWork">
            <summary>
            Used to configure unit of work defaults.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.IMajidStartupConfiguration.Features">
            <summary>
            Used to configure features.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.IMajidStartupConfiguration.BackgroundJobs">
            <summary>
            Used to configure background job system.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.IMajidStartupConfiguration.Notifications">
            <summary>
            Used to configure notification system.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.IMajidStartupConfiguration.EmbeddedResources">
            <summary>
            Used to configure embedded resources.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.IMajidStartupConfiguration.EntityHistory">
            <summary>
            Used to configure entity history.
            </summary>
        </member>
        <member name="M:Majid.Configuration.Startup.IMajidStartupConfiguration.ReplaceService(System.Type,System.Action)">
            <summary>
            Used to replace a service type.
            Given <see cref="!:replaceAction"/> should register an implementation for the <see cref="!:type"/>.
            </summary>
            <param name="type">The type to be replaced.</param>
            <param name="replaceAction">Replace action.</param>
        </member>
        <member name="M:Majid.Configuration.Startup.IMajidStartupConfiguration.Get``1">
            <summary>
            Gets a configuration object.
            </summary>
        </member>
        <member name="T:Majid.Configuration.Startup.IModuleConfigurations">
            <summary>
            Used to provide a way to configure modules.
            Create entension methods to this class to be used over <see cref="P:Majid.Configuration.Startup.IMajidStartupConfiguration.Modules"/> object.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.IModuleConfigurations.MajidConfiguration">
            <summary>
            Gets the MAJID configuration object.
            </summary>
        </member>
        <member name="T:Majid.Configuration.Startup.IMultiTenancyConfig">
            <summary>
            Used to configure multi-tenancy.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.IMultiTenancyConfig.IsEnabled">
            <summary>
            Is multi-tenancy enabled?
            Default value: false.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.IMultiTenancyConfig.Resolvers">
            <summary>
            A list of contributors for tenant resolve process.
            </summary>
        </member>
        <member name="T:Majid.Configuration.Startup.INavigationConfiguration">
            <summary>
            Used to configure navigation.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.INavigationConfiguration.Providers">
            <summary>
            List of navigation providers.
            </summary>
        </member>
        <member name="T:Majid.Configuration.Startup.ISettingsConfiguration">
            <summary>
            Used to configure setting system.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.ISettingsConfiguration.Providers">
            <summary>
            List of settings providers.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.IValidationConfiguration.Validators">
            <summary>
            A list of method parameter validators.
            </summary>
        </member>
        <member name="T:Majid.Configuration.Startup.LocalizationConfiguration">
            <summary>
            Used for localization configurations.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.LocalizationConfiguration.Languages">
            <inheritdoc/>
        </member>
        <member name="P:Majid.Configuration.Startup.LocalizationConfiguration.Sources">
            <inheritdoc/>
        </member>
        <member name="P:Majid.Configuration.Startup.LocalizationConfiguration.IsEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Majid.Configuration.Startup.LocalizationConfiguration.ReturnGivenTextIfNotFound">
            <inheritdoc/>
        </member>
        <member name="P:Majid.Configuration.Startup.LocalizationConfiguration.WrapGivenTextIfNotFound">
            <inheritdoc/>
        </member>
        <member name="P:Majid.Configuration.Startup.LocalizationConfiguration.HumanizeTextIfNotFound">
            <inheritdoc/>
        </member>
        <member name="T:Majid.Configuration.Startup.LocalizationSourceList">
            <summary>
            A specialized list to store <see cref="T:Majid.Localization.Sources.ILocalizationSource"/> object.
            </summary>
        </member>
        <member name="M:Majid.Configuration.Startup.LocalizationSourceList.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Majid.Configuration.Startup.MajidStartupConfiguration">
            <summary>
            This class is used to configure MAJID and modules on startup.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.MajidStartupConfiguration.IocManager">
            <summary>
            Reference to the IocManager.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.MajidStartupConfiguration.Localization">
            <summary>
            Used to set localization configuration.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.MajidStartupConfiguration.Authorization">
            <summary>
            Used to configure authorization.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.MajidStartupConfiguration.Validation">
            <summary>
            Used to configure validation.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.MajidStartupConfiguration.Settings">
            <summary>
            Used to configure settings.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.MajidStartupConfiguration.DefaultNameOrConnectionString">
            <summary>
            Gets/sets default connection string used by ORM module.
            It can be name of a connection string in application's config file or can be full connection string.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.MajidStartupConfiguration.Modules">
            <summary>
            Used to configure modules.
            Modules can write extension methods to <see cref="T:Majid.Configuration.Startup.ModuleConfigurations"/> to add module specific configurations.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.MajidStartupConfiguration.UnitOfWork">
            <summary>
            Used to configure unit of work defaults.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.MajidStartupConfiguration.Features">
            <summary>
            Used to configure features.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.MajidStartupConfiguration.BackgroundJobs">
            <summary>
            Used to configure background job system.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.MajidStartupConfiguration.Notifications">
            <summary>
            Used to configure notification system.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.MajidStartupConfiguration.Navigation">
            <summary>
            Used to configure navigation.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.MajidStartupConfiguration.EventBus">
            <summary>
            Used to configure <see cref="T:Majid.Events.Bus.IEventBus"/>.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.MajidStartupConfiguration.Auditing">
            <summary>
            Used to configure auditing.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.MajidStartupConfiguration.MultiTenancy">
            <summary>
            Used to configure multi-tenancy.
            </summary>
        </member>
        <member name="M:Majid.Configuration.Startup.MajidStartupConfiguration.#ctor(Majid.Dependency.IIocManager)">
            <summary>
            Private constructor for singleton pattern.
            </summary>
        </member>
        <member name="T:Majid.Configuration.Startup.MajidStartupConfigurationExtensions">
            <summary>
            Extension methods for <see cref="T:Majid.Configuration.Startup.IMajidStartupConfiguration"/>.
            </summary>
        </member>
        <member name="M:Majid.Configuration.Startup.MajidStartupConfigurationExtensions.ReplaceService(Majid.Configuration.Startup.IMajidStartupConfiguration,System.Type,System.Type,Majid.Dependency.DependencyLifeStyle)">
            <summary>
            Used to replace a service type.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="type">Type.</param>
            <param name="impl">Implementation.</param>
            <param name="lifeStyle">Life style.</param>
        </member>
        <member name="M:Majid.Configuration.Startup.MajidStartupConfigurationExtensions.ReplaceService``2(Majid.Configuration.Startup.IMajidStartupConfiguration,Majid.Dependency.DependencyLifeStyle)">
            <summary>
            Used to replace a service type.
            </summary>
            <typeparam name="TType">Type of the service.</typeparam>
            <typeparam name="TImpl">Type of the implementation.</typeparam>
            <param name="configuration">The configuration.</param>
            <param name="lifeStyle">Life style.</param>
        </member>
        <member name="M:Majid.Configuration.Startup.MajidStartupConfigurationExtensions.ReplaceService``1(Majid.Configuration.Startup.IMajidStartupConfiguration,System.Action)">
            <summary>
            Used to replace a service type.
            </summary>
            <typeparam name="TType">Type of the service.</typeparam>
            <param name="configuration">The configuration.</param>
            <param name="replaceAction">Replace action.</param>
        </member>
        <member name="T:Majid.Configuration.Startup.MultiTenancyConfig">
            <summary>
            Used to configure multi-tenancy.
            </summary>
        </member>
        <member name="P:Majid.Configuration.Startup.MultiTenancyConfig.IsEnabled">
            <summary>
            Is multi-tenancy enabled?
            Default value: false.
            </summary>
        </member>
        <member name="T:Majid.Configuration.IDictionaryBasedConfig">
            <summary>
            Defines interface to use a dictionary to make configurations.
            </summary>
        </member>
        <member name="M:Majid.Configuration.IDictionaryBasedConfig.Set``1(System.String,``0)">
            <summary>
            Used to set a string named configuration.
            If there is already a configuration with same <paramref name="name"/>, it's overwritten.
            </summary>
            <param name="name">Unique name of the configuration</param>
            <param name="value">Value of the configuration</param>
            <returns>Returns the passed <paramref name="value"/></returns>
        </member>
        <member name="M:Majid.Configuration.IDictionaryBasedConfig.Get(System.String)">
            <summary>
            Gets a configuration object with given name.
            </summary>
            <param name="name">Unique name of the configuration</param>
            <returns>Value of the configuration or null if not found</returns>
        </member>
        <member name="M:Majid.Configuration.IDictionaryBasedConfig.Get``1(System.String)">
            <summary>
            Gets a configuration object with given name.
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="name">Unique name of the configuration</param>
            <returns>Value of the configuration or null if not found</returns>
        </member>
        <member name="M:Majid.Configuration.IDictionaryBasedConfig.Get(System.String,System.Object)">
            <summary>
            Gets a configuration object with given name.
            </summary>
            <param name="name">Unique name of the configuration</param>
            <param name="defaultValue">Default value of the object if can not found given configuration</param>
            <returns>Value of the configuration or null if not found</returns>
        </member>
        <member name="M:Majid.Configuration.IDictionaryBasedConfig.Get``1(System.String,``0)">
            <summary>
            Gets a configuration object with given name.
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="name">Unique name of the configuration</param>
            <param name="defaultValue">Default value of the object if can not found given configuration</param>
            <returns>Value of the configuration or null if not found</returns>
        </member>
        <member name="M:Majid.Configuration.IDictionaryBasedConfig.GetOrCreate``1(System.String,System.Func{``0})">
            <summary>
            Gets a configuration object with given name.
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="name">Unique name of the configuration</param>
            <param name="creator">The function that will be called to create if given configuration is not found</param>
            <returns>Value of the configuration or null if not found</returns>
        </member>
        <member name="T:Majid.Configuration.ISettingDefinitionManager">
            <summary>
            Defines setting definition manager.
            </summary>
        </member>
        <member name="M:Majid.Configuration.ISettingDefinitionManager.GetSettingDefinition(System.String)">
            <summary>
            Gets the <see cref="T:Majid.Configuration.SettingDefinition"/> object with given unique name.
            Throws exception if can not find the setting.
            </summary>
            <param name="name">Unique name of the setting</param>
            <returns>The <see cref="T:Majid.Configuration.SettingDefinition"/> object.</returns>
        </member>
        <member name="M:Majid.Configuration.ISettingDefinitionManager.GetAllSettingDefinitions">
            <summary>
            Gets a list of all setting definitions.
            </summary>
            <returns>All settings.</returns>
        </member>
        <member name="T:Majid.Configuration.ISettingManager">
            <summary>
            This is the main interface that must be implemented to be able to load/change values of settings.
            </summary>
        </member>
        <member name="M:Majid.Configuration.ISettingManager.GetSettingValueAsync(System.String)">
            <summary>
            Gets current value of a setting.
            It gets the setting value, overwritten by application, current tenant and current user if exists.
            </summary>
            <param name="name">Unique name of the setting</param>
            <returns>Current value of the setting</returns>
        </member>
        <member name="M:Majid.Configuration.ISettingManager.GetSettingValueForApplicationAsync(System.String)">
            <summary>
            Gets current value of a setting for the application level.
            </summary>
            <param name="name">Unique name of the setting</param>
            <returns>Current value of the setting for the application</returns>
        </member>
        <member name="M:Majid.Configuration.ISettingManager.GetSettingValueForApplicationAsync(System.String,System.Boolean)">
            <summary>
            Gets current value of a setting for the application level.
            If fallbackToDefault is false, it just gets value from application and returns null if application has not defined a value for the setting.
            </summary>
            <param name="name">Unique name of the setting</param>
            <param name="fallbackToDefault"></param>
            <returns>Current value of the setting for the application</returns>
        </member>
        <member name="M:Majid.Configuration.ISettingManager.GetSettingValueForTenantAsync(System.String,System.Int32)">
            <summary>
            Gets current value of a setting for a tenant level.
            It gets the setting value, overwritten by given tenant.
            </summary>
            <param name="name">Unique name of the setting</param>
            <param name="tenantId">Tenant id</param>
            <returns>Current value of the setting</returns>
        </member>
        <member name="M:Majid.Configuration.ISettingManager.GetSettingValueForTenantAsync(System.String,System.Int32,System.Boolean)">
            <summary>
            Gets current value of a setting for a tenant level.
            It gets the setting value, overwritten by given tenant if fallbackToDefault is true.
            If fallbackToDefault is false, it just gets value from tenant and returns null if tenant has not defined a value for the setting.
            </summary>
            <param name="name">Unique name of the setting</param>
            <param name="tenantId">Tenant id</param>
            <param name="fallbackToDefault"></param>
            <returns>Current value of the setting</returns>
        </member>
        <member name="M:Majid.Configuration.ISettingManager.GetSettingValueForUserAsync(System.String,System.Nullable{System.Int32},System.Int64)">
            <summary>
            Gets current value of a setting for a user level.
            It gets the setting value, overwritten by given tenant and user.
            </summary>
            <param name="name">Unique name of the setting</param>
            <param name="tenantId">Tenant id</param>
            <param name="userId">User id</param>
            <returns>Current value of the setting for the user</returns>
        </member>
        <member name="M:Majid.Configuration.ISettingManager.GetSettingValueForUserAsync(System.String,System.Nullable{System.Int32},System.Int64,System.Boolean)">
            <summary>
            Gets current value of a setting for a user level.
            It gets the setting value, overwritten by given tenant and user if fallbackToDefault is true.
            If fallbackToDefault is false, it just gets value from user and returns null if user has not defined a value for the setting.
            </summary>
            <param name="name">Unique name of the setting</param>
            <param name="tenantId">Tenant id</param>
            <param name="userId">User id</param>
            <param name="fallbackToDefault"></param>
            <returns>Current value of the setting for the user</returns>
        </member>
        <member name="M:Majid.Configuration.ISettingManager.GetSettingValueForUserAsync(System.String,Majid.UserIdentifier)">
            <summary>
            Gets current value of a setting for a user level.
            It gets the setting value, overwritten by given tenant and user.
            </summary>
            <param name="name">Unique name of the setting</param>
            <param name="user">User</param>
            <returns>Current value of the setting for the user</returns>
        </member>
        <member name="M:Majid.Configuration.ISettingManager.GetAllSettingValuesAsync">
            <summary>
            Gets current values of all settings.
            It gets all setting values, overwritten by application, current tenant (if exists) and the current user (if exists).
            </summary>
            <returns>List of setting values</returns>
        </member>
        <member name="M:Majid.Configuration.ISettingManager.GetAllSettingValuesAsync(Majid.Configuration.SettingScopes)">
            <summary>
            Gets current values of all settings.
            It gets default values of all settings then overwrites by given scopes.
            </summary>
            <param name="scopes">One or more scope to overwrite</param>
            <returns>List of setting values</returns>
        </member>
        <member name="M:Majid.Configuration.ISettingManager.GetAllSettingValuesForApplicationAsync">
            <summary>
            Gets a list of all setting values specified for the application.
            It returns only settings those are explicitly set for the application.
            If a setting's default value is used, it's not included the result list.
            If you want to get current values of all settings, use <see cref="M:Majid.Configuration.ISettingManager.GetAllSettingValuesAsync"/> method.
            </summary>
            <returns>List of setting values</returns>
        </member>
        <member name="M:Majid.Configuration.ISettingManager.GetAllSettingValuesForTenantAsync(System.Int32)">
            <summary>
            Gets a list of all setting values specified for a tenant.
            It returns only settings those are explicitly set for the tenant.
            If a setting's default value is used, it's not included the result list.
            If you want to get current values of all settings, use <see cref="M:Majid.Configuration.ISettingManager.GetAllSettingValuesAsync"/> method.
            </summary>
            <param name="tenantId">Tenant to get settings</param>
            <returns>List of setting values</returns>
        </member>
        <member name="M:Majid.Configuration.ISettingManager.GetAllSettingValuesForUserAsync(Majid.UserIdentifier)">
            <summary>
            Gets a list of all setting values specified for a user.
            It returns only settings those are explicitly set for the user.
            If a setting's value is not set for the user (for example if user uses the default value), it's not included the result list.
            If you want to get current values of all settings, use <see cref="M:Majid.Configuration.ISettingManager.GetAllSettingValuesAsync"/> method.
            </summary>
            <param name="user">User to get settings</param>
            <returns>All settings of the user</returns>
        </member>
        <member name="M:Majid.Configuration.ISettingManager.ChangeSettingForApplicationAsync(System.String,System.String)">
            <summary>
            Changes setting for the application level.
            </summary>
            <param name="name">Unique name of the setting</param>
            <param name="value">Value of the setting</param>
        </member>
        <member name="M:Majid.Configuration.ISettingManager.ChangeSettingForTenantAsync(System.Int32,System.String,System.String)">
            <summary>
            Changes setting for a Tenant.
            </summary>
            <param name="tenantId">TenantId</param>
            <param name="name">Unique name of the setting</param>
            <param name="value">Value of the setting</param>
        </member>
        <member name="M:Majid.Configuration.ISettingManager.ChangeSettingForUserAsync(Majid.UserIdentifier,System.String,System.String)">
            <summary>
            Changes setting for a user.
            </summary>
            <param name="user">UserId</param>
            <param name="name">Unique name of the setting</param>
            <param name="value">Value of the setting</param>
        </member>
        <member name="T:Majid.Configuration.ISettingStore">
            <summary>
            This interface is used to get/set settings from/to a data source (database).
            </summary>
        </member>
        <member name="M:Majid.Configuration.ISettingStore.GetSettingOrNullAsync(System.Nullable{System.Int32},System.Nullable{System.Int64},System.String)">
            <summary>
            Gets a setting or null.
            </summary>
            <param name="tenantId">TenantId or null</param>
            <param name="userId">UserId or null</param>
            <param name="name">Name of the setting</param>
            <returns>Setting object</returns>
        </member>
        <member name="M:Majid.Configuration.ISettingStore.DeleteAsync(Majid.Configuration.SettingInfo)">
            <summary>
            Deletes a setting.
            </summary>
            <param name="setting">Setting to be deleted</param>
        </member>
        <member name="M:Majid.Configuration.ISettingStore.CreateAsync(Majid.Configuration.SettingInfo)">
            <summary>
            Adds a setting.
            </summary>
            <param name="setting">Setting to add</param>
        </member>
        <member name="M:Majid.Configuration.ISettingStore.UpdateAsync(Majid.Configuration.SettingInfo)">
            <summary>
            Update a setting.
            </summary>
            <param name="setting">Setting to add</param>
        </member>
        <member name="M:Majid.Configuration.ISettingStore.GetAllListAsync(System.Nullable{System.Int32},System.Nullable{System.Int64})">
            <summary>
            Gets a list of setting.
            </summary>
            <param name="tenantId">TenantId or null</param>
            <param name="userId">UserId or null</param>
            <returns>List of settings</returns>
        </member>
        <member name="T:Majid.Configuration.ISettingValue">
            <summary>
            Represents value of a setting.
            </summary>
        </member>
        <member name="P:Majid.Configuration.ISettingValue.Name">
            <summary>
            Unique name of the setting.
            </summary>
        </member>
        <member name="P:Majid.Configuration.ISettingValue.Value">
            <summary>
            Value of the setting.
            </summary>
        </member>
        <member name="T:Majid.Configuration.SettingDefinition">
            <summary>
            Defines a setting.
            A setting is used to configure and change behavior of the application.
            </summary>
        </member>
        <member name="P:Majid.Configuration.SettingDefinition.Name">
            <summary>
            Unique name of the setting.
            </summary>
        </member>
        <member name="P:Majid.Configuration.SettingDefinition.DisplayName">
            <summary>
            Display name of the setting.
            This can be used to show setting to the user.
            </summary>
        </member>
        <member name="P:Majid.Configuration.SettingDefinition.Description">
            <summary>
            A brief description for this setting.
            </summary>
        </member>
        <member name="P:Majid.Configuration.SettingDefinition.Scopes">
            <summary>
            Scopes of this setting.
            Default value: <see cref="F:Majid.Configuration.SettingScopes.Application"/>.
            </summary>
        </member>
        <member name="P:Majid.Configuration.SettingDefinition.IsInherited">
            <summary>
            Is this setting inherited from parent scopes.
            Default: True.
            </summary>
        </member>
        <member name="P:Majid.Configuration.SettingDefinition.Group">
            <summary>
            Gets/sets group for this setting.
            </summary>
        </member>
        <member name="P:Majid.Configuration.SettingDefinition.DefaultValue">
            <summary>
            Default value of the setting.
            </summary>
        </member>
        <member name="P:Majid.Configuration.SettingDefinition.IsVisibleToClients">
            <summary>
            Can clients see this setting and it's value.
            It maybe dangerous for some settings to be visible to clients (such as email server password).
            Default: false.
            </summary>
        </member>
        <member name="P:Majid.Configuration.SettingDefinition.ClientVisibilityProvider">
            <summary>
            Client visibility definition for the setting.
            </summary>
        </member>
        <member name="P:Majid.Configuration.SettingDefinition.CustomData">
            <summary>
            Can be used to store a custom object related to this setting.
            </summary>
        </member>
        <member name="M:Majid.Configuration.SettingDefinition.#ctor(System.String,System.String,Majid.Localization.ILocalizableString,Majid.Configuration.SettingDefinitionGroup,Majid.Localization.ILocalizableString,Majid.Configuration.SettingScopes,System.Boolean,System.Boolean,System.Object,Majid.Configuration.ISettingClientVisibilityProvider)">
            <summary>
            Creates a new <see cref="T:Majid.Configuration.SettingDefinition"/> object.
            </summary>
            <param name="name">Unique name of the setting</param>
            <param name="defaultValue">Default value of the setting</param>
            <param name="displayName">Display name of the permission</param>
            <param name="group">Group of this setting</param>
            <param name="description">A brief description for this setting</param>
            <param name="scopes">Scopes of this setting. Default value: <see cref="F:Majid.Configuration.SettingScopes.Application"/>.</param>
            <param name="isVisibleToClients">Can clients see this setting and it's value. Default: false</param>
            <param name="isInherited">Is this setting inherited from parent scopes. Default: True.</param>
            <param name="customData">Can be used to store a custom object related to this setting</param>
            <param name="clientVisibilityProvider">Client visibility definition for the setting. Default: invisible</param>
        </member>
        <member name="T:Majid.Configuration.SettingDefinitionGroup">
            <summary>
            A setting group is used to group some settings togehter.
            A group can be child of another group and can have child groups.
            </summary>
        </member>
        <member name="P:Majid.Configuration.SettingDefinitionGroup.Name">
            <summary>
            Unique name of the setting group.
            </summary>
        </member>
        <member name="P:Majid.Configuration.SettingDefinitionGroup.DisplayName">
            <summary>
            Display name of the setting.
            This can be used to show setting to the user.
            </summary>
        </member>
        <member name="P:Majid.Configuration.SettingDefinitionGroup.Parent">
            <summary>
            Gets parent of this group.
            </summary>
        </member>
        <member name="P:Majid.Configuration.SettingDefinitionGroup.Children">
            <summary>
            Gets a list of all children of this group.
            </summary>
        </member>
        <member name="M:Majid.Configuration.SettingDefinitionGroup.#ctor(System.String,Majid.Localization.ILocalizableString)">
            <summary>
            Creates a new <see cref="T:Majid.Configuration.SettingDefinitionGroup"/> object.
            </summary>
            <param name="name">Unique name of the setting group</param>
            <param name="displayName">Display name of the setting</param>
        </member>
        <member name="M:Majid.Configuration.SettingDefinitionGroup.AddChild(Majid.Configuration.SettingDefinitionGroup)">
            <summary>
            Adds a <see cref="T:Majid.Configuration.SettingDefinitionGroup"/> as child of this group.
            </summary>
            <param name="child">Child to be added</param>
            <returns>This child group to be able to add more child</returns>
        </member>
        <member name="T:Majid.Configuration.SettingDefinitionManager">
            <summary>
            Implements <see cref="T:Majid.Configuration.ISettingDefinitionManager"/>.
            </summary>
        </member>
        <member name="M:Majid.Configuration.SettingDefinitionManager.#ctor(Majid.Dependency.IIocManager,Majid.Configuration.Startup.ISettingsConfiguration)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Majid.Configuration.SettingDefinitionProviderContext">
            <summary>
            The context that is used in setting providers.
            </summary>
        </member>
        <member name="T:Majid.Configuration.SettingInfo">
            <summary>
            Represents a setting information.
            </summary>
        </member>
        <member name="P:Majid.Configuration.SettingInfo.TenantId">
            <summary>
            TenantId for this setting.
            TenantId is null if this setting is not Tenant level.
            </summary>
        </member>
        <member name="P:Majid.Configuration.SettingInfo.UserId">
            <summary>
            UserId for this setting.
            UserId is null if this setting is not user level.
            </summary>
        </member>
        <member name="P:Majid.Configuration.SettingInfo.Name">
            <summary>
            Unique name of the setting.
            </summary>
        </member>
        <member name="P:Majid.Configuration.SettingInfo.Value">
            <summary>
            Value of the setting.
            </summary>
        </member>
        <member name="M:Majid.Configuration.SettingInfo.#ctor">
            <summary>
            Creates a new <see cref="T:Majid.Configuration.SettingInfo"/> object.
            </summary>
        </member>
        <member name="M:Majid.Configuration.SettingInfo.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int64},System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Majid.Configuration.SettingInfo"/> object.
            </summary>
            <param name="tenantId">TenantId for this setting. TenantId is null if this setting is not Tenant level.</param>
            <param name="userId">UserId for this setting. UserId is null if this setting is not user level.</param>
            <param name="name">Unique name of the setting</param>
            <param name="value">Value of the setting</param>
        </member>
        <member name="T:Majid.Configuration.SettingManager">
            <summary>
            This class implements <see cref="T:Majid.Configuration.ISettingManager"/> to manage setting values in the database.
            </summary>
        </member>
        <member name="P:Majid.Configuration.SettingManager.MajidSession">
            <summary>
            Reference to the current Session.
            </summary>
        </member>
        <member name="P:Majid.Configuration.SettingManager.SettingStore">
            <summary>
            Reference to the setting store.
            </summary>
        </member>
        <member name="M:Majid.Configuration.SettingManager.#ctor(Majid.Configuration.ISettingDefinitionManager,Majid.Runtime.Caching.ICacheManager)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Configuration.SettingManager.GetSettingValueAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Configuration.SettingManager.GetAllSettingValuesAsync(Majid.Configuration.SettingScopes)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Configuration.SettingManager.GetAllSettingValuesForApplicationAsync">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Configuration.SettingManager.GetAllSettingValuesForTenantAsync(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Configuration.SettingManager.GetAllSettingValuesForUserAsync(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Configuration.SettingManager.ChangeSettingForApplicationAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Configuration.SettingManager.ChangeSettingForTenantAsync(System.Int32,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Configuration.SettingManager.ChangeSettingForUserAsync(System.Int64,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Majid.Configuration.SettingManagerExtensions">
            <summary>
            Extension methods for <see cref="T:Majid.Configuration.ISettingManager"/>.
            </summary>
        </member>
        <member name="M:Majid.Configuration.SettingManagerExtensions.GetSettingValueAsync``1(Majid.Configuration.ISettingManager,System.String)">
            <summary>
            Gets value of a setting in given type (<see cref="!:T"/>).
            </summary>
            <typeparam name="T">Type of the setting to get</typeparam>
            <param name="settingManager">Setting manager</param>
            <param name="name">Unique name of the setting</param>
            <returns>Value of the setting</returns>
        </member>
        <member name="M:Majid.Configuration.SettingManagerExtensions.GetSettingValueForApplicationAsync``1(Majid.Configuration.ISettingManager,System.String)">
            <summary>
            Gets current value of a setting for the application level.
            </summary>
            <param name="settingManager">Setting manager</param>
            <param name="name">Unique name of the setting</param>
            <returns>Current value of the setting for the application</returns>
        </member>
        <member name="M:Majid.Configuration.SettingManagerExtensions.GetSettingValueForTenantAsync``1(Majid.Configuration.ISettingManager,System.String,System.Int32)">
            <summary>
            Gets current value of a setting for a tenant level.
            It gets the setting value, overwritten by given tenant.
            </summary>
            <param name="settingManager">Setting manager</param>
            <param name="name">Unique name of the setting</param>
            <param name="tenantId">Tenant id</param>
            <returns>Current value of the setting</returns>
        </member>
        <member name="M:Majid.Configuration.SettingManagerExtensions.GetSettingValueForUserAsync``1(Majid.Configuration.ISettingManager,System.String,System.Nullable{System.Int32},System.Int64)">
            <summary>
            Gets current value of a setting for a user level.
            It gets the setting value, overwritten by given tenant and user.
            </summary>
            <param name="settingManager">Setting manager</param>
            <param name="name">Unique name of the setting</param>
            <param name="tenantId">Tenant id</param>
            <param name="userId">User id</param>
            <returns>Current value of the setting for the user</returns>
        </member>
        <member name="M:Majid.Configuration.SettingManagerExtensions.GetSettingValueForUserAsync``1(Majid.Configuration.ISettingManager,System.String,Majid.UserIdentifier)">
            <summary>
            Gets current value of a setting for a user level.
            It gets the setting value, overwritten by given tenant and user.
            </summary>
            <param name="settingManager">Setting manager</param>
            <param name="name">Unique name of the setting</param>
            <param name="user">User</param>
            <returns>Current value of the setting for the user</returns>
        </member>
        <member name="M:Majid.Configuration.SettingManagerExtensions.GetSettingValue(Majid.Configuration.ISettingManager,System.String)">
            <summary>
            Gets current value of a setting.
            It gets the setting value, overwritten by application and the current user if exists.
            </summary>
            <param name="settingManager">Setting manager</param>
            <param name="name">Unique name of the setting</param>
            <returns>Current value of the setting</returns>
        </member>
        <member name="M:Majid.Configuration.SettingManagerExtensions.GetSettingValueForApplication(Majid.Configuration.ISettingManager,System.String)">
            <summary>
            Gets current value of a setting for the application level.
            </summary>
            <param name="settingManager">Setting manager</param>
            <param name="name">Unique name of the setting</param>
            <returns>Current value of the setting for the application</returns>
        </member>
        <member name="M:Majid.Configuration.SettingManagerExtensions.GetSettingValueForTenant(Majid.Configuration.ISettingManager,System.String,System.Int32)">
            <summary>
            Gets current value of a setting for a tenant level.
            It gets the setting value, overwritten by given tenant.
            </summary>
            <param name="settingManager">Setting manager</param>
            <param name="name">Unique name of the setting</param>
            <param name="tenantId">Tenant id</param>
            <returns>Current value of the setting</returns>
        </member>
        <member name="M:Majid.Configuration.SettingManagerExtensions.GetSettingValueForUser(Majid.Configuration.ISettingManager,System.String,System.Nullable{System.Int32},System.Int64)">
            <summary>
            Gets current value of a setting for a user level.
            It gets the setting value, overwritten by given tenant and user.
            </summary>
            <param name="settingManager">Setting manager</param>
            <param name="name">Unique name of the setting</param>
            <param name="tenantId">Tenant id</param>
            <param name="userId">User id</param>
            <returns>Current value of the setting for the user</returns>
        </member>
        <member name="M:Majid.Configuration.SettingManagerExtensions.GetSettingValueForUser(Majid.Configuration.ISettingManager,System.String,System.Nullable{System.Int32},System.Int64,System.Boolean)">
            <summary>
            Gets current value of a setting for a user level.
            It gets the setting value, overwritten by given tenant and user.
            </summary>
            <param name="settingManager">Setting manager</param>
            <param name="name">Unique name of the setting</param>
            <param name="tenantId">Tenant id</param>
            <param name="userId">User id</param>
            <param name="fallbackToDefault"></param>
            <returns>Current value of the setting for the user</returns>
        </member>
        <member name="M:Majid.Configuration.SettingManagerExtensions.GetSettingValue``1(Majid.Configuration.ISettingManager,System.String)">
            <summary>
            Gets value of a setting.
            </summary>
            <typeparam name="T">Type of the setting to get</typeparam>
            <param name="settingManager">Setting manager</param>
            <param name="name">Unique name of the setting</param>
            <returns>Value of the setting</returns>
        </member>
        <member name="M:Majid.Configuration.SettingManagerExtensions.GetSettingValueForApplication``1(Majid.Configuration.ISettingManager,System.String)">
            <summary>
            Gets current value of a setting for the application level.
            </summary>
            <typeparam name="T">Type of the setting to get</typeparam>
            <param name="settingManager">Setting manager</param>
            <param name="name">Unique name of the setting</param>
            <returns>Current value of the setting for the application</returns>
        </member>
        <member name="M:Majid.Configuration.SettingManagerExtensions.GetSettingValueForTenant``1(Majid.Configuration.ISettingManager,System.String,System.Int32)">
            <summary>
            Gets current value of a setting for a tenant level.
            It gets the setting value, overwritten by given tenant.
            </summary>
            <typeparam name="T">Type of the setting to get</typeparam>
            <param name="settingManager">Setting manager</param>
            <param name="name">Unique name of the setting</param>
            <param name="tenantId">Tenant id</param>
            <returns>Current value of the setting</returns>
        </member>
        <member name="M:Majid.Configuration.SettingManagerExtensions.GetSettingValueForUser``1(Majid.Configuration.ISettingManager,System.String,System.Nullable{System.Int32},System.Int64)">
            <summary>
            Gets current value of a setting for a user level.
            It gets the setting value, overwritten by given tenant and user.
            </summary>
            <typeparam name="T">Type of the setting to get</typeparam>
            <param name="settingManager">Setting manager</param>
            <param name="name">Unique name of the setting</param>
            <param name="tenantId">Tenant id</param>
            <param name="userId">User id</param>
            <returns>Current value of the setting for the user</returns>
        </member>
        <member name="M:Majid.Configuration.SettingManagerExtensions.GetSettingValueForUser``1(Majid.Configuration.ISettingManager,System.String,Majid.UserIdentifier)">
            <summary>
            Gets current value of a setting for a user level.
            It gets the setting value, overwritten by given tenant and user.
            </summary>
            <typeparam name="T">Type of the setting to get</typeparam>
            <param name="settingManager">Setting manager</param>
            <param name="name">Unique name of the setting</param>
            <param name="user">User</param>
            <returns>Current value of the setting for the user</returns>
        </member>
        <member name="M:Majid.Configuration.SettingManagerExtensions.GetAllSettingValues(Majid.Configuration.ISettingManager)">
            <summary>
            Gets current values of all settings.
            It gets all setting values, overwritten by application and the current user if exists.
            </summary>
            <param name="settingManager">Setting manager</param>
            <returns>List of setting values</returns>
        </member>
        <member name="M:Majid.Configuration.SettingManagerExtensions.GetAllSettingValuesForApplication(Majid.Configuration.ISettingManager)">
            <summary>
            Gets a list of all setting values specified for the application.
            It returns only settings those are explicitly set for the application.
            If a setting's default value is used, it's not included the result list.
            If you want to get current values of all settings, use <see cref="M:Majid.Configuration.SettingManagerExtensions.GetAllSettingValues(Majid.Configuration.ISettingManager)"/> method.
            </summary>
            <param name="settingManager">Setting manager</param>
            <returns>List of setting values</returns>
        </member>
        <member name="M:Majid.Configuration.SettingManagerExtensions.GetAllSettingValuesForTenant(Majid.Configuration.ISettingManager,System.Int32)">
            <summary>
            Gets a list of all setting values specified for a tenant.
            It returns only settings those are explicitly set for the tenant.
            If a setting's default value is used, it's not included the result list.
            If you want to get current values of all settings, use <see cref="M:Majid.Configuration.SettingManagerExtensions.GetAllSettingValues(Majid.Configuration.ISettingManager)"/> method.
            </summary>
            <param name="settingManager">Setting manager</param>
            <param name="tenantId">Tenant to get settings</param>
            <returns>List of setting values</returns>
        </member>
        <member name="M:Majid.Configuration.SettingManagerExtensions.GetAllSettingValuesForUser(Majid.Configuration.ISettingManager,Majid.UserIdentifier)">
            <summary>
            Gets a list of all setting values specified for a user.
            It returns only settings those are explicitly set for the user.
            If a setting's value is not set for the user (for example if user uses the default value), it's not included the result list.
            If you want to get current values of all settings, use <see cref="M:Majid.Configuration.SettingManagerExtensions.GetAllSettingValues(Majid.Configuration.ISettingManager)"/> method.
            </summary>
            <param name="settingManager">Setting manager</param>
            <param name="user">User to get settings</param>
            <returns>All settings of the user</returns>
        </member>
        <member name="M:Majid.Configuration.SettingManagerExtensions.ChangeSettingForApplication(Majid.Configuration.ISettingManager,System.String,System.String)">
            <summary>
            Changes setting for the application level.
            </summary>
            <param name="settingManager">Setting manager</param>
            <param name="name">Unique name of the setting</param>
            <param name="value">Value of the setting</param>
        </member>
        <member name="M:Majid.Configuration.SettingManagerExtensions.ChangeSettingForTenant(Majid.Configuration.ISettingManager,System.Int32,System.String,System.String)">
            <summary>
            Changes setting for a Tenant.
            </summary>
            <param name="settingManager">Setting manager</param>
            <param name="tenantId">TenantId</param>
            <param name="name">Unique name of the setting</param>
            <param name="value">Value of the setting</param>
        </member>
        <member name="M:Majid.Configuration.SettingManagerExtensions.ChangeSettingForUser(Majid.Configuration.ISettingManager,Majid.UserIdentifier,System.String,System.String)">
            <summary>
            Changes setting for a user.
            </summary>
            <param name="settingManager">Setting manager</param>
            <param name="user">User</param>
            <param name="name">Unique name of the setting</param>
            <param name="value">Value of the setting</param>
        </member>
        <member name="T:Majid.Configuration.SettingProvider">
            <summary>
            Inherit this class to define settings for a module/application.
            </summary>
        </member>
        <member name="M:Majid.Configuration.SettingProvider.GetSettingDefinitions(Majid.Configuration.SettingDefinitionProviderContext)">
            <summary>
            Gets all setting definitions provided by this provider.
            </summary>
            <returns>List of settings</returns>
        </member>
        <member name="T:Majid.Configuration.SettingScopes">
            <summary>
            Defines scope of a setting.
            </summary>
        </member>
        <member name="F:Majid.Configuration.SettingScopes.Application">
            <summary>
            Represents a setting that can be configured/changed for the application level.
            </summary>
        </member>
        <member name="F:Majid.Configuration.SettingScopes.Tenant">
            <summary>
            Represents a setting that can be configured/changed for each Tenant.
            This is reserved
            </summary>
        </member>
        <member name="F:Majid.Configuration.SettingScopes.User">
            <summary>
            Represents a setting that can be configured/changed for each User.
            </summary>
        </member>
        <member name="F:Majid.Configuration.SettingScopes.All">
            <summary>
            Represents a setting that can be configured/changed for all levels
            </summary>
        </member>
        <member name="M:Majid.Data.IActiveTransactionProvider.GetActiveTransaction(Majid.Data.ActiveTransactionProviderArgs)">
            <summary>
                Gets the active transaction or null if current UOW is not transactional.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Majid.Data.IActiveTransactionProvider.GetActiveConnection(Majid.Data.ActiveTransactionProviderArgs)">
            <summary>
                Gets the active database connection.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Majid.Dependency.BasicConventionalRegistrar">
            <summary>
            This class is used to register basic dependency implementations such as <see cref="T:Majid.Dependency.ITransientDependency"/> and <see cref="T:Majid.Dependency.ISingletonDependency"/>.
            </summary>
        </member>
        <member name="T:Majid.Dependency.ConventionalRegistrationConfig">
            <summary>
            This class is used to pass configuration/options while registering classes in conventional way.
            </summary>
        </member>
        <member name="P:Majid.Dependency.ConventionalRegistrationConfig.InstallInstallers">
            <summary>
            Install all <see cref="T:Castle.DynamicProxy.IInterceptor"/> implementations automatically or not.
            Default: true. 
            </summary>
        </member>
        <member name="M:Majid.Dependency.ConventionalRegistrationConfig.#ctor">
            <summary>
            Creates a new <see cref="T:Majid.Dependency.ConventionalRegistrationConfig"/> object.
            </summary>
        </member>
        <member name="T:Majid.Dependency.ConventionalRegistrationContext">
            <summary>
            This class is used to pass needed objects on conventional registration process.
            </summary>
        </member>
        <member name="P:Majid.Dependency.ConventionalRegistrationContext.Assembly">
            <summary>
            Gets the registering Assembly.
            </summary>
        </member>
        <member name="P:Majid.Dependency.ConventionalRegistrationContext.IocManager">
            <summary>
            Reference to the IOC Container to register types.
            </summary>
        </member>
        <member name="P:Majid.Dependency.ConventionalRegistrationContext.Config">
            <summary>
            Registration configuration.
            </summary>
        </member>
        <member name="T:Majid.Dependency.DependencyLifeStyle">
            <summary>
            Lifestyles of types used in dependency injection system.
            </summary>
        </member>
        <member name="F:Majid.Dependency.DependencyLifeStyle.Singleton">
            <summary>
            Singleton object. Created a single object on first resolving
            and same instance is used for subsequent resolves.
            </summary>
        </member>
        <member name="F:Majid.Dependency.DependencyLifeStyle.Transient">
            <summary>
            Transient object. Created one object for every resolving.
            </summary>
        </member>
        <member name="T:Majid.Dependency.IConventionalDependencyRegistrar">
            <summary>
            This interface is used to register dependencies by conventions. 
            </summary>
            <remarks>
            Implement this interface and register to <see cref="M:Majid.Dependency.IocManager.AddConventionalRegistrar(Majid.Dependency.IConventionalDependencyRegistrar)"/> method to be able
            to register classes by your own conventions.
            </remarks>
        </member>
        <member name="M:Majid.Dependency.IConventionalDependencyRegistrar.RegisterAssembly(Majid.Dependency.IConventionalRegistrationContext)">
            <summary>
            Registers types of given assembly by convention.
            </summary>
            <param name="context">Registration context</param>
        </member>
        <member name="T:Majid.Dependency.IConventionalRegistrationContext">
            <summary>
            Used to pass needed objects on conventional registration process.
            </summary>
        </member>
        <member name="P:Majid.Dependency.IConventionalRegistrationContext.Assembly">
            <summary>
            Gets the registering Assembly.
            </summary>
        </member>
        <member name="P:Majid.Dependency.IConventionalRegistrationContext.IocManager">
            <summary>
            Reference to the IOC Container to register types.
            </summary>
        </member>
        <member name="P:Majid.Dependency.IConventionalRegistrationContext.Config">
            <summary>
            Registration configuration.
            </summary>
        </member>
        <member name="T:Majid.Dependency.IDisposableDependencyObjectWrapper">
            <summary>
            This interface is used to wrap an object that is resolved from IOC container.
            It inherits <see cref="T:System.IDisposable"/>, so resolved object can be easily released.
            In <see cref="M:System.IDisposable.Dispose"/> method, <see cref="M:Majid.Dependency.IIocResolver.Release(System.Object)"/> is called to dispose the object.
            This is non-generic version of <see cref="T:Majid.Dependency.IDisposableDependencyObjectWrapper`1"/> interface.
            </summary>
        </member>
        <member name="T:Majid.Dependency.IDisposableDependencyObjectWrapper`1">
            <summary>
            This interface is used to wrap an object that is resolved from IOC container.
            It inherits <see cref="T:System.IDisposable"/>, so resolved object can be easily released.
            In <see cref="M:System.IDisposable.Dispose"/> method, <see cref="M:Majid.Dependency.IIocResolver.Release(System.Object)"/> is called to dispose the object.
            </summary>
            <typeparam name="T">Type of the object</typeparam>
        </member>
        <member name="P:Majid.Dependency.IDisposableDependencyObjectWrapper`1.Object">
            <summary>
            The resolved object.
            </summary>
        </member>
        <member name="T:Majid.Dependency.IIocManager">
            <summary>
            This interface is used to directly perform dependency injection tasks.
            </summary>
        </member>
        <member name="P:Majid.Dependency.IIocManager.IocContainer">
            <summary>
            Reference to the Castle Windsor Container.
            </summary>
        </member>
        <member name="M:Majid.Dependency.IIocManager.IsRegistered(System.Type)">
            <summary>
            Checks whether given type is registered before.
            </summary>
            <param name="type">Type to check</param>
        </member>
        <member name="M:Majid.Dependency.IIocManager.IsRegistered``1">
            <summary>
            Checks whether given type is registered before.
            </summary>
            <typeparam name="T">Type to check</typeparam>
        </member>
        <member name="T:Majid.Dependency.IIocRegistrar">
            <summary>
            Define interface for classes those are used to register dependencies.
            </summary>
        </member>
        <member name="M:Majid.Dependency.IIocRegistrar.AddConventionalRegistrar(Majid.Dependency.IConventionalDependencyRegistrar)">
            <summary>
            Adds a dependency registrar for conventional registration.
            </summary>
            <param name="registrar">dependency registrar</param>
        </member>
        <member name="M:Majid.Dependency.IIocRegistrar.RegisterAssemblyByConvention(System.Reflection.Assembly)">
            <summary>
            Registers types of given assembly by all conventional registrars. See <see cref="M:Majid.Dependency.IocManager.AddConventionalRegistrar(Majid.Dependency.IConventionalDependencyRegistrar)"/> method.
            </summary>
            <param name="assembly">Assembly to register</param>
        </member>
        <member name="M:Majid.Dependency.IIocRegistrar.RegisterAssemblyByConvention(System.Reflection.Assembly,Majid.Dependency.ConventionalRegistrationConfig)">
            <summary>
            Registers types of given assembly by all conventional registrars. See <see cref="M:Majid.Dependency.IocManager.AddConventionalRegistrar(Majid.Dependency.IConventionalDependencyRegistrar)"/> method.
            </summary>
            <param name="assembly">Assembly to register</param>
            <param name="config">Additional configuration</param>
        </member>
        <member name="M:Majid.Dependency.IIocRegistrar.Register``1(Majid.Dependency.DependencyLifeStyle)">
            <summary>
            Registers a type as self registration.
            </summary>
            <typeparam name="T">Type of the class</typeparam>
            <param name="lifeStyle">Lifestyle of the objects of this type</param>
        </member>
        <member name="M:Majid.Dependency.IIocRegistrar.Register(System.Type,Majid.Dependency.DependencyLifeStyle)">
            <summary>
            Registers a type as self registration.
            </summary>
            <param name="type">Type of the class</param>
            <param name="lifeStyle">Lifestyle of the objects of this type</param>
        </member>
        <member name="M:Majid.Dependency.IIocRegistrar.Register``2(Majid.Dependency.DependencyLifeStyle)">
            <summary>
            Registers a type with it's implementation.
            </summary>
            <typeparam name="TType">Registering type</typeparam>
            <typeparam name="TImpl">The type that implements <see cref="!:TType"/></typeparam>
            <param name="lifeStyle">Lifestyle of the objects of this type</param>
        </member>
        <member name="M:Majid.Dependency.IIocRegistrar.Register(System.Type,System.Type,Majid.Dependency.DependencyLifeStyle)">
            <summary>
            Registers a type with it's implementation.
            </summary>
            <param name="type">Type of the class</param>
            <param name="impl">The type that implements <paramref name="type"/></param>
            <param name="lifeStyle">Lifestyle of the objects of this type</param>
        </member>
        <member name="M:Majid.Dependency.IIocRegistrar.IsRegistered(System.Type)">
            <summary>
            Checks whether given type is registered before.
            </summary>
            <param name="type">Type to check</param>
        </member>
        <member name="M:Majid.Dependency.IIocRegistrar.IsRegistered``1">
            <summary>
            Checks whether given type is registered before.
            </summary>
            <typeparam name="TType">Type to check</typeparam>
        </member>
        <member name="T:Majid.Dependency.IIocResolver">
            <summary>
            Define interface for classes those are used to resolve dependencies.
            </summary>
        </member>
        <member name="M:Majid.Dependency.IIocResolver.Resolve``1">
            <summary>
            Gets an object from IOC container.
            Returning object must be Released (see <see cref="M:Majid.Dependency.IIocResolver.Release(System.Object)"/>) after usage.
            </summary> 
            <typeparam name="T">Type of the object to get</typeparam>
            <returns>The object instance</returns>
        </member>
        <member name="M:Majid.Dependency.IIocResolver.Resolve``1(System.Type)">
            <summary>
            Gets an object from IOC container.
            Returning object must be Released (see <see cref="M:Majid.Dependency.IIocResolver.Release(System.Object)"/>) after usage.
            </summary> 
            <typeparam name="T">Type of the object to cast</typeparam>
            <param name="type">Type of the object to resolve</param>
            <returns>The object instance</returns>
        </member>
        <member name="M:Majid.Dependency.IIocResolver.Resolve``1(System.Object)">
            <summary>
            Gets an object from IOC container.
            Returning object must be Released (see <see cref="M:Majid.Dependency.IIocResolver.Release(System.Object)"/>) after usage.
            </summary> 
            <typeparam name="T">Type of the object to get</typeparam>
            <param name="argumentsAsAnonymousType">Constructor arguments</param>
            <returns>The object instance</returns>
        </member>
        <member name="M:Majid.Dependency.IIocResolver.Resolve(System.Type)">
            <summary>
            Gets an object from IOC container.
            Returning object must be Released (see <see cref="M:Majid.Dependency.IIocResolver.Release(System.Object)"/>) after usage.
            </summary> 
            <param name="type">Type of the object to get</param>
            <returns>The object instance</returns>
        </member>
        <member name="M:Majid.Dependency.IIocResolver.Resolve(System.Type,System.Object)">
            <summary>
            Gets an object from IOC container.
            Returning object must be Released (see <see cref="M:Majid.Dependency.IIocResolver.Release(System.Object)"/>) after usage.
            </summary> 
            <param name="type">Type of the object to get</param>
            <param name="argumentsAsAnonymousType">Constructor arguments</param>
            <returns>The object instance</returns>
        </member>
        <member name="M:Majid.Dependency.IIocResolver.ResolveAll``1">
            <summary>
            Gets all implementations for given type.
            Returning objects must be Released (see <see cref="M:Majid.Dependency.IIocResolver.Release(System.Object)"/>) after usage.
            </summary> 
            <typeparam name="T">Type of the objects to resolve</typeparam>
            <returns>Object instances</returns>
        </member>
        <member name="M:Majid.Dependency.IIocResolver.ResolveAll``1(System.Object)">
            <summary>
            Gets all implementations for given type.
            Returning objects must be Released (see <see cref="M:Majid.Dependency.IIocResolver.Release(System.Object)"/>) after usage.
            </summary> 
            <typeparam name="T">Type of the objects to resolve</typeparam>
            <param name="argumentsAsAnonymousType">Constructor arguments</param>
            <returns>Object instances</returns>
        </member>
        <member name="M:Majid.Dependency.IIocResolver.ResolveAll(System.Type)">
            <summary>
            Gets all implementations for given type.
            Returning objects must be Released (see <see cref="M:Majid.Dependency.IIocResolver.Release(System.Object)"/>) after usage.
            </summary> 
            <param name="type">Type of the objects to resolve</param>
            <returns>Object instances</returns>
        </member>
        <member name="M:Majid.Dependency.IIocResolver.ResolveAll(System.Type,System.Object)">
            <summary>
            Gets all implementations for given type.
            Returning objects must be Released (see <see cref="M:Majid.Dependency.IIocResolver.Release(System.Object)"/>) after usage.
            </summary> 
            <param name="type">Type of the objects to resolve</param>
            <param name="argumentsAsAnonymousType">Constructor arguments</param>
            <returns>Object instances</returns>
        </member>
        <member name="M:Majid.Dependency.IIocResolver.Release(System.Object)">
            <summary>
            Releases a pre-resolved object. See Resolve methods.
            </summary>
            <param name="obj">Object to be released</param>
        </member>
        <member name="M:Majid.Dependency.IIocResolver.IsRegistered(System.Type)">
            <summary>
            Checks whether given type is registered before.
            </summary>
            <param name="type">Type to check</param>
        </member>
        <member name="M:Majid.Dependency.IIocResolver.IsRegistered``1">
            <summary>
            Checks whether given type is registered before.
            </summary>
            <typeparam name="T">Type to check</typeparam>
        </member>
        <member name="T:Majid.Dependency.IocManager">
            <summary>
            This class is used to directly perform dependency injection tasks.
            </summary>
        </member>
        <member name="P:Majid.Dependency.IocManager.Instance">
            <summary>
            The Singleton instance.
            </summary>
        </member>
        <member name="F:Majid.Dependency.IocManager.ProxyGeneratorInstance">
            <summary>
            Singletone instance for Castle ProxyGenerator.
            From Castle.Core documentation it is highly recomended to use single instance of ProxyGenerator to avoid memoryleaks and performance issues
            Follow next links for more details:
            <a href="https://github.com/castleproject/Core/blob/master/docs/dynamicproxy.md">Castle.Core documentation</a>,
            <a href="http://kozmic.net/2009/07/05/castle-dynamic-proxy-tutorial-part-xii-caching/">Article</a>
            </summary>
        </member>
        <member name="P:Majid.Dependency.IocManager.IocContainer">
            <summary>
            Reference to the Castle Windsor Container.
            </summary>
        </member>
        <member name="F:Majid.Dependency.IocManager._conventionalRegistrars">
            <summary>
            List of all registered conventional registrars.
            </summary>
        </member>
        <member name="M:Majid.Dependency.IocManager.#ctor">
            <summary>
            Creates a new <see cref="T:Majid.Dependency.IocManager"/> object.
            Normally, you don't directly instantiate an <see cref="T:Majid.Dependency.IocManager"/>.
            This may be useful for test purposes.
            </summary>
        </member>
        <member name="M:Majid.Dependency.IocManager.AddConventionalRegistrar(Majid.Dependency.IConventionalDependencyRegistrar)">
            <summary>
            Adds a dependency registrar for conventional registration.
            </summary>
            <param name="registrar">dependency registrar</param>
        </member>
        <member name="M:Majid.Dependency.IocManager.RegisterAssemblyByConvention(System.Reflection.Assembly)">
            <summary>
            Registers types of given assembly by all conventional registrars. See <see cref="M:Majid.Dependency.IocManager.AddConventionalRegistrar(Majid.Dependency.IConventionalDependencyRegistrar)"/> method.
            </summary>
            <param name="assembly">Assembly to register</param>
        </member>
        <member name="M:Majid.Dependency.IocManager.RegisterAssemblyByConvention(System.Reflection.Assembly,Majid.Dependency.ConventionalRegistrationConfig)">
            <summary>
            Registers types of given assembly by all conventional registrars. See <see cref="M:Majid.Dependency.IocManager.AddConventionalRegistrar(Majid.Dependency.IConventionalDependencyRegistrar)"/> method.
            </summary>
            <param name="assembly">Assembly to register</param>
            <param name="config">Additional configuration</param>
        </member>
        <member name="M:Majid.Dependency.IocManager.Register``1(Majid.Dependency.DependencyLifeStyle)">
            <summary>
            Registers a type as self registration.
            </summary>
            <typeparam name="TType">Type of the class</typeparam>
            <param name="lifeStyle">Lifestyle of the objects of this type</param>
        </member>
        <member name="M:Majid.Dependency.IocManager.Register(System.Type,Majid.Dependency.DependencyLifeStyle)">
            <summary>
            Registers a type as self registration.
            </summary>
            <param name="type">Type of the class</param>
            <param name="lifeStyle">Lifestyle of the objects of this type</param>
        </member>
        <member name="M:Majid.Dependency.IocManager.Register``2(Majid.Dependency.DependencyLifeStyle)">
            <summary>
            Registers a type with it's implementation.
            </summary>
            <typeparam name="TType">Registering type</typeparam>
            <typeparam name="TImpl">The type that implements <see cref="!:TType"/></typeparam>
            <param name="lifeStyle">Lifestyle of the objects of this type</param>
        </member>
        <member name="M:Majid.Dependency.IocManager.Register(System.Type,System.Type,Majid.Dependency.DependencyLifeStyle)">
            <summary>
            Registers a type with it's implementation.
            </summary>
            <param name="type">Type of the class</param>
            <param name="impl">The type that implements <paramref name="type"/></param>
            <param name="lifeStyle">Lifestyle of the objects of this type</param>
        </member>
        <member name="M:Majid.Dependency.IocManager.IsRegistered(System.Type)">
            <summary>
            Checks whether given type is registered before.
            </summary>
            <param name="type">Type to check</param>
        </member>
        <member name="M:Majid.Dependency.IocManager.IsRegistered``1">
            <summary>
            Checks whether given type is registered before.
            </summary>
            <typeparam name="TType">Type to check</typeparam>
        </member>
        <member name="M:Majid.Dependency.IocManager.Resolve``1">
            <summary>
            Gets an object from IOC container.
            Returning object must be Released (see <see cref="M:Majid.Dependency.IIocResolver.Release(System.Object)"/>) after usage.
            </summary> 
            <typeparam name="T">Type of the object to get</typeparam>
            <returns>The instance object</returns>
        </member>
        <member name="M:Majid.Dependency.IocManager.Resolve``1(System.Type)">
            <summary>
            Gets an object from IOC container.
            Returning object must be Released (see <see cref="M:Majid.Dependency.IocManager.Release(System.Object)"/>) after usage.
            </summary> 
            <typeparam name="T">Type of the object to cast</typeparam>
            <param name="type">Type of the object to resolve</param>
            <returns>The object instance</returns>
        </member>
        <member name="M:Majid.Dependency.IocManager.Resolve``1(System.Object)">
            <summary>
            Gets an object from IOC container.
            Returning object must be Released (see <see cref="M:Majid.Dependency.IIocResolver.Release(System.Object)"/>) after usage.
            </summary> 
            <typeparam name="T">Type of the object to get</typeparam>
            <param name="argumentsAsAnonymousType">Constructor arguments</param>
            <returns>The instance object</returns>
        </member>
        <member name="M:Majid.Dependency.IocManager.Resolve(System.Type)">
            <summary>
            Gets an object from IOC container.
            Returning object must be Released (see <see cref="M:Majid.Dependency.IIocResolver.Release(System.Object)"/>) after usage.
            </summary> 
            <param name="type">Type of the object to get</param>
            <returns>The instance object</returns>
        </member>
        <member name="M:Majid.Dependency.IocManager.Resolve(System.Type,System.Object)">
            <summary>
            Gets an object from IOC container.
            Returning object must be Released (see <see cref="M:Majid.Dependency.IIocResolver.Release(System.Object)"/>) after usage.
            </summary> 
            <param name="type">Type of the object to get</param>
            <param name="argumentsAsAnonymousType">Constructor arguments</param>
            <returns>The instance object</returns>
        </member>
        <member name="M:Majid.Dependency.IocManager.ResolveAll``1">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Dependency.IocManager.ResolveAll``1(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Dependency.IocManager.ResolveAll(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Dependency.IocManager.ResolveAll(System.Type,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Dependency.IocManager.Release(System.Object)">
            <summary>
            Releases a pre-resolved object. See Resolve methods.
            </summary>
            <param name="obj">Object to be released</param>
        </member>
        <member name="M:Majid.Dependency.IocManager.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Majid.Dependency.IocRegistrarExtensions">
            <summary>
            Extension methods for <see cref="T:Majid.Dependency.IIocRegistrar"/> interface.
            </summary>
        </member>
        <member name="M:Majid.Dependency.IocRegistrarExtensions.RegisterIfNot``1(Majid.Dependency.IIocRegistrar,Majid.Dependency.DependencyLifeStyle)">
            <summary>
            Registers a type as self registration if it's not registered before.
            </summary>
            <typeparam name="T">Type of the class</typeparam>
            <param name="iocRegistrar">Registrar</param>
            <param name="lifeStyle">Lifestyle of the objects of this type</param>
            <returns>True, if registered for given implementation.</returns>
        </member>
        <member name="M:Majid.Dependency.IocRegistrarExtensions.RegisterIfNot(Majid.Dependency.IIocRegistrar,System.Type,Majid.Dependency.DependencyLifeStyle)">
            <summary>
            Registers a type as self registration if it's not registered before.
            </summary>
            <param name="iocRegistrar">Registrar</param>
            <param name="type">Type of the class</param>
            <param name="lifeStyle">Lifestyle of the objects of this type</param>
            <returns>True, if registered for given implementation.</returns>
        </member>
        <member name="M:Majid.Dependency.IocRegistrarExtensions.RegisterIfNot``2(Majid.Dependency.IIocRegistrar,Majid.Dependency.DependencyLifeStyle)">
            <summary>
            Registers a type with it's implementation if it's not registered before.
            </summary>
            <typeparam name="TType">Registering type</typeparam>
            <typeparam name="TImpl">The type that implements <see cref="!:TType"/></typeparam>
            <param name="iocRegistrar">Registrar</param>
            <param name="lifeStyle">Lifestyle of the objects of this type</param>
            <returns>True, if registered for given implementation.</returns>
        </member>
        <member name="M:Majid.Dependency.IocRegistrarExtensions.RegisterIfNot(Majid.Dependency.IIocRegistrar,System.Type,System.Type,Majid.Dependency.DependencyLifeStyle)">
            <summary>
            Registers a type with it's implementation if it's not registered before.
            </summary>
            <param name="iocRegistrar">Registrar</param>
            <param name="type">Type of the class</param>
            <param name="impl">The type that implements <paramref name="type"/></param>
            <param name="lifeStyle">Lifestyle of the objects of this type</param>
            <returns>True, if registered for given implementation.</returns>
        </member>
        <member name="T:Majid.Dependency.IocResolverExtensions">
            <summary>
            Extension methods to <see cref="T:Majid.Dependency.IIocResolver"/> interface.
            </summary>
        </member>
        <member name="M:Majid.Dependency.IocResolverExtensions.ResolveAsDisposable``1(Majid.Dependency.IIocResolver)">
            <summary>
            Gets an <see cref="T:Majid.Dependency.DisposableDependencyObjectWrapper`1"/> object that wraps resolved object to be Disposable.
            </summary> 
            <typeparam name="T">Type of the object to get</typeparam>
            <param name="iocResolver">IIocResolver object</param>
            <returns>The instance object wrapped by <see cref="T:Majid.Dependency.DisposableDependencyObjectWrapper`1"/></returns>
        </member>
        <member name="M:Majid.Dependency.IocResolverExtensions.ResolveAsDisposable``1(Majid.Dependency.IIocResolver,System.Type)">
            <summary>
            Gets an <see cref="T:Majid.Dependency.DisposableDependencyObjectWrapper`1"/> object that wraps resolved object to be Disposable.
            </summary> 
            <typeparam name="T">Type of the object to get</typeparam>
            <param name="iocResolver">IIocResolver object</param>
            <param name="type">Type of the object to resolve. This type must be convertible <typeparamref name="T"/>.</param>
            <returns>The instance object wrapped by <see cref="T:Majid.Dependency.DisposableDependencyObjectWrapper`1"/></returns>
        </member>
        <member name="M:Majid.Dependency.IocResolverExtensions.ResolveAsDisposable(Majid.Dependency.IIocResolver,System.Type)">
            <summary>
            Gets an <see cref="T:Majid.Dependency.DisposableDependencyObjectWrapper`1"/> object that wraps resolved object to be Disposable.
            </summary> 
            <param name="iocResolver">IIocResolver object</param>
            <param name="type">Type of the object to resolve. This type must be convertible to <see cref="T:System.IDisposable"/>.</param>
            <returns>The instance object wrapped by <see cref="T:Majid.Dependency.DisposableDependencyObjectWrapper`1"/></returns>
        </member>
        <member name="M:Majid.Dependency.IocResolverExtensions.ResolveAsDisposable``1(Majid.Dependency.IIocResolver,System.Object)">
            <summary>
            Gets an <see cref="T:Majid.Dependency.DisposableDependencyObjectWrapper`1"/> object that wraps resolved object to be Disposable.
            </summary> 
            <typeparam name="T">Type of the object to get</typeparam>
            <param name="iocResolver">IIocResolver object</param>
            <param name="argumentsAsAnonymousType">Constructor arguments</param>
            <returns>The instance object wrapped by <see cref="T:Majid.Dependency.DisposableDependencyObjectWrapper`1"/></returns>
        </member>
        <member name="M:Majid.Dependency.IocResolverExtensions.ResolveAsDisposable``1(Majid.Dependency.IIocResolver,System.Type,System.Object)">
            <summary>
            Gets an <see cref="T:Majid.Dependency.DisposableDependencyObjectWrapper`1"/> object that wraps resolved object to be Disposable.
            </summary> 
            <typeparam name="T">Type of the object to get</typeparam>
            <param name="iocResolver">IIocResolver object</param>
            <param name="type">Type of the object to resolve. This type must be convertible <typeparamref name="T"/>.</param>
            <param name="argumentsAsAnonymousType">Constructor arguments</param>
            <returns>The instance object wrapped by <see cref="T:Majid.Dependency.DisposableDependencyObjectWrapper`1"/></returns>
        </member>
        <member name="M:Majid.Dependency.IocResolverExtensions.ResolveAsDisposable(Majid.Dependency.IIocResolver,System.Type,System.Object)">
            <summary>
            Gets an <see cref="T:Majid.Dependency.DisposableDependencyObjectWrapper`1"/> object that wraps resolved object to be Disposable.
            </summary> 
            <param name="iocResolver">IIocResolver object</param>
            <param name="type">Type of the object to resolve. This type must be convertible to <see cref="T:System.IDisposable"/>.</param>
            <param name="argumentsAsAnonymousType">Constructor arguments</param>
            <returns>The instance object wrapped by <see cref="T:Majid.Dependency.DisposableDependencyObjectWrapper`1"/></returns>
        </member>
        <member name="M:Majid.Dependency.IocResolverExtensions.CreateScope(Majid.Dependency.IIocResolver)">
            <summary>
            Gets a <see cref="T:Majid.Dependency.ScopedIocResolver"/> object that starts a scope to resolved objects to be Disposable.
            </summary>
            <param name="iocResolver"></param>
            <returns>The instance object wrapped by <see cref="T:Majid.Dependency.ScopedIocResolver"/></returns>
        </member>
        <member name="M:Majid.Dependency.IocResolverExtensions.Using``1(Majid.Dependency.IIocResolver,System.Action{``0})">
            <summary>
            This method can be used to resolve and release an object automatically.
            You can use the object in <paramref name="action"/>.
            </summary> 
            <typeparam name="T">Type of the object to use</typeparam>
            <param name="iocResolver">IIocResolver object</param>
            <param name="action">An action that can use the resolved object</param>
        </member>
        <member name="M:Majid.Dependency.IocResolverExtensions.Using``2(Majid.Dependency.IIocResolver,System.Func{``0,``1})">
            <summary>
            This method can be used to resolve and release an object automatically.
            You can use the object in <paramref name="func"/> and return a value.
            </summary> 
            <typeparam name="TService">Type of the service to use</typeparam>
            <typeparam name="TReturn">Return type</typeparam>
            <param name="iocResolver">IIocResolver object</param>
            <param name="func">A function that can use the resolved object</param>
        </member>
        <member name="M:Majid.Dependency.IocResolverExtensions.UsingScope(Majid.Dependency.IIocResolver,System.Action{Majid.Dependency.IScopedIocResolver})">
            <summary>
            This method starts a scope to resolve and release all objects automatically.
            You can use the <c>scope</c> in <see cref="!:action"/>.
            </summary> 
            <param name="iocResolver">IIocResolver object</param>
            <param name="action">An action that can use the resolved object</param>
        </member>
        <member name="T:Majid.Dependency.IScopedIocResolver">
            <summary>
                This interface is used to wrap a scope for batch resolvings in a single <c>using</c> statement.
                It inherits <see cref="T:System.IDisposable" /> and <see cref="T:Majid.Dependency.IIocResolver" />, so resolved objects can be easily and batch
                manner released by IocResolver.
                In <see cref="M:System.IDisposable.Dispose" /> method, <see cref="M:Majid.Dependency.IIocResolver.Release(System.Object)" /> is called to dispose the object.
            </summary>
        </member>
        <member name="T:Majid.Dependency.ISingletonDependency">
            <summary>
            All classes implement this interface are automatically registered to dependency injection as singleton object.
            </summary>
        </member>
        <member name="T:Majid.Dependency.ITransientDependency">
            <summary>
            All classes implement this interface are automatically registered to dependency injection as transient object.
            </summary>
        </member>
        <member name="T:Majid.Dependency.SingletonDependency`1">
            <summary>
            Used to get a singleton of any class which can be resolved using <see cref="P:Majid.Dependency.IocManager.Instance"/>.
            Important: Use classes by injecting wherever possible. This class is for cases that's not possible.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Majid.Dependency.SingletonDependency`1.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>
            The instance.
            </value>
        </member>
        <member name="T:Majid.DisposeAction">
            <summary>
            This class can be used to provide an action when
            Dipose method is called.
            </summary>
        </member>
        <member name="M:Majid.DisposeAction.#ctor(System.Action)">
            <summary>
            Creates a new <see cref="T:Majid.DisposeAction"/> object.
            </summary>
            <param name="action">Action to be executed when this object is disposed.</param>
        </member>
        <member name="T:Majid.Domain.Entities.Auditing.AuditedAggregateRoot">
            <summary>
            A shortcut of <see cref="T:Majid.Domain.Entities.Auditing.AuditedAggregateRoot`1"/> for most used primary key type (<see cref="T:System.Int32"/>).
            </summary>
        </member>
        <member name="T:Majid.Domain.Entities.Auditing.AuditedAggregateRoot`1">
            <summary>
            This class can be used to simplify implementing <see cref="T:Majid.Domain.Entities.Auditing.IAudited"/> for aggregate roots.
            </summary>
            <typeparam name="TPrimaryKey">Type of the primary key of the entity</typeparam>
        </member>
        <member name="P:Majid.Domain.Entities.Auditing.AuditedAggregateRoot`1.LastModificationTime">
            <summary>
            Last modification date of this entity.
            </summary>
        </member>
        <member name="P:Majid.Domain.Entities.Auditing.AuditedAggregateRoot`1.LastModifierUserId">
            <summary>
            Last modifier user of this entity.
            </summary>
        </member>
        <member name="T:Majid.Domain.Entities.Auditing.AuditedAggregateRoot`2">
            <summary>
            This class can be used to simplify implementing <see cref="T:Majid.Domain.Entities.Auditing.IAudited`1"/> for aggregate roots.
            </summary>
            <typeparam name="TPrimaryKey">Type of the primary key of the entity</typeparam>
            <typeparam name="TUser">Type of the user</typeparam>
        </member>
        <member name="P:Majid.Domain.Entities.Auditing.AuditedAggregateRoot`2.CreatorUser">
            <summary>
            Reference to the creator user of this entity.
            </summary>
        </member>
        <member name="P:Majid.Domain.Entities.Auditing.AuditedAggregateRoot`2.LastModifierUser">
            <summary>
            Reference to the last modifier user of this entity.
            </summary>
        </member>
        <member name="T:Majid.Domain.Entities.Auditing.AuditedEntity">
            <summary>
            A shortcut of <see cref="T:Majid.Domain.Entities.Auditing.AuditedEntity`1"/> for most used primary key type (<see cref="T:System.Int32"/>).
            </summary>
        </member>
        <member name="T:Majid.Domain.Entities.Auditing.AuditedEntity`1">
            <summary>
            This class can be used to simplify implementing <see cref="T:Majid.Domain.Entities.Auditing.IAudited"/>.
            </summary>
            <typeparam name="TPrimaryKey">Type of the primary key of the entity</typeparam>
        </member>
        <member name="P:Majid.Domain.Entities.Auditing.AuditedEntity`1.LastModificationTime">
            <summary>
            Last modification date of this entity.
            </summary>
        </member>
        <member name="P:Majid.Domain.Entities.Auditing.AuditedEntity`1.LastModifierUserId">
            <summary>
            Last modifier user of this entity.
            </summary>
        </member>
        <member name="T:Majid.Domain.Entities.Auditing.AuditedEntity`2">
            <summary>
            This class can be used to simplify implementing <see cref="T:Majid.Domain.Entities.Auditing.IAudited`1"/>.
            </summary>
            <typeparam name="TPrimaryKey">Type of the primary key of the entity</typeparam>
            <typeparam name="TUser">Type of the user</typeparam>
        </member>
        <member name="P:Majid.Domain.Entities.Auditing.AuditedEntity`2.CreatorUser">
            <summary>
            Reference to the creator user of this entity.
            </summary>
        </member>
        <member name="P:Majid.Domain.Entities.Auditing.AuditedEntity`2.LastModifierUser">
            <summary>
            Reference to the last modifier user of this entity.
            </summary>
        </member>
        <member name="T:Majid.Domain.Entities.Auditing.CreationAuditedAggregateRoot">
            <summary>
            A shortcut of <see cref="T:Majid.Domain.Entities.Auditing.CreationAuditedAggregateRoot`1"/> for most used primary key type (<see cref="T:System.Int32"/>).
            </summary>
        </member>
        <member name="T:Majid.Domain.Entities.Auditing.CreationAuditedAggregateRoot`1">
            <summary>
            This class can be used to simplify implementing <see cref="T:Majid.Domain.Entities.Auditing.ICreationAudited"/> for aggregate roots.
            </summary>
            <typeparam name="TPrimaryKey">Type of the primary key of the entity</typeparam>
        </member>
        <member name="P:Majid.Domain.Entities.Auditing.CreationAuditedAggregateRoot`1.CreationTime">
            <summary>
            Creation time of this entity.
            </summary>
        </member>
        <member name="P:Majid.Domain.Entities.Auditing.CreationAuditedAggregateRoot`1.CreatorUserId">
            <summary>
            Creator of this entity.
            </summary>
        </member>
        <member name="M:Majid.Domain.Entities.Auditing.CreationAuditedAggregateRoot`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Majid.Domain.Entities.Auditing.CreationAuditedAggregateRoot`2">
            <summary>
            This class can be used to simplify implementing <see cref="T:Majid.Domain.Entities.Auditing.ICreationAudited`1"/> for aggregate roots.
            </summary>
            <typeparam name="TPrimaryKey">Type of the primary key of the entity</typeparam>
            <typeparam name="TUser">Type of the user</typeparam>
        </member>
        <member name="P:Majid.Domain.Entities.Auditing.CreationAuditedAggregateRoot`2.CreatorUser">
            <summary>
            Reference to the creator user of this entity.
            </summary>
        </member>
        <member name="T:Majid.Domain.Entities.Auditing.CreationAuditedEntity">
            <summary>
            A shortcut of <see cref="T:Majid.Domain.Entities.Auditing.CreationAuditedEntity`1"/> for most used primary key type (<see cref="T:System.Int32"/>).
            </summary>
        </member>
        <member name="T:Majid.Domain.Entities.Auditing.CreationAuditedEntity`1">
            <summary>
            This class can be used to simplify implementing <see cref="T:Majid.Domain.Entities.Auditing.ICreationAudited"/>.
            </summary>
            <typeparam name="TPrimaryKey">Type of the primary key of the entity</typeparam>
        </member>
        <member name="P:Majid.Domain.Entities.Auditing.CreationAuditedEntity`1.CreationTime">
            <summary>
            Creation time of this entity.
            </summary>
        </member>
        <member name="P:Majid.Domain.Entities.Auditing.CreationAuditedEntity`1.CreatorUserId">
            <summary>
            Creator of this entity.
            </summary>
        </member>
        <member name="M:Majid.Domain.Entities.Auditing.CreationAuditedEntity`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Majid.Domain.Entities.Auditing.CreationAuditedEntity`2">
            <summary>
            This class can be used to simplify implementing <see cref="T:Majid.Domain.Entities.Auditing.ICreationAudited`1"/>.
            </summary>
            <typeparam name="TPrimaryKey">Type of the primary key of the entity</typeparam>
            <typeparam name="TUser">Type of the user</typeparam>
        </member>
        <member name="P:Majid.Domain.Entities.Auditing.CreationAuditedEntity`2.CreatorUser">
            <summary>
            Reference to the creator user of this entity.
            </summary>
        </member>
        <member name="T:Majid.Domain.Entities.Auditing.FullAuditedAggregateRoot">
            <summary>
            A shortcut of <see cref="T:Majid.Domain.Entities.Auditing.FullAuditedAggregateRoot`1"/> for most used primary key type (<see cref="T:System.Int32"/>).
            </summary>
        </member>
        <member name="T:Majid.Domain.Entities.Auditing.FullAuditedAggregateRoot`1">
            <summary>
            Implements <see cref="T:Majid.Domain.Entities.Auditing.IFullAudited"/> to be a base class for full-audited aggregate roots.
            </summary>
            <typeparam name="TPrimaryKey">Type of the primary key of the entity</typeparam>
        </member>
        <member name="P:Majid.Domain.Entities.Auditing.FullAuditedAggregateRoot`1.IsDeleted">
            <summary>
            Is this entity Deleted?
            </summary>
        </member>
        <member name="P:Majid.Domain.Entities.Auditing.FullAuditedAggregateRoot`1.DeleterUserId">
            <summary>
            Which user deleted this entity?
            </summary>
        </member>
        <member name="P:Majid.Domain.Entities.Auditing.FullAuditedAggregateRoot`1.DeletionTime">
            <summary>
            Deletion time of this entity.
            </summary>
        </member>
        <member name="T:Majid.Domain.Entities.Auditing.FullAuditedAggregateRoot`2">
            <summary>
            Implements <see cref="T:Majid.Domain.Entities.Auditing.IFullAudited`1"/> to be a base class for full-audited aggregate roots.
            </summary>
            <typeparam name="TPrimaryKey">Type of the primary key of the entity</typeparam>
            <typeparam name="TUser">Type of the user</typeparam>
        </member>
        <member name="P:Majid.Domain.Entities.Auditing.FullAuditedAggregateRoot`2.IsDeleted">
            <summary>
            Is this entity Deleted?
            </summary>
        </member>
        <member name="P:Majid.Domain.Entities.Auditing.FullAuditedAggregateRoot`2.DeleterUser">
            <summary>
            Reference to the deleter user of this entity.
            </summary>
        </member>
        <member name="P:Majid.Domain.Entities.Auditing.FullAuditedAggregateRoot`2.DeleterUserId">
            <summary>
            Which user deleted this entity?
            </summary>
        </member>
        <member name="P:Majid.Domain.Entities.Auditing.FullAuditedAggregateRoot`2.DeletionTime">
            <summary>
            Deletion time of this entity.
            </summary>
        </member>
        <member name="T:Majid.Domain.Entities.Auditing.FullAuditedEntity">
            <summary>
            A shortcut of <see cref="T:Majid.Domain.Entities.Auditing.FullAuditedEntity`1"/> for most used primary key type (<see cref="T:System.Int32"/>).
            </summary>
        </member>
        <member name="T:Majid.Domain.Entities.Auditing.FullAuditedEntity`1">
            <summary>
            Implements <see cref="T:Majid.Domain.Entities.Auditing.IFullAudited"/> to be a base class for full-audited entities.
            </summary>
            <typeparam name="TPrimaryKey">Type of the primary key of the entity</typeparam>
        </member>
        <member name="P:Majid.Domain.Entities.Auditing.FullAuditedEntity`1.IsDeleted">
            <summary>
            Is this entity Deleted?
            </summary>
        </member>
        <member name="P:Majid.Domain.Entities.Auditing.FullAuditedEntity`1.DeleterUserId">
            <summary>
            Which user deleted this entity?
            </summary>
        </member>
        <member name="P:Majid.Domain.Entities.Auditing.FullAuditedEntity`1.DeletionTime">
            <summary>
            Deletion time of this entity.
            </summary>
        </member>
        <member name="T:Majid.Domain.Entities.Auditing.FullAuditedEntity`2">
            <summary>
            Implements <see cref="T:Majid.Domain.Entities.Auditing.IFullAudited`1"/> to be a base class for full-audited entities.
            </summary>
            <typeparam name="TPrimaryKey">Type of the primary key of the entity</typeparam>
            <typeparam name="TUser">Type of the user</typeparam>
        </member>
        <member name="P:Majid.Domain.Entities.Auditing.FullAuditedEntity`2.IsDeleted">
            <summary>
            Is this entity Deleted?
            </summary>
        </member>
        <member name="P:Majid.Domain.Entities.Auditing.FullAuditedEntity`2.DeleterUser">
            <summary>
            Reference to the deleter user of this entity.
            </summary>
        </member>
        <member name="P:Majid.Domain.Entities.Auditing.FullAuditedEntity`2.DeleterUserId">
            <summary>
            Which user deleted this entity?
            </summary>
        </member>
        <member name="P:Majid.Domain.Entities.Auditing.FullAuditedEntity`2.DeletionTime">
            <summary>
            Deletion time of this entity.
            </summary>
        </member>
        <member name="T:Majid.Domain.Entities.Auditing.IAudited">
            <summary>
            This interface is implemented by entities which must be audited.
            Related properties automatically set when saving/updating <see cref="T:Majid.Domain.Entities.Entity"/> objects.
            </summary>
        </member>
        <member name="T:Majid.Domain.Entities.Auditing.IAudited`1">
            <summary>
            Adds navigation properties to <see cref="T:Majid.Domain.Entities.Auditing.IAudited"/> interface for user.
            </summary>
            <typeparam name="TUser">Type of the user</typeparam>
        </member>
        <member name="T:Majid.Domain.Entities.Auditing.ICreationAudited">
            <summary>
            This interface is implemented by entities that is wanted to store creation information (who and when created).
            Creation time and creator user are automatically set when saving <see cref="T:Majid.Domain.Entities.Entity"/> to database.
            </summary>
        </member>
        <member name="P:Majid.Domain.Entities.Auditing.ICreationAudited.CreatorUserId">
            <summary>
            Id of the creator user of this entity.
            </summary>
        </member>
        <member name="T:Majid.Domain.Entities.Auditing.ICreationAudited`1">
            <summary>
            Adds navigation properties to <see cref="T:Majid.Domain.Entities.Auditing.ICreationAudited"/> interface for user.
            </summary>
            <typeparam name="TUser">Type of the user</typeparam>
        </member>
        <member name="P:Majid.Domain.Entities.Auditing.ICreationAudited`1.CreatorUser">
            <summary>
            Reference to the creator user of this entity.
            </summary>
        </member>
        <member name="T:Majid.Domain.Entities.Auditing.IDeletionAudited">
            <summary>
            This interface is implemented by entities which wanted to store deletion information (who and when deleted).
            </summary>
        </member>
        <member name="P:Majid.Domain.Entities.Auditing.IDeletionAudited.DeleterUserId">
            <summary>
            Which user deleted this entity?
            </summary>
        </member>
        <member name="T:Majid.Domain.Entities.Auditing.IDeletionAudited`1">
            <summary>
            Adds navigation properties to <see cref="T:Majid.Domain.Entities.Auditing.IDeletionAudited"/> interface for user.
            </summary>
            <typeparam name="TUser">Type of the user</typeparam>
        </member>
        <member name="P:Majid.Domain.Entities.Auditing.IDeletionAudited`1.DeleterUser">
            <summary>
            Reference to the deleter user of this entity.
            </summary>
        </member>
        <member name="T:Majid.Domain.Entities.Auditing.IFullAudited">
            <summary>
            This interface ads <see cref="T:Majid.Domain.Entities.Auditing.IDeletionAudited"/> to <see cref="T:Majid.Domain.Entities.Auditing.IAudited"/> for a fully audited entity.
            </summary>
        </member>
        <member name="T:Majid.Domain.Entities.Auditing.IFullAudited`1">
            <summary>
            Adds navigation properties to <see cref="T:Majid.Domain.Entities.Auditing.IFullAudited"/> interface for user.
            </summary>
            <typeparam name="TUser">Type of the user</typeparam>
        </member>
        <member name="T:Majid.Domain.Entities.Auditing.IHasCreationTime">
            <summary>
            An entity can implement this interface if <see cref="P:Majid.Domain.Entities.Auditing.IHasCreationTime.CreationTime"/> of this entity must be stored.
            <see cref="P:Majid.Domain.Entities.Auditing.IHasCreationTime.CreationTime"/> is automatically set when saving <see cref="T:Majid.Domain.Entities.Entity"/> to database.
            </summary>
        </member>
        <member name="P:Majid.Domain.Entities.Auditing.IHasCreationTime.CreationTime">
            <summary>
            Creation time of this entity.
            </summary>
        </member>
        <member name="T:Majid.Domain.Entities.Auditing.IHasDeletionTime">
            <summary>
            An entity can implement this interface if <see cref="P:Majid.Domain.Entities.Auditing.IHasDeletionTime.DeletionTime"/> of this entity must be stored.
            <see cref="P:Majid.Domain.Entities.Auditing.IHasDeletionTime.DeletionTime"/> is automatically set when deleting <see cref="T:Majid.Domain.Entities.Entity"/>.
            </summary>
        </member>
        <member name="P:Majid.Domain.Entities.Auditing.IHasDeletionTime.DeletionTime">
            <summary>
            Deletion time of this entity.
            </summary>
        </member>
        <member name="T:Majid.Domain.Entities.Auditing.IHasModificationTime">
            <summary>
            An entity can implement this interface if <see cref="P:Majid.Domain.Entities.Auditing.IHasModificationTime.LastModificationTime"/> of this entity must be stored.
            <see cref="P:Majid.Domain.Entities.Auditing.IHasModificationTime.LastModificationTime"/> is automatically set when updating <see cref="T:Majid.Domain.Entities.Entity"/>.
            </summary>
        </member>
        <member name="P:Majid.Domain.Entities.Auditing.IHasModificationTime.LastModificationTime">
            <summary>
            The last modified time for this entity.
            </summary>
        </member>
        <member name="T:Majid.Domain.Entities.Auditing.IModificationAudited">
            <summary>
            This interface is implemented by entities that is wanted to store modification information (who and when modified lastly).
            Properties are automatically set when updating the <see cref="T:Majid.Domain.Entities.IEntity"/>.
            </summary>
        </member>
        <member name="P:Majid.Domain.Entities.Auditing.IModificationAudited.LastModifierUserId">
            <summary>
            Last modifier user for this entity.
            </summary>
        </member>
        <member name="T:Majid.Domain.Entities.Auditing.IModificationAudited`1">
            <summary>
            Adds navigation properties to <see cref="T:Majid.Domain.Entities.Auditing.IModificationAudited"/> interface for user.
            </summary>
            <typeparam name="TUser">Type of the user</typeparam>
        </member>
        <member name="P:Majid.Domain.Entities.Auditing.IModificationAudited`1.LastModifierUser">
            <summary>
            Reference to the last modifier user of this entity.
            </summary>
        </member>
        <member name="T:Majid.Domain.Entities.Entity">
            <summary>
            A shortcut of <see cref="T:Majid.Domain.Entities.Entity`1"/> for most used primary key type (<see cref="T:System.Int32"/>).
            </summary>
        </member>
        <member name="T:Majid.Domain.Entities.Entity`1">
            <summary>
            Basic implementation of IEntity interface.
            An entity can inherit this class of directly implement to IEntity interface.
            </summary>
            <typeparam name="TPrimaryKey">Type of the primary key of the entity</typeparam>
        </member>
        <member name="P:Majid.Domain.Entities.Entity`1.Id">
            <summary>
            Unique identifier for this entity.
            </summary>
        </member>
        <member name="M:Majid.Domain.Entities.Entity`1.IsTransient">
            <summary>
            Checks if this entity is transient (it has not an Id).
            </summary>
            <returns>True, if this entity is transient</returns>
        </member>
        <member name="M:Majid.Domain.Entities.Entity`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Domain.Entities.Entity`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Domain.Entities.Entity`1.op_Equality(Majid.Domain.Entities.Entity{`0},Majid.Domain.Entities.Entity{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Domain.Entities.Entity`1.op_Inequality(Majid.Domain.Entities.Entity{`0},Majid.Domain.Entities.Entity{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Domain.Entities.Entity`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Majid.Domain.Entities.EntityExtensions">
            <summary>
            Some useful extension methods for Entities.
            </summary>
        </member>
        <member name="M:Majid.Domain.Entities.EntityExtensions.IsNullOrDeleted(Majid.Domain.Entities.ISoftDelete)">
            <summary>
            Check if this Entity is null of marked as deleted.
            </summary>
        </member>
        <member name="M:Majid.Domain.Entities.EntityExtensions.UnDelete(Majid.Domain.Entities.ISoftDelete)">
            <summary>
            Undeletes this entity by setting <see cref="P:Majid.Domain.Entities.ISoftDelete.IsDeleted"/> to false and
            <see cref="T:Majid.Domain.Entities.Auditing.IDeletionAudited"/> properties to null.
            </summary>
        </member>
        <member name="T:Majid.Domain.Entities.EntityHelper">
            <summary>
            Some helper methods for entities.
            </summary>
        </member>
        <member name="M:Majid.Domain.Entities.EntityHelper.GetPrimaryKeyType(System.Type)">
            <summary>
            Gets primary key type of given entity type
            </summary>
        </member>
        <member name="T:Majid.Domain.Entities.EntityIdentifier">
            <summary>
            Used to identify an entity.
            Can be used to store an entity <see cref="P:Majid.Domain.Entities.EntityIdentifier.Type"/> and <see cref="P:Majid.Domain.Entities.EntityIdentifier.Id"/>.
            </summary>
        </member>
        <member name="P:Majid.Domain.Entities.EntityIdentifier.Type">
            <summary>
            Entity Type.
            </summary>
        </member>
        <member name="P:Majid.Domain.Entities.EntityIdentifier.Id">
            <summary>
            Entity's Id.
            </summary>
        </member>
        <member name="M:Majid.Domain.Entities.EntityIdentifier.#ctor">
            <summary>
            Added for serialization purposes.
            </summary>
        </member>
        <member name="M:Majid.Domain.Entities.EntityIdentifier.#ctor(System.Type,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Majid.Domain.Entities.EntityIdentifier"/> class.
            </summary>
            <param name="type">Entity type.</param>
            <param name="id">Id of the entity.</param>
        </member>
        <member name="T:Majid.Domain.Entities.EntityNotFoundException">
            <summary>
            This exception is thrown if an entity excepted to be found but not found.
            </summary>
        </member>
        <member name="P:Majid.Domain.Entities.EntityNotFoundException.EntityType">
            <summary>
            Type of the entity.
            </summary>
        </member>
        <member name="P:Majid.Domain.Entities.EntityNotFoundException.Id">
            <summary>
            Id of the Entity.
            </summary>
        </member>
        <member name="M:Majid.Domain.Entities.EntityNotFoundException.#ctor">
            <summary>
            Creates a new <see cref="T:Majid.Domain.Entities.EntityNotFoundException"/> object.
            </summary>
        </member>
        <member name="M:Majid.Domain.Entities.EntityNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new <see cref="T:Majid.Domain.Entities.EntityNotFoundException"/> object.
            </summary>
        </member>
        <member name="M:Majid.Domain.Entities.EntityNotFoundException.#ctor(System.Type,System.Object)">
            <summary>
            Creates a new <see cref="T:Majid.Domain.Entities.EntityNotFoundException"/> object.
            </summary>
        </member>
        <member name="M:Majid.Domain.Entities.EntityNotFoundException.#ctor(System.Type,System.Object,System.Exception)">
            <summary>
            Creates a new <see cref="T:Majid.Domain.Entities.EntityNotFoundException"/> object.
            </summary>
        </member>
        <member name="M:Majid.Domain.Entities.EntityNotFoundException.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Majid.Domain.Entities.EntityNotFoundException"/> object.
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:Majid.Domain.Entities.EntityNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new <see cref="T:Majid.Domain.Entities.EntityNotFoundException"/> object.
            </summary>
            <param name="message">Exception message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="P:Majid.Domain.Entities.EntityTypeInfo.EntityType">
            <summary>
            Type of the entity.
            </summary>
        </member>
        <member name="P:Majid.Domain.Entities.EntityTypeInfo.DeclaringType">
            <summary>
            DbContext type that has DbSet property.
            </summary>
        </member>
        <member name="T:Majid.Domain.Entities.IEntity">
            <summary>
            A shortcut of <see cref="T:Majid.Domain.Entities.IEntity`1"/> for most used primary key type (<see cref="T:System.Int32"/>).
            </summary>
        </member>
        <member name="T:Majid.Domain.Entities.IEntity`1">
            <summary>
            Defines interface for base entity type. All entities in the system must implement this interface.
            </summary>
            <typeparam name="TPrimaryKey">Type of the primary key of the entity</typeparam>
        </member>
        <member name="P:Majid.Domain.Entities.IEntity`1.Id">
            <summary>
            Unique identifier for this entity.
            </summary>
        </member>
        <member name="M:Majid.Domain.Entities.IEntity`1.IsTransient">
            <summary>
            Checks if this entity is transient (not persisted to database and it has not an <see cref="P:Majid.Domain.Entities.IEntity`1.Id"/>).
            </summary>
            <returns>True, if this entity is transient</returns>
        </member>
        <member name="T:Majid.Domain.Entities.IExtendableObject">
            <summary>
            Defines a JSON formatted string property to extend an object/entity.
            </summary>
        </member>
        <member name="P:Majid.Domain.Entities.IExtendableObject.ExtensionData">
            <summary>
            A JSON formatted string to extend the containing object.
            JSON data can contain properties with arbitrary values (like primitives or complex objects).
            Extension methods are available (<see cref="T:Majid.Domain.Entities.ExtendableObjectExtensions"/>) to manipulate this data.
            General format:
            <code>
            {
              "Property1" : ...
              "Property2" : ...
            }
            </code>
            </summary>
        </member>
        <member name="T:Majid.Domain.Entities.IMayHaveTenant">
            <summary>
            Implement this interface for an entity which may optionally have TenantId.
            </summary>
        </member>
        <member name="P:Majid.Domain.Entities.IMayHaveTenant.TenantId">
            <summary>
            TenantId of this entity.
            </summary>
        </member>
        <member name="T:Majid.Domain.Entities.IMustHaveTenant">
            <summary>
            Implement this interface for an entity which must have TenantId.
            </summary>
        </member>
        <member name="P:Majid.Domain.Entities.IMustHaveTenant.TenantId">
            <summary>
            TenantId of this entity.
            </summary>
        </member>
        <member name="T:Majid.Domain.Entities.IPassivable">
            <summary>
            This interface is used to make an entity active/passive.
            </summary>
        </member>
        <member name="P:Majid.Domain.Entities.IPassivable.IsActive">
            <summary>
            True: This entity is active.
            False: This entity is not active.
            </summary>
        </member>
        <member name="T:Majid.Domain.Entities.ISoftDelete">
            <summary>
            Used to standardize soft deleting entities.
            Soft-delete entities are not actually deleted,
            marked as IsDeleted = true in the database,
            but can not be retrieved to the application.
            </summary>
        </member>
        <member name="P:Majid.Domain.Entities.ISoftDelete.IsDeleted">
            <summary>
            Used to mark an Entity as 'Deleted'. 
            </summary>
        </member>
        <member name="T:Majid.Domain.Policies.IPolicy">
            <summary>
            This interface can be implemented by all Policy classes/interfaces to identify them by convention.
            </summary>
        </member>
        <member name="T:Majid.Domain.Repositories.AutoRepositoryTypesAttribute">
            <summary>
            Used to define auto-repository types for entities.
            This can be used for DbContext types.
            </summary>
        </member>
        <member name="T:Majid.Domain.Repositories.IRepository">
            <summary>
            This interface must be implemented by all repositories to identify them by convention.
            Implement generic version instead of this one.
            </summary>
        </member>
        <member name="T:Majid.Domain.Repositories.IRepository`1">
            <summary>
            A shortcut of <see cref="T:Majid.Domain.Repositories.IRepository`2"/> for most used primary key type (<see cref="T:System.Int32"/>).
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="T:Majid.Domain.Repositories.IRepository`2">
            <summary>
            This interface is implemented by all repositories to ensure implementation of fixed methods.
            </summary>
            <typeparam name="TEntity">Main Entity type this repository works on</typeparam>
            <typeparam name="TPrimaryKey">Primary key type of the entity</typeparam>
        </member>
        <member name="M:Majid.Domain.Repositories.IRepository`2.GetAll">
            <summary>
            Used to get a IQueryable that is used to retrieve entities from entire table.
            </summary>
            <returns>IQueryable to be used to select entities from database</returns>
        </member>
        <member name="M:Majid.Domain.Repositories.IRepository`2.GetAllIncluding(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Used to get a IQueryable that is used to retrieve entities from entire table.
            One or more 
            </summary>
            <param name="propertySelectors">A list of include expressions.</param>
            <returns>IQueryable to be used to select entities from database</returns>
        </member>
        <member name="M:Majid.Domain.Repositories.IRepository`2.GetAllList">
            <summary>
            Used to get all entities.
            </summary>
            <returns>List of all entities</returns>
        </member>
        <member name="M:Majid.Domain.Repositories.IRepository`2.GetAllListAsync">
            <summary>
            Used to get all entities.
            </summary>
            <returns>List of all entities</returns>
        </member>
        <member name="M:Majid.Domain.Repositories.IRepository`2.GetAllList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Used to get all entities based on given <paramref name="predicate"/>.
            </summary>
            <param name="predicate">A condition to filter entities</param>
            <returns>List of all entities</returns>
        </member>
        <member name="M:Majid.Domain.Repositories.IRepository`2.GetAllListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Used to get all entities based on given <paramref name="predicate"/>.
            </summary>
            <param name="predicate">A condition to filter entities</param>
            <returns>List of all entities</returns>
        </member>
        <member name="M:Majid.Domain.Repositories.IRepository`2.Query``1(System.Func{System.Linq.IQueryable{`0},``0})">
            <summary>
            Used to run a query over entire entities.
            <see cref="T:Majid.Domain.Uow.UnitOfWorkAttribute"/> attribute is not always necessary (as opposite to <see cref="M:Majid.Domain.Repositories.IRepository`2.GetAll"/>)
            if <paramref name="queryMethod"/> finishes IQueryable with ToList, FirstOrDefault etc..
            </summary>
            <typeparam name="T">Type of return value of this method</typeparam>
            <param name="queryMethod">This method is used to query over entities</param>
            <returns>Query result</returns>
        </member>
        <member name="M:Majid.Domain.Repositories.IRepository`2.Get(`1)">
            <summary>
            Gets an entity with given primary key.
            </summary>
            <param name="id">Primary key of the entity to get</param>
            <returns>Entity</returns>
        </member>
        <member name="M:Majid.Domain.Repositories.IRepository`2.GetAsync(`1)">
            <summary>
            Gets an entity with given primary key.
            </summary>
            <param name="id">Primary key of the entity to get</param>
            <returns>Entity</returns>
        </member>
        <member name="M:Majid.Domain.Repositories.IRepository`2.Single(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets exactly one entity with given predicate.
            Throws exception if no entity or more than one entity.
            </summary>
            <param name="predicate">Entity</param>
        </member>
        <member name="M:Majid.Domain.Repositories.IRepository`2.SingleAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets exactly one entity with given predicate.
            Throws exception if no entity or more than one entity.
            </summary>
            <param name="predicate">Entity</param>
        </member>
        <member name="M:Majid.Domain.Repositories.IRepository`2.FirstOrDefault(`1)">
            <summary>
            Gets an entity with given primary key or null if not found.
            </summary>
            <param name="id">Primary key of the entity to get</param>
            <returns>Entity or null</returns>
        </member>
        <member name="M:Majid.Domain.Repositories.IRepository`2.FirstOrDefaultAsync(`1)">
            <summary>
            Gets an entity with given primary key or null if not found.
            </summary>
            <param name="id">Primary key of the entity to get</param>
            <returns>Entity or null</returns>
        </member>
        <member name="M:Majid.Domain.Repositories.IRepository`2.FirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets an entity with given given predicate or null if not found.
            </summary>
            <param name="predicate">Predicate to filter entities</param>
        </member>
        <member name="M:Majid.Domain.Repositories.IRepository`2.FirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets an entity with given given predicate or null if not found.
            </summary>
            <param name="predicate">Predicate to filter entities</param>
        </member>
        <member name="M:Majid.Domain.Repositories.IRepository`2.Load(`1)">
            <summary>
            Creates an entity with given primary key without database access.
            </summary>
            <param name="id">Primary key of the entity to load</param>
            <returns>Entity</returns>
        </member>
        <member name="M:Majid.Domain.Repositories.IRepository`2.Insert(`0)">
            <summary>
            Inserts a new entity.
            </summary>
            <param name="entity">Inserted entity</param>
        </member>
        <member name="M:Majid.Domain.Repositories.IRepository`2.InsertAsync(`0)">
            <summary>
            Inserts a new entity.
            </summary>
            <param name="entity">Inserted entity</param>
        </member>
        <member name="M:Majid.Domain.Repositories.IRepository`2.InsertAndGetId(`0)">
            <summary>
            Inserts a new entity and gets it's Id.
            It may require to save current unit of work
            to be able to retrieve id.
            </summary>
            <param name="entity">Entity</param>
            <returns>Id of the entity</returns>
        </member>
        <member name="M:Majid.Domain.Repositories.IRepository`2.InsertAndGetIdAsync(`0)">
            <summary>
            Inserts a new entity and gets it's Id.
            It may require to save current unit of work
            to be able to retrieve id.
            </summary>
            <param name="entity">Entity</param>
            <returns>Id of the entity</returns>
        </member>
        <member name="M:Majid.Domain.Repositories.IRepository`2.InsertOrUpdate(`0)">
            <summary>
            Inserts or updates given entity depending on Id's value.
            </summary>
            <param name="entity">Entity</param>
        </member>
        <member name="M:Majid.Domain.Repositories.IRepository`2.InsertOrUpdateAsync(`0)">
            <summary>
            Inserts or updates given entity depending on Id's value.
            </summary>
            <param name="entity">Entity</param>
        </member>
        <member name="M:Majid.Domain.Repositories.IRepository`2.InsertOrUpdateAndGetId(`0)">
            <summary>
            Inserts or updates given entity depending on Id's value.
            Also returns Id of the entity.
            It may require to save current unit of work
            to be able to retrieve id.
            </summary>
            <param name="entity">Entity</param>
            <returns>Id of the entity</returns>
        </member>
        <member name="M:Majid.Domain.Repositories.IRepository`2.InsertOrUpdateAndGetIdAsync(`0)">
            <summary>
            Inserts or updates given entity depending on Id's value.
            Also returns Id of the entity.
            It may require to save current unit of work
            to be able to retrieve id.
            </summary>
            <param name="entity">Entity</param>
            <returns>Id of the entity</returns>
        </member>
        <member name="M:Majid.Domain.Repositories.IRepository`2.Update(`0)">
            <summary>
            Updates an existing entity.
            </summary>
            <param name="entity">Entity</param>
        </member>
        <member name="M:Majid.Domain.Repositories.IRepository`2.UpdateAsync(`0)">
            <summary>
            Updates an existing entity. 
            </summary>
            <param name="entity">Entity</param>
        </member>
        <member name="M:Majid.Domain.Repositories.IRepository`2.Update(`1,System.Action{`0})">
            <summary>
            Updates an existing entity.
            </summary>
            <param name="id">Id of the entity</param>
            <param name="updateAction">Action that can be used to change values of the entity</param>
            <returns>Updated entity</returns>
        </member>
        <member name="M:Majid.Domain.Repositories.IRepository`2.UpdateAsync(`1,System.Func{`0,System.Threading.Tasks.Task})">
            <summary>
            Updates an existing entity.
            </summary>
            <param name="id">Id of the entity</param>
            <param name="updateAction">Action that can be used to change values of the entity</param>
            <returns>Updated entity</returns>
        </member>
        <member name="M:Majid.Domain.Repositories.IRepository`2.Delete(`0)">
            <summary>
            Deletes an entity.
            </summary>
            <param name="entity">Entity to be deleted</param>
        </member>
        <member name="M:Majid.Domain.Repositories.IRepository`2.DeleteAsync(`0)">
            <summary>
            Deletes an entity.
            </summary>
            <param name="entity">Entity to be deleted</param>
        </member>
        <member name="M:Majid.Domain.Repositories.IRepository`2.Delete(`1)">
            <summary>
            Deletes an entity by primary key.
            </summary>
            <param name="id">Primary key of the entity</param>
        </member>
        <member name="M:Majid.Domain.Repositories.IRepository`2.DeleteAsync(`1)">
            <summary>
            Deletes an entity by primary key.
            </summary>
            <param name="id">Primary key of the entity</param>
        </member>
        <member name="M:Majid.Domain.Repositories.IRepository`2.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Deletes many entities by function.
            Notice that: All entities fits to given predicate are retrieved and deleted.
            This may cause major performance problems if there are too many entities with
            given predicate.
            </summary>
            <param name="predicate">A condition to filter entities</param>
        </member>
        <member name="M:Majid.Domain.Repositories.IRepository`2.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Deletes many entities by function.
            Notice that: All entities fits to given predicate are retrieved and deleted.
            This may cause major performance problems if there are too many entities with
            given predicate.
            </summary>
            <param name="predicate">A condition to filter entities</param>
        </member>
        <member name="M:Majid.Domain.Repositories.IRepository`2.Count">
            <summary>
            Gets count of all entities in this repository.
            </summary>
            <returns>Count of entities</returns>
        </member>
        <member name="M:Majid.Domain.Repositories.IRepository`2.CountAsync">
            <summary>
            Gets count of all entities in this repository.
            </summary>
            <returns>Count of entities</returns>
        </member>
        <member name="M:Majid.Domain.Repositories.IRepository`2.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets count of all entities in this repository based on given <paramref name="predicate"/>.
            </summary>
            <param name="predicate">A method to filter count</param>
            <returns>Count of entities</returns>
        </member>
        <member name="M:Majid.Domain.Repositories.IRepository`2.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets count of all entities in this repository based on given <paramref name="predicate"/>.
            </summary>
            <param name="predicate">A method to filter count</param>
            <returns>Count of entities</returns>
        </member>
        <member name="M:Majid.Domain.Repositories.IRepository`2.LongCount">
            <summary>
            Gets count of all entities in this repository (use if expected return value is greather than <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <returns>Count of entities</returns>
        </member>
        <member name="M:Majid.Domain.Repositories.IRepository`2.LongCountAsync">
            <summary>
            Gets count of all entities in this repository (use if expected return value is greather than <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <returns>Count of entities</returns>
        </member>
        <member name="M:Majid.Domain.Repositories.IRepository`2.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets count of all entities in this repository based on given <paramref name="predicate"/>
            (use this overload if expected return value is greather than <see cref="F:System.Int32.MaxValue"/>).
            </summary>
            <param name="predicate">A method to filter count</param>
            <returns>Count of entities</returns>
        </member>
        <member name="M:Majid.Domain.Repositories.IRepository`2.LongCountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets count of all entities in this repository based on given <paramref name="predicate"/>
            (use this overload if expected return value is greather than <see cref="F:System.Int32.MaxValue"/>).
            </summary>
            <param name="predicate">A method to filter count</param>
            <returns>Count of entities</returns>
        </member>
        <member name="T:Majid.Domain.Repositories.MajidRepositoryBase`2">
            <summary>
            Base class to implement <see cref="T:Majid.Domain.Repositories.IRepository`2"/>.
            It implements some methods in most simple way.
            </summary>
            <typeparam name="TEntity">Type of the Entity for this repository</typeparam>
            <typeparam name="TPrimaryKey">Primary key of the entity</typeparam>
        </member>
        <member name="P:Majid.Domain.Repositories.MajidRepositoryBase`2.MultiTenancySide">
            <summary>
            The multi tenancy side
            </summary>
        </member>
        <member name="T:Majid.Domain.Services.DomainService">
            <summary>
            This class can be used as a base class for domain services. 
            </summary>
        </member>
        <member name="T:Majid.Domain.Services.IDomainService">
            <summary>
            This interface must be implemented by all domain services to identify them by convention.
            </summary>
        </member>
        <member name="T:Majid.Domain.Uow.AsyncLocalCurrentUnitOfWorkProvider">
            <summary>
            CallContext implementation of <see cref="T:Majid.Domain.Uow.ICurrentUnitOfWorkProvider"/>. 
            This is the default implementation.
            </summary>
        </member>
        <member name="P:Majid.Domain.Uow.AsyncLocalCurrentUnitOfWorkProvider.Current">
            <inheritdoc />
        </member>
        <member name="T:Majid.Domain.Uow.DefaultConnectionStringResolver">
            <summary>
            Default implementation of <see cref="T:Majid.Domain.Uow.IConnectionStringResolver"/>.
            Get connection string from <see cref="T:Majid.Configuration.Startup.IMajidStartupConfiguration"/>,
            or "Default" connection string in config file,
            or single connection string in config file.
            </summary>
        </member>
        <member name="M:Majid.Domain.Uow.DefaultConnectionStringResolver.#ctor(Majid.Configuration.Startup.IMajidStartupConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Majid.Domain.Uow.DefaultConnectionStringResolver"/> class.
            </summary>
        </member>
        <member name="T:Majid.Domain.Uow.IActiveUnitOfWork">
            <summary>
            This interface is used to work with active unit of work.
            This interface can not be injected.
            Use <see cref="T:Majid.Domain.Uow.IUnitOfWorkManager"/> instead.
            </summary>
        </member>
        <member name="E:Majid.Domain.Uow.IActiveUnitOfWork.Completed">
            <summary>
            This event is raised when this UOW is successfully completed.
            </summary>
        </member>
        <member name="E:Majid.Domain.Uow.IActiveUnitOfWork.Failed">
            <summary>
            This event is raised when this UOW is failed.
            </summary>
        </member>
        <member name="E:Majid.Domain.Uow.IActiveUnitOfWork.Disposed">
            <summary>
            This event is raised when this UOW is disposed.
            </summary>
        </member>
        <member name="P:Majid.Domain.Uow.IActiveUnitOfWork.Options">
            <summary>
            Gets if this unit of work is transactional.
            </summary>
        </member>
        <member name="P:Majid.Domain.Uow.IActiveUnitOfWork.Filters">
            <summary>
            Gets data filter configurations for this unit of work.
            </summary>
        </member>
        <member name="P:Majid.Domain.Uow.IActiveUnitOfWork.IsDisposed">
            <summary>
            Is this UOW disposed?
            </summary>
        </member>
        <member name="M:Majid.Domain.Uow.IActiveUnitOfWork.SaveChanges">
            <summary>
            Saves all changes until now in this unit of work.
            This method may be called to apply changes whenever needed.
            Note that if this unit of work is transactional, saved changes are also rolled back if transaction is rolled back.
            No explicit call is needed to SaveChanges generally, 
            since all changes saved at end of a unit of work automatically.
            </summary>
        </member>
        <member name="M:Majid.Domain.Uow.IActiveUnitOfWork.SaveChangesAsync">
            <summary>
            Saves all changes until now in this unit of work.
            This method may be called to apply changes whenever needed.
            Note that if this unit of work is transactional, saved changes are also rolled back if transaction is rolled back.
            No explicit call is needed to SaveChanges generally, 
            since all changes saved at end of a unit of work automatically.
            </summary>
        </member>
        <member name="M:Majid.Domain.Uow.IActiveUnitOfWork.DisableFilter(System.String[])">
            <summary>
            Disables one or more data filters.
            Does nothing for a filter if it's already disabled. 
            Use this method in a using statement to re-enable filters if needed.
            </summary>
            <param name="filterNames">One or more filter names. <see cref="T:Majid.Domain.Uow.MajidDataFilters"/> for standard filters.</param>
            <returns>A <see cref="T:System.IDisposable"/> handle to take back the disable effect.</returns>
        </member>
        <member name="M:Majid.Domain.Uow.IActiveUnitOfWork.EnableFilter(System.String[])">
            <summary>
            Enables one or more data filters.
            Does nothing for a filter if it's already enabled.
            Use this method in a using statement to re-disable filters if needed.
            </summary>
            <param name="filterNames">One or more filter names. <see cref="T:Majid.Domain.Uow.MajidDataFilters"/> for standard filters.</param>
            <returns>A <see cref="T:System.IDisposable"/> handle to take back the enable effect.</returns>
        </member>
        <member name="M:Majid.Domain.Uow.IActiveUnitOfWork.IsFilterEnabled(System.String)">
            <summary>
            Checks if a filter is enabled or not.
            </summary>
            <param name="filterName">Name of the filter. <see cref="T:Majid.Domain.Uow.MajidDataFilters"/> for standard filters.</param>
        </member>
        <member name="M:Majid.Domain.Uow.IActiveUnitOfWork.SetFilterParameter(System.String,System.String,System.Object)">
            <summary>
            Sets (overrides) value of a filter parameter.
            </summary>
            <param name="filterName">Name of the filter</param>
            <param name="parameterName">Parameter's name</param>
            <param name="value">Value of the parameter to be set</param>
        </member>
        <member name="M:Majid.Domain.Uow.IActiveUnitOfWork.SetTenantId(System.Nullable{System.Int32})">
            <summary>
            Sets/Changes Tenant's Id for this UOW.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <returns>A disposable object to restore old TenantId value when you dispose it</returns>
        </member>
        <member name="M:Majid.Domain.Uow.IActiveUnitOfWork.SetTenantId(System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Sets/Changes Tenant's Id for this UOW.
            </summary>
            <param name="tenantId">The tenant id</param>
            <param name="switchMustHaveTenantEnableDisable">
            True to enable/disable <see cref="T:Majid.Domain.Entities.IMustHaveTenant"/> based on given tenantId.
            Enables <see cref="T:Majid.Domain.Entities.IMustHaveTenant"/> filter if tenantId is not null.
            Disables <see cref="T:Majid.Domain.Entities.IMustHaveTenant"/> filter if tenantId is null.
            This value is true for <see cref="M:Majid.Domain.Uow.IActiveUnitOfWork.SetTenantId(System.Nullable{System.Int32})"/> method.
            </param>
            <returns>A disposable object to restore old TenantId value when you dispose it</returns>
        </member>
        <member name="M:Majid.Domain.Uow.IActiveUnitOfWork.GetTenantId">
            <summary>
            Gets Tenant Id for this UOW.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Majid.Domain.Uow.IConnectionStringResolver">
            <summary>
            Used to get connection string when a database connection is needed.
            </summary>
        </member>
        <member name="M:Majid.Domain.Uow.IConnectionStringResolver.GetNameOrConnectionString(Majid.Domain.Uow.ConnectionStringResolveArgs)">
            <summary>
            Gets a connection string name (in config file) or a valid connection string.
            </summary>
            <param name="args">Arguments that can be used while resolving connection string.</param>
        </member>
        <member name="T:Majid.Domain.Uow.ICurrentUnitOfWorkProvider">
            <summary>
            Used to get/set current <see cref="T:Majid.Domain.Uow.IUnitOfWork"/>. 
            </summary>
        </member>
        <member name="P:Majid.Domain.Uow.ICurrentUnitOfWorkProvider.Current">
            <summary>
            Gets/sets current <see cref="T:Majid.Domain.Uow.IUnitOfWork"/>.
            Setting to null returns back to outer unit of work where possible.
            </summary>
        </member>
        <member name="T:Majid.Domain.Uow.InnerUnitOfWorkCompleteHandle">
            <summary>
            This handle is used for innet unit of work scopes.
            A inner unit of work scope actually uses outer unit of work scope
            and has no effect on <see cref="M:Majid.Domain.Uow.IUnitOfWorkCompleteHandle.Complete"/> call.
            But if it's not called, an exception is thrown at end of the UOW to rollback the UOW.
            </summary>
        </member>
        <member name="T:Majid.Domain.Uow.IUnitOfWork">
            <summary>
            Defines a unit of work.
            This interface is internally used by MAJID.
            Use <see cref="M:Majid.Domain.Uow.IUnitOfWorkManager.Begin"/> to start a new unit of work.
            </summary>
        </member>
        <member name="P:Majid.Domain.Uow.IUnitOfWork.Id">
            <summary>
            Unique id of this UOW.
            </summary>
        </member>
        <member name="P:Majid.Domain.Uow.IUnitOfWork.Outer">
            <summary>
            Reference to the outer UOW if exists.
            </summary>
        </member>
        <member name="M:Majid.Domain.Uow.IUnitOfWork.Begin(Majid.Domain.Uow.UnitOfWorkOptions)">
            <summary>
            Begins the unit of work with given options.
            </summary>
            <param name="options">Unit of work options</param>
        </member>
        <member name="T:Majid.Domain.Uow.IUnitOfWorkCompleteHandle">
            <summary>
            Used to complete a unit of work.
            This interface can not be injected or directly used.
            Use <see cref="T:Majid.Domain.Uow.IUnitOfWorkManager"/> instead.
            </summary>
        </member>
        <member name="M:Majid.Domain.Uow.IUnitOfWorkCompleteHandle.Complete">
            <summary>
            Completes this unit of work.
            It saves all changes and commit transaction if exists.
            </summary>
        </member>
        <member name="M:Majid.Domain.Uow.IUnitOfWorkCompleteHandle.CompleteAsync">
            <summary>
            Completes this unit of work.
            It saves all changes and commit transaction if exists.
            </summary>
        </member>
        <member name="T:Majid.Domain.Uow.IUnitOfWorkDefaultOptions">
            <summary>
            Used to get/set default options for a unit of work.
            </summary>
        </member>
        <member name="P:Majid.Domain.Uow.IUnitOfWorkDefaultOptions.Scope">
            <summary>
            Scope option.
            </summary>
        </member>
        <member name="P:Majid.Domain.Uow.IUnitOfWorkDefaultOptions.IsTransactional">
            <summary>
            Should unit of works be transactional.
            Default: true.
            </summary>
        </member>
        <member name="P:Majid.Domain.Uow.IUnitOfWorkDefaultOptions.IsTransactionScopeAvailable">
            <summary>
            A boolean value indicates that System.Transactions.TransactionScope is available for current application.
            Default: true.
            </summary>
        </member>
        <member name="P:Majid.Domain.Uow.IUnitOfWorkDefaultOptions.Timeout">
            <summary>
            Gets/sets a timeout value for unit of works.
            </summary>
        </member>
        <member name="P:Majid.Domain.Uow.IUnitOfWorkDefaultOptions.IsolationLevel">
            <summary>
            Gets/sets isolation level of transaction.
            This is used if <see cref="P:Majid.Domain.Uow.IUnitOfWorkDefaultOptions.IsTransactional"/> is true.
            </summary>
        </member>
        <member name="P:Majid.Domain.Uow.IUnitOfWorkDefaultOptions.Filters">
            <summary>
            Gets list of all data filter configurations.
            </summary>
        </member>
        <member name="P:Majid.Domain.Uow.IUnitOfWorkDefaultOptions.ConventionalUowSelectors">
            <summary>
            A list of selectors to determine conventional Unit Of Work classes.
            </summary>
        </member>
        <member name="M:Majid.Domain.Uow.IUnitOfWorkDefaultOptions.RegisterFilter(System.String,System.Boolean)">
            <summary>
            Registers a data filter to unit of work system.
            </summary>
            <param name="filterName">Name of the filter.</param>
            <param name="isEnabledByDefault">Is filter enabled by default.</param>
        </member>
        <member name="M:Majid.Domain.Uow.IUnitOfWorkDefaultOptions.OverrideFilter(System.String,System.Boolean)">
            <summary>
            Overrides a data filter definition.
            </summary>
            <param name="filterName">Name of the filter.</param>
            <param name="isEnabledByDefault">Is filter enabled by default.</param>
        </member>
        <member name="T:Majid.Domain.Uow.IUnitOfWorkManager">
            <summary>
            Unit of work manager.
            Used to begin and control a unit of work.
            </summary>
        </member>
        <member name="P:Majid.Domain.Uow.IUnitOfWorkManager.Current">
            <summary>
            Gets currently active unit of work (or null if not exists).
            </summary>
        </member>
        <member name="M:Majid.Domain.Uow.IUnitOfWorkManager.Begin">
            <summary>
            Begins a new unit of work.
            </summary>
            <returns>A handle to be able to complete the unit of work</returns>
        </member>
        <member name="M:Majid.Domain.Uow.IUnitOfWorkManager.Begin(System.Transactions.TransactionScopeOption)">
            <summary>
            Begins a new unit of work.
            </summary>
            <returns>A handle to be able to complete the unit of work</returns>
        </member>
        <member name="M:Majid.Domain.Uow.IUnitOfWorkManager.Begin(Majid.Domain.Uow.UnitOfWorkOptions)">
            <summary>
            Begins a new unit of work.
            </summary>
            <returns>A handle to be able to complete the unit of work</returns>
        </member>
        <member name="T:Majid.Domain.Uow.MajidDataFilters">
            <summary>
            Standard filters of MAJID.
            </summary>
        </member>
        <member name="F:Majid.Domain.Uow.MajidDataFilters.SoftDelete">
            <summary>
            "SoftDelete".
            Soft delete filter.
            Prevents getting deleted data from database.
            See <see cref="T:Majid.Domain.Entities.ISoftDelete"/> interface.
            </summary>
        </member>
        <member name="F:Majid.Domain.Uow.MajidDataFilters.MustHaveTenant">
            <summary>
            "MustHaveTenant".
            Tenant filter to prevent getting data that is
            not belong to current tenant.
            </summary>
        </member>
        <member name="F:Majid.Domain.Uow.MajidDataFilters.MayHaveTenant">
            <summary>
            "MayHaveTenant".
            Tenant filter to prevent getting data that is
            not belong to current tenant.
            </summary>
        </member>
        <member name="T:Majid.Domain.Uow.MajidDataFilters.Parameters">
            <summary>
            Standard parameters of MAJID.
            </summary>
        </member>
        <member name="F:Majid.Domain.Uow.MajidDataFilters.Parameters.TenantId">
            <summary>
            "tenantId".
            </summary>
        </member>
        <member name="M:Majid.Domain.Uow.MajidDbConcurrencyException.#ctor">
            <summary>
            Creates a new <see cref="T:Majid.Domain.Uow.MajidDbConcurrencyException"/> object.
            </summary>
        </member>
        <member name="M:Majid.Domain.Uow.MajidDbConcurrencyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new <see cref="T:Majid.MajidException"/> object.
            </summary>
        </member>
        <member name="M:Majid.Domain.Uow.MajidDbConcurrencyException.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Majid.Domain.Uow.MajidDbConcurrencyException"/> object.
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:Majid.Domain.Uow.MajidDbConcurrencyException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new <see cref="T:Majid.Domain.Uow.MajidDbConcurrencyException"/> object.
            </summary>
            <param name="message">Exception message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="T:Majid.Domain.Uow.NullUnitOfWork">
            <summary>
            Null implementation of unit of work.
            It's used if no component registered for <see cref="T:Majid.Domain.Uow.IUnitOfWork"/>.
            This ensures working MAJID without a database.
            </summary>
        </member>
        <member name="T:Majid.Domain.Uow.UnitOfWorkAttribute">
            <summary>
            This attribute is used to indicate that declaring method is atomic and should be considered as a unit of work.
            A method that has this attribute is intercepted, a database connection is opened and a transaction is started before call the method.
            At the end of method call, transaction is committed and all changes applied to the database if there is no exception,
            otherwise it's rolled back. 
            </summary>
            <remarks>
            This attribute has no effect if there is already a unit of work before calling this method, if so, it uses the same transaction.
            </remarks>
        </member>
        <member name="P:Majid.Domain.Uow.UnitOfWorkAttribute.Scope">
            <summary>
            Scope option.
            </summary>
        </member>
        <member name="P:Majid.Domain.Uow.UnitOfWorkAttribute.IsTransactional">
            <summary>
            Is this UOW transactional?
            Uses default value if not supplied.
            </summary>
        </member>
        <member name="P:Majid.Domain.Uow.UnitOfWorkAttribute.Timeout">
            <summary>
            Timeout of UOW As milliseconds.
            Uses default value if not supplied.
            </summary>
        </member>
        <member name="P:Majid.Domain.Uow.UnitOfWorkAttribute.IsolationLevel">
            <summary>
            If this UOW is transactional, this option indicated the isolation level of the transaction.
            Uses default value if not supplied.
            </summary>
        </member>
        <member name="P:Majid.Domain.Uow.UnitOfWorkAttribute.IsDisabled">
            <summary>
            Used to prevent starting a unit of work for the method.
            If there is already a started unit of work, this property is ignored.
            Default: false.
            </summary>
        </member>
        <member name="M:Majid.Domain.Uow.UnitOfWorkAttribute.#ctor">
            <summary>
            Creates a new UnitOfWorkAttribute object.
            </summary>
        </member>
        <member name="M:Majid.Domain.Uow.UnitOfWorkAttribute.#ctor(System.Boolean)">
            <summary>
            Creates a new <see cref="T:Majid.Domain.Uow.UnitOfWorkAttribute"/> object.
            </summary>
            <param name="isTransactional">
            Is this unit of work will be transactional?
            </param>
        </member>
        <member name="M:Majid.Domain.Uow.UnitOfWorkAttribute.#ctor(System.Int32)">
            <summary>
            Creates a new <see cref="T:Majid.Domain.Uow.UnitOfWorkAttribute"/> object.
            </summary>
            <param name="timeout">As milliseconds</param>
        </member>
        <member name="M:Majid.Domain.Uow.UnitOfWorkAttribute.#ctor(System.Boolean,System.Int32)">
            <summary>
            Creates a new <see cref="T:Majid.Domain.Uow.UnitOfWorkAttribute"/> object.
            </summary>
            <param name="isTransactional">Is this unit of work will be transactional?</param>
            <param name="timeout">As milliseconds</param>
        </member>
        <member name="M:Majid.Domain.Uow.UnitOfWorkAttribute.#ctor(System.Transactions.IsolationLevel)">
            <summary>
            Creates a new <see cref="T:Majid.Domain.Uow.UnitOfWorkAttribute"/> object.
            <see cref="P:Majid.Domain.Uow.UnitOfWorkAttribute.IsTransactional"/> is automatically set to true.
            </summary>
            <param name="isolationLevel">Transaction isolation level</param>
        </member>
        <member name="M:Majid.Domain.Uow.UnitOfWorkAttribute.#ctor(System.Transactions.IsolationLevel,System.Int32)">
            <summary>
            Creates a new <see cref="T:Majid.Domain.Uow.UnitOfWorkAttribute"/> object.
            <see cref="P:Majid.Domain.Uow.UnitOfWorkAttribute.IsTransactional"/> is automatically set to true.
            </summary>
            <param name="isolationLevel">Transaction isolation level</param>
            <param name="timeout">Transaction  timeout as milliseconds</param>
        </member>
        <member name="M:Majid.Domain.Uow.UnitOfWorkAttribute.#ctor(System.Transactions.TransactionScopeOption)">
            <summary>
            Creates a new <see cref="T:Majid.Domain.Uow.UnitOfWorkAttribute"/> object.
            <see cref="P:Majid.Domain.Uow.UnitOfWorkAttribute.IsTransactional"/> is automatically set to true.
            </summary>
            <param name="scope">Transaction scope</param>
        </member>
        <member name="M:Majid.Domain.Uow.UnitOfWorkAttribute.#ctor(System.Transactions.TransactionScopeOption,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Majid.Domain.Uow.UnitOfWorkAttribute"/> object.
            </summary>
            <param name="scope">Transaction scope</param>
            <param name="isTransactional">
            Is this unit of work will be transactional?
            </param>
        </member>
        <member name="M:Majid.Domain.Uow.UnitOfWorkAttribute.#ctor(System.Transactions.TransactionScopeOption,System.Int32)">
            <summary>
            Creates a new <see cref="T:Majid.Domain.Uow.UnitOfWorkAttribute"/> object.
            <see cref="P:Majid.Domain.Uow.UnitOfWorkAttribute.IsTransactional"/> is automatically set to true.
            </summary>
            <param name="scope">Transaction scope</param>
            <param name="timeout">Transaction  timeout as milliseconds</param>
        </member>
        <member name="T:Majid.Domain.Uow.UnitOfWorkBase">
            <summary>
            Base for all Unit Of Work classes.
            </summary>
        </member>
        <member name="E:Majid.Domain.Uow.UnitOfWorkBase.Completed">
            <inheritdoc/>
        </member>
        <member name="E:Majid.Domain.Uow.UnitOfWorkBase.Failed">
            <inheritdoc/>
        </member>
        <member name="E:Majid.Domain.Uow.UnitOfWorkBase.Disposed">
            <inheritdoc/>
        </member>
        <member name="P:Majid.Domain.Uow.UnitOfWorkBase.Options">
            <inheritdoc/>
        </member>
        <member name="P:Majid.Domain.Uow.UnitOfWorkBase.Filters">
            <inheritdoc/>
        </member>
        <member name="P:Majid.Domain.Uow.UnitOfWorkBase.DefaultOptions">
            <summary>
            Gets default UOW options.
            </summary>
        </member>
        <member name="P:Majid.Domain.Uow.UnitOfWorkBase.ConnectionStringResolver">
            <summary>
            Gets the connection string resolver.
            </summary>
        </member>
        <member name="P:Majid.Domain.Uow.UnitOfWorkBase.IsDisposed">
            <summary>
            Gets a value indicates that this unit of work is disposed or not.
            </summary>
        </member>
        <member name="P:Majid.Domain.Uow.UnitOfWorkBase.MajidSession">
            <summary>
            Reference to current MAJID session.
            </summary>
        </member>
        <member name="F:Majid.Domain.Uow.UnitOfWorkBase._isBeginCalledBefore">
            <summary>
            Is <see cref="M:Majid.Domain.Uow.UnitOfWorkBase.Begin(Majid.Domain.Uow.UnitOfWorkOptions)"/> method called before?
            </summary>
        </member>
        <member name="F:Majid.Domain.Uow.UnitOfWorkBase._isCompleteCalledBefore">
            <summary>
            Is <see cref="M:Majid.Domain.Uow.UnitOfWorkBase.Complete"/> method called before?
            </summary>
        </member>
        <member name="F:Majid.Domain.Uow.UnitOfWorkBase._succeed">
            <summary>
            Is this unit of work successfully completed.
            </summary>
        </member>
        <member name="F:Majid.Domain.Uow.UnitOfWorkBase._exception">
            <summary>
            A reference to the exception if this unit of work failed.
            </summary>
        </member>
        <member name="M:Majid.Domain.Uow.UnitOfWorkBase.#ctor(Majid.Domain.Uow.IConnectionStringResolver,Majid.Domain.Uow.IUnitOfWorkDefaultOptions,Majid.Domain.Uow.IUnitOfWorkFilterExecuter)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Majid.Domain.Uow.UnitOfWorkBase.Begin(Majid.Domain.Uow.UnitOfWorkOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Domain.Uow.UnitOfWorkBase.SaveChanges">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Domain.Uow.UnitOfWorkBase.SaveChangesAsync">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Domain.Uow.UnitOfWorkBase.DisableFilter(System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Domain.Uow.UnitOfWorkBase.EnableFilter(System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Domain.Uow.UnitOfWorkBase.IsFilterEnabled(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Domain.Uow.UnitOfWorkBase.SetFilterParameter(System.String,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Domain.Uow.UnitOfWorkBase.Complete">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Domain.Uow.UnitOfWorkBase.CompleteAsync">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Domain.Uow.UnitOfWorkBase.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Domain.Uow.UnitOfWorkBase.BeginUow">
            <summary>
            Can be implemented by derived classes to start UOW.
            </summary>
        </member>
        <member name="M:Majid.Domain.Uow.UnitOfWorkBase.CompleteUow">
            <summary>
            Should be implemented by derived classes to complete UOW.
            </summary>
        </member>
        <member name="M:Majid.Domain.Uow.UnitOfWorkBase.CompleteUowAsync">
            <summary>
            Should be implemented by derived classes to complete UOW.
            </summary>
        </member>
        <member name="M:Majid.Domain.Uow.UnitOfWorkBase.DisposeUow">
            <summary>
            Should be implemented by derived classes to dispose UOW.
            </summary>
        </member>
        <member name="M:Majid.Domain.Uow.UnitOfWorkBase.OnCompleted">
            <summary>
            Called to trigger <see cref="E:Majid.Domain.Uow.UnitOfWorkBase.Completed"/> event.
            </summary>
        </member>
        <member name="M:Majid.Domain.Uow.UnitOfWorkBase.OnFailed(System.Exception)">
            <summary>
            Called to trigger <see cref="E:Majid.Domain.Uow.UnitOfWorkBase.Failed"/> event.
            </summary>
            <param name="exception">Exception that cause failure</param>
        </member>
        <member name="M:Majid.Domain.Uow.UnitOfWorkBase.OnDisposed">
            <summary>
            Called to trigger <see cref="E:Majid.Domain.Uow.UnitOfWorkBase.Disposed"/> event.
            </summary>
        </member>
        <member name="P:Majid.Domain.Uow.UnitOfWorkDefaultOptions.IsTransactional">
            <inheritdoc/>
        </member>
        <member name="P:Majid.Domain.Uow.UnitOfWorkDefaultOptions.Timeout">
            <inheritdoc/>
        </member>
        <member name="P:Majid.Domain.Uow.UnitOfWorkDefaultOptions.IsTransactionScopeAvailable">
            <inheritdoc/>
        </member>
        <member name="P:Majid.Domain.Uow.UnitOfWorkDefaultOptions.IsolationLevel">
            <inheritdoc/>
        </member>
        <member name="T:Majid.Domain.Uow.UnitOfWorkFailedEventArgs">
            <summary>
            Used as event arguments on <see cref="E:Majid.Domain.Uow.IActiveUnitOfWork.Failed"/> event.
            </summary>
        </member>
        <member name="P:Majid.Domain.Uow.UnitOfWorkFailedEventArgs.Exception">
            <summary>
            Exception that caused failure.
            </summary>
        </member>
        <member name="M:Majid.Domain.Uow.UnitOfWorkFailedEventArgs.#ctor(System.Exception)">
            <summary>
            Creates a new <see cref="T:Majid.Domain.Uow.UnitOfWorkFailedEventArgs"/> object.
            </summary>
            <param name="exception">Exception that caused failure</param>
        </member>
        <member name="T:Majid.Domain.Uow.UnitOfWorkHelper">
            <summary>
            A helper class to simplify unit of work process.
            </summary>
        </member>
        <member name="M:Majid.Domain.Uow.UnitOfWorkHelper.HasUnitOfWorkAttribute(System.Reflection.MemberInfo)">
            <summary>
            Returns true if given method has UnitOfWorkAttribute attribute.
            </summary>
            <param name="memberInfo">Method info to check</param>
        </member>
        <member name="T:Majid.Domain.Uow.UnitOfWorkInterceptor">
            <summary>
            This interceptor is used to manage database connection and transactions.
            </summary>
        </member>
        <member name="M:Majid.Domain.Uow.UnitOfWorkInterceptor.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            Intercepts a method.
            </summary>
            <param name="invocation">Method invocation arguments</param>
        </member>
        <member name="T:Majid.Domain.Uow.UnitOfWorkManager">
            <summary>
            Unit of work manager.
            </summary>
        </member>
        <member name="T:Majid.Domain.Uow.UnitOfWorkOptions">
            <summary>
            Unit of work options.
            </summary>
        </member>
        <member name="P:Majid.Domain.Uow.UnitOfWorkOptions.Scope">
            <summary>
            Scope option.
            </summary>
        </member>
        <member name="P:Majid.Domain.Uow.UnitOfWorkOptions.IsTransactional">
            <summary>
            Is this UOW transactional?
            Uses default value if not supplied.
            </summary>
        </member>
        <member name="P:Majid.Domain.Uow.UnitOfWorkOptions.Timeout">
            <summary>
            Timeout of UOW As milliseconds.
            Uses default value if not supplied.
            </summary>
        </member>
        <member name="P:Majid.Domain.Uow.UnitOfWorkOptions.IsolationLevel">
            <summary>
            If this UOW is transactional, this option indicated the isolation level of the transaction.
            Uses default value if not supplied.
            </summary>
        </member>
        <member name="P:Majid.Domain.Uow.UnitOfWorkOptions.AsyncFlowOption">
            <summary>
            This option should be set to <see cref="F:System.Transactions.TransactionScopeAsyncFlowOption.Enabled"/>
            if unit of work is used in an async scope.
            </summary>
        </member>
        <member name="P:Majid.Domain.Uow.UnitOfWorkOptions.FilterOverrides">
            <summary>
            Can be used to enable/disable some filters. 
            </summary>
        </member>
        <member name="M:Majid.Domain.Uow.UnitOfWorkOptions.#ctor">
            <summary>
            Creates a new <see cref="T:Majid.Domain.Uow.UnitOfWorkOptions"/> object.
            </summary>
        </member>
        <member name="T:Majid.Domain.Uow.UnitOfWorkRegistrar">
            <summary>
            This class is used to register interceptor for needed classes for Unit Of Work mechanism.
            </summary>
        </member>
        <member name="M:Majid.Domain.Uow.UnitOfWorkRegistrar.Initialize(Majid.Dependency.IIocManager)">
            <summary>
            Initializes the registerer.
            </summary>
            <param name="iocManager">IOC manager</param>
        </member>
        <member name="T:Majid.Domain.Values.ValueObject`1">
            <summary>
            Base class for value objects.
            </summary>
            <typeparam name="TValueObject">The type of the value object.</typeparam>
        </member>
        <member name="F:Majid.EntityHistory.EntityChange.MaxEntityIdLength">
            <summary>
            Maximum length of <see cref="P:Majid.EntityHistory.EntityChange.EntityId"/> property.
            Value: 48.
            </summary>
        </member>
        <member name="F:Majid.EntityHistory.EntityChange.MaxEntityTypeFullNameLength">
            <summary>
            Maximum length of <see cref="P:Majid.EntityHistory.EntityChange.EntityTypeFullName"/> property.
            Value: 192.
            </summary>
        </member>
        <member name="P:Majid.EntityHistory.EntityChange.ChangeTime">
            <summary>
            ChangeTime.
            </summary>
        </member>
        <member name="P:Majid.EntityHistory.EntityChange.ChangeType">
            <summary>
            ChangeType.
            </summary>
        </member>
        <member name="P:Majid.EntityHistory.EntityChange.EntityChangeSetId">
            <summary>
            Gets/sets change set id, used to group entity changes.
            </summary>
        </member>
        <member name="P:Majid.EntityHistory.EntityChange.EntityId">
            <summary>
            Gets/sets primary key of the entity.
            </summary>
        </member>
        <member name="P:Majid.EntityHistory.EntityChange.EntityTypeFullName">
            <summary>
            FullName of the entity type.
            </summary>
        </member>
        <member name="P:Majid.EntityHistory.EntityChange.TenantId">
            <summary>
            TenantId.
            </summary>
        </member>
        <member name="P:Majid.EntityHistory.EntityChange.PropertyChanges">
            <summary>
            PropertyChanges.
            </summary>
        </member>
        <member name="F:Majid.EntityHistory.EntityChangeSet.MaxBrowserInfoLength">
            <summary>
            Maximum length of <see cref="P:Majid.EntityHistory.EntityChangeSet.BrowserInfo"/> property.
            </summary>
        </member>
        <member name="F:Majid.EntityHistory.EntityChangeSet.MaxClientIpAddressLength">
            <summary>
            Maximum length of <see cref="P:Majid.EntityHistory.EntityChangeSet.ClientIpAddress"/> property.
            </summary>
        </member>
        <member name="F:Majid.EntityHistory.EntityChangeSet.MaxClientNameLength">
            <summary>
            Maximum length of <see cref="P:Majid.EntityHistory.EntityChangeSet.ClientName"/> property.
            </summary>
        </member>
        <member name="F:Majid.EntityHistory.EntityChangeSet.MaxReasonLength">
            <summary>
            Maximum length of <see cref="P:Majid.EntityHistory.EntityChangeSet.Reason"/> property.
            </summary>
        </member>
        <member name="P:Majid.EntityHistory.EntityChangeSet.BrowserInfo">
            <summary>
            Browser information if this entity is changed in a web request.
            </summary>
        </member>
        <member name="P:Majid.EntityHistory.EntityChangeSet.ClientIpAddress">
            <summary>
            IP address of the client.
            </summary>
        </member>
        <member name="P:Majid.EntityHistory.EntityChangeSet.ClientName">
            <summary>
            Name (generally computer name) of the client.
            </summary>
        </member>
        <member name="P:Majid.EntityHistory.EntityChangeSet.CreationTime">
            <summary>
            Creation time of this entity.
            </summary>
        </member>
        <member name="P:Majid.EntityHistory.EntityChangeSet.ExtensionData">
            <summary>
            A JSON formatted string to extend the containing object.
            </summary>
        </member>
        <member name="P:Majid.EntityHistory.EntityChangeSet.ImpersonatorTenantId">
            <summary>
            ImpersonatorTenantId.
            </summary>
        </member>
        <member name="P:Majid.EntityHistory.EntityChangeSet.ImpersonatorUserId">
            <summary>
            ImpersonatorUserId.
            </summary>
        </member>
        <member name="P:Majid.EntityHistory.EntityChangeSet.Reason">
            <summary>
            Reason for this change set.
            </summary>
        </member>
        <member name="P:Majid.EntityHistory.EntityChangeSet.TenantId">
            <summary>
            TenantId.
            </summary>
        </member>
        <member name="P:Majid.EntityHistory.EntityChangeSet.UserId">
            <summary>
            UserId.
            </summary>
        </member>
        <member name="P:Majid.EntityHistory.EntityChangeSet.EntityChanges">
            <summary>
            Entity changes grouped in this change set.
            </summary>
        </member>
        <member name="F:Majid.EntityHistory.EntityPropertyChange.MaxPropertyNameLength">
            <summary>
            Maximum length of <see cref="P:Majid.EntityHistory.EntityPropertyChange.PropertyName"/> property.
            Value: 96.
            </summary>
        </member>
        <member name="F:Majid.EntityHistory.EntityPropertyChange.MaxValueLength">
            <summary>
            Maximum length of <see cref="P:Majid.EntityHistory.EntityPropertyChange.NewValue"/> and <see cref="P:Majid.EntityHistory.EntityPropertyChange.OriginalValue"/> properties.
            Value: 512.
            </summary>
        </member>
        <member name="F:Majid.EntityHistory.EntityPropertyChange.MaxPropertyTypeFullNameLength">
            <summary>
            Maximum length of <see cref="P:Majid.EntityHistory.EntityPropertyChange.PropertyTypeFullName"/> property.
            Value: 512.
            </summary>
        </member>
        <member name="P:Majid.EntityHistory.EntityPropertyChange.EntityChangeId">
            <summary>
            EntityChangeId.
            </summary>
        </member>
        <member name="P:Majid.EntityHistory.EntityPropertyChange.NewValue">
            <summary>
            NewValue.
            </summary>
        </member>
        <member name="P:Majid.EntityHistory.EntityPropertyChange.OriginalValue">
            <summary>
            OriginalValue.
            </summary>
        </member>
        <member name="P:Majid.EntityHistory.EntityPropertyChange.PropertyName">
            <summary>
            PropertyName.
            </summary>
        </member>
        <member name="P:Majid.EntityHistory.EntityPropertyChange.PropertyTypeFullName">
            <summary>
            Type of the JSON serialized <see cref="P:Majid.EntityHistory.EntityPropertyChange.NewValue"/> and <see cref="P:Majid.EntityHistory.EntityPropertyChange.OriginalValue"/>.
            It's the FullName of the type.
            </summary>
        </member>
        <member name="P:Majid.EntityHistory.EntityPropertyChange.TenantId">
            <summary>
            TenantId.
            </summary>
        </member>
        <member name="T:Majid.EntityHistory.IEntityChangeSetReasonProvider">
            <summary>
            Defines some session information that can be useful for applications.
            </summary>
        </member>
        <member name="P:Majid.EntityHistory.IEntityChangeSetReasonProvider.Reason">
            <summary>
            Gets current Reason or null.
            </summary>
        </member>
        <member name="M:Majid.EntityHistory.IEntityChangeSetReasonProvider.Use(System.String)">
            <summary>
            Used to change <see cref="P:Majid.EntityHistory.IEntityChangeSetReasonProvider.Reason"/> for a limited scope.
            </summary>
            <param name="reason"></param>
            <returns></returns>
        </member>
        <member name="T:Majid.EntityHistory.IEntityHistoryConfiguration">
            <summary>
            Used to configure entity history.
            </summary>
        </member>
        <member name="P:Majid.EntityHistory.IEntityHistoryConfiguration.IsEnabled">
            <summary>
            Used to enable/disable entity history system.
            Default: true. Set false to completely disable it.
            </summary>
        </member>
        <member name="P:Majid.EntityHistory.IEntityHistoryConfiguration.IsEnabledForAnonymousUsers">
            <summary>
            Set true to enable saving entity history if current user is not logged in.
            Default: false.
            </summary>
        </member>
        <member name="P:Majid.EntityHistory.IEntityHistoryConfiguration.Selectors">
            <summary>
            List of selectors to select classes/interfaces which should be tracked as default.
            </summary>
        </member>
        <member name="P:Majid.EntityHistory.IEntityHistoryConfiguration.IgnoredTypes">
            <summary>
            Ignored types for serialization on entity history tracking.
            </summary>
        </member>
        <member name="M:Majid.EntityHistory.IEntityHistorySelectorList.RemoveByName(System.String)">
            <summary>
            Removes a selector by name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Majid.EntityHistory.IEntityHistoryStore">
            <summary>
            This interface should be implemented by vendors to
            make entity history working.
            </summary>
        </member>
        <member name="M:Majid.EntityHistory.IEntityHistoryStore.SaveAsync(Majid.EntityHistory.EntityChangeSet)">
            <summary>
            Should save entity change set to a persistent store.
            </summary>
            <param name="entityChangeSet">Entity change set</param>
        </member>
        <member name="T:Majid.EntityHistory.NullEntityChangeSetReasonProvider">
            <summary>
            Implements null object pattern for <see cref="T:Majid.EntityHistory.IEntityChangeSetReasonProvider"/>.
            </summary>
        </member>
        <member name="P:Majid.EntityHistory.NullEntityChangeSetReasonProvider.Instance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="P:Majid.EntityHistory.NullEntityChangeSetReasonProvider.Reason">
            <inheritdoc/>
        </member>
        <member name="T:Majid.EntityHistory.UseCaseAttribute">
            <summary>
            This attribute is used to set the description for a single method or
            all methods of a class or interface.
            </summary>
        </member>
        <member name="T:Majid.Events.Bus.Entities.EntityChangedEventData`1">
            <summary>
            Used to pass data for an event when an entity (<see cref="T:Majid.Domain.Entities.IEntity"/>) is changed (created, updated or deleted).
            See <see cref="T:Majid.Events.Bus.Entities.EntityCreatedEventData`1"/>, <see cref="T:Majid.Events.Bus.Entities.EntityDeletedEventData`1"/> and <see cref="T:Majid.Events.Bus.Entities.EntityUpdatedEventData`1"/> classes.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="M:Majid.Events.Bus.Entities.EntityChangedEventData`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
            <param name="entity">Changed entity in this event</param>
        </member>
        <member name="T:Majid.Events.Bus.Entities.EntityChangeEventHelper">
            <summary>
            Used to trigger entity change events.
            </summary>
        </member>
        <member name="T:Majid.Events.Bus.Entities.EntityChangingEventData`1">
            <summary>
            Used to pass data for an event when an entity (<see cref="T:Majid.Domain.Entities.IEntity"/>) is being changed (creating, updating or deleting).
            See <see cref="T:Majid.Events.Bus.Entities.EntityCreatingEventData`1"/>, <see cref="T:Majid.Events.Bus.Entities.EntityDeletingEventData`1"/> and <see cref="T:Majid.Events.Bus.Entities.EntityUpdatingEventData`1"/> classes.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="M:Majid.Events.Bus.Entities.EntityChangingEventData`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
            <param name="entity">Changing entity in this event</param>
        </member>
        <member name="T:Majid.Events.Bus.Entities.EntityCreatedEventData`1">
            <summary>
            This type of event can be used to notify just after creation of an Entity.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="M:Majid.Events.Bus.Entities.EntityCreatedEventData`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
            <param name="entity">The entity which is created</param>
        </member>
        <member name="T:Majid.Events.Bus.Entities.EntityCreatingEventData`1">
            <summary>
            This type of event is used to notify just before creation of an Entity.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="M:Majid.Events.Bus.Entities.EntityCreatingEventData`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
            <param name="entity">The entity which is being created</param>
        </member>
        <member name="T:Majid.Events.Bus.Entities.EntityDeletedEventData`1">
            <summary>
            This type of event can be used to notify just after deletion of an Entity.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="M:Majid.Events.Bus.Entities.EntityDeletedEventData`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
            <param name="entity">The entity which is deleted</param>
        </member>
        <member name="T:Majid.Events.Bus.Entities.EntityDeletingEventData`1">
            <summary>
            This type of event is used to notify just before deletion of an Entity.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="M:Majid.Events.Bus.Entities.EntityDeletingEventData`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
            <param name="entity">The entity which is being deleted</param>
        </member>
        <member name="T:Majid.Events.Bus.Entities.EntityEventData`1">
            <summary>
            Used to pass data for an event that is related to with an <see cref="T:Majid.Domain.Entities.IEntity"/> object.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="P:Majid.Events.Bus.Entities.EntityEventData`1.Entity">
            <summary>
            Related entity with this event.
            </summary>
        </member>
        <member name="M:Majid.Events.Bus.Entities.EntityEventData`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
            <param name="entity">Related entity with this event</param>
        </member>
        <member name="T:Majid.Events.Bus.Entities.EntityUpdatedEventData`1">
            <summary>
            This type of event can be used to notify just after update of an Entity.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="M:Majid.Events.Bus.Entities.EntityUpdatedEventData`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
            <param name="entity">The entity which is updated</param>
        </member>
        <member name="T:Majid.Events.Bus.Entities.EntityUpdatingEventData`1">
            <summary>
            This type of event is used to notify just before update of an Entity.
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="M:Majid.Events.Bus.Entities.EntityUpdatingEventData`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
            <param name="entity">The entity which is being updated</param>
        </member>
        <member name="T:Majid.Events.Bus.Entities.IEntityChangeEventHelper">
            <summary>
            Used to trigger entity change events.
            </summary>
        </member>
        <member name="T:Majid.Events.Bus.Entities.NullEntityChangeEventHelper">
            <summary>
            Null-object implementation of <see cref="T:Majid.Events.Bus.Entities.IEntityChangeEventHelper"/>.
            </summary>
        </member>
        <member name="P:Majid.Events.Bus.Entities.NullEntityChangeEventHelper.Instance">
            <summary>
            Gets single instance of <see cref="T:Majid.Events.Bus.Entities.NullEntityChangeEventHelper"/> class.
            </summary>
        </member>
        <member name="T:Majid.Events.Bus.EventBus">
            <summary>
            Implements EventBus as Singleton pattern.
            </summary>
        </member>
        <member name="P:Majid.Events.Bus.EventBus.Default">
            <summary>
            Gets the default <see cref="T:Majid.Events.Bus.EventBus"/> instance.
            </summary>
        </member>
        <member name="P:Majid.Events.Bus.EventBus.Logger">
            <summary>
            Reference to the Logger.
            </summary>
        </member>
        <member name="F:Majid.Events.Bus.EventBus._handlerFactories">
            <summary>
            All registered handler factories.
            Key: Type of the event
            Value: List of handler factories
            </summary>
        </member>
        <member name="M:Majid.Events.Bus.EventBus.#ctor">
            <summary>
            Creates a new <see cref="T:Majid.Events.Bus.EventBus"/> instance.
            Instead of creating a new instace, you can use <see cref="P:Majid.Events.Bus.EventBus.Default"/> to use Global <see cref="T:Majid.Events.Bus.EventBus"/>.
            </summary>
        </member>
        <member name="M:Majid.Events.Bus.EventBus.Register``1(System.Action{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.EventBus.AsyncRegister``1(System.Func{``0,System.Threading.Tasks.Task})">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.EventBus.Register``1(Majid.Events.Bus.Handlers.IEventHandler{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.EventBus.AsyncRegister``1(Majid.Events.Bus.Handlers.IAsyncEventHandler{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.EventBus.Register``2">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.EventBus.Register(System.Type,Majid.Events.Bus.Handlers.IEventHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.EventBus.Register``1(Majid.Events.Bus.Factories.IEventHandlerFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.EventBus.Register(System.Type,Majid.Events.Bus.Factories.IEventHandlerFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.EventBus.Unregister``1(System.Action{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.EventBus.AsyncUnregister``1(System.Func{``0,System.Threading.Tasks.Task})">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.EventBus.Unregister``1(Majid.Events.Bus.Handlers.IEventHandler{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.EventBus.AsyncUnregister``1(Majid.Events.Bus.Handlers.IAsyncEventHandler{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.EventBus.Unregister(System.Type,Majid.Events.Bus.Handlers.IEventHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.EventBus.Unregister``1(Majid.Events.Bus.Factories.IEventHandlerFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.EventBus.Unregister(System.Type,Majid.Events.Bus.Factories.IEventHandlerFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.EventBus.UnregisterAll``1">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.EventBus.UnregisterAll(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.EventBus.Trigger``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.EventBus.Trigger``1(System.Object,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.EventBus.Trigger(System.Type,Majid.Events.Bus.IEventData)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.EventBus.Trigger(System.Type,System.Object,Majid.Events.Bus.IEventData)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.EventBus.TriggerAsync``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.EventBus.TriggerAsync``1(System.Object,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.EventBus.TriggerAsync(System.Type,Majid.Events.Bus.IEventData)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.EventBus.TriggerAsync(System.Type,System.Object,Majid.Events.Bus.IEventData)">
            <inheritdoc/>
        </member>
        <member name="T:Majid.Events.Bus.EventBusInstaller">
            <summary>
            Installs event bus system and registers all handlers automatically.
            </summary>
        </member>
        <member name="T:Majid.Events.Bus.EventData">
            <summary>
            Implements <see cref="T:Majid.Events.Bus.IEventData"/> and provides a base for event data classes.
            </summary>
        </member>
        <member name="P:Majid.Events.Bus.EventData.EventTime">
            <summary>
            The time when the event occurred.
            </summary>
        </member>
        <member name="P:Majid.Events.Bus.EventData.EventSource">
            <summary>
            The object which triggers the event (optional).
            </summary>
        </member>
        <member name="M:Majid.Events.Bus.EventData.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Majid.Events.Bus.Exceptions.ExceptionData">
            <summary>
            This type of events can be used to notify for an exception.
            </summary>
        </member>
        <member name="P:Majid.Events.Bus.Exceptions.ExceptionData.Exception">
            <summary>
            Exception object.
            </summary>
        </member>
        <member name="M:Majid.Events.Bus.Exceptions.ExceptionData.#ctor(System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="exception">Exception object</param>
        </member>
        <member name="T:Majid.Events.Bus.Exceptions.MajidHandledExceptionData">
            <summary>
            This type of events are used to notify for exceptions handled by MAJID infrastructure.
            </summary>
        </member>
        <member name="M:Majid.Events.Bus.Exceptions.MajidHandledExceptionData.#ctor(System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="exception">Exception object</param>
        </member>
        <member name="T:Majid.Events.Bus.Factories.IEventHandlerFactory">
            <summary>
            Defines an interface for factories those are responsible to create/get and release of event handlers.
            </summary>
        </member>
        <member name="M:Majid.Events.Bus.Factories.IEventHandlerFactory.GetHandler">
            <summary>
            Gets an event handler.
            </summary>
            <returns>The event handler</returns>
        </member>
        <member name="M:Majid.Events.Bus.Factories.IEventHandlerFactory.GetHandlerType">
            <summary>
            Gets type of the handler (without creating an instance).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Majid.Events.Bus.Factories.IEventHandlerFactory.ReleaseHandler(Majid.Events.Bus.Handlers.IEventHandler)">
            <summary>
            Releases an event handler.
            </summary>
            <param name="handler">Handle to be released</param>
        </member>
        <member name="T:Majid.Events.Bus.Factories.Internals.FactoryUnregistrar">
            <summary>
            Used to unregister a <see cref="T:Majid.Events.Bus.Factories.IEventHandlerFactory"/> on <see cref="M:Majid.Events.Bus.Factories.Internals.FactoryUnregistrar.Dispose"/> method.
            </summary>
        </member>
        <member name="T:Majid.Events.Bus.Factories.Internals.SingleInstanceHandlerFactory">
            <summary>
            This <see cref="T:Majid.Events.Bus.Factories.IEventHandlerFactory"/> implementation is used to handle events
            by a single instance object. 
            </summary>
            <remarks>
            This class always gets the same single instance of handler.
            </remarks>
        </member>
        <member name="P:Majid.Events.Bus.Factories.Internals.SingleInstanceHandlerFactory.HandlerInstance">
            <summary>
            The event handler instance.
            </summary>
        </member>
        <member name="M:Majid.Events.Bus.Factories.Internals.SingleInstanceHandlerFactory.#ctor(Majid.Events.Bus.Handlers.IEventHandler)">
            <summary>
            
            </summary>
            <param name="handler"></param>
        </member>
        <member name="T:Majid.Events.Bus.Factories.Internals.TransientEventHandlerFactory`1">
            <summary>
            This <see cref="T:Majid.Events.Bus.Factories.IEventHandlerFactory"/> implementation is used to handle events
            by a transient instance object. 
            </summary>
            <remarks>
            This class always creates a new transient instance of handler.
            </remarks>
        </member>
        <member name="M:Majid.Events.Bus.Factories.Internals.TransientEventHandlerFactory`1.GetHandler">
            <summary>
            Creates a new instance of the handler object.
            </summary>
            <returns>The handler object</returns>
        </member>
        <member name="M:Majid.Events.Bus.Factories.Internals.TransientEventHandlerFactory`1.ReleaseHandler(Majid.Events.Bus.Handlers.IEventHandler)">
            <summary>
            Disposes the handler object if it's <see cref="T:System.IDisposable"/>. Does nothing if it's not.
            </summary>
            <param name="handler">Handler to be released</param>
        </member>
        <member name="T:Majid.Events.Bus.Factories.IocHandlerFactory">
            <summary>
            This <see cref="T:Majid.Events.Bus.Factories.IEventHandlerFactory"/> implementation is used to get/release
            handlers using Ioc.
            </summary>
        </member>
        <member name="P:Majid.Events.Bus.Factories.IocHandlerFactory.HandlerType">
            <summary>
            Type of the handler.
            </summary>
        </member>
        <member name="M:Majid.Events.Bus.Factories.IocHandlerFactory.#ctor(Majid.Dependency.IIocResolver,System.Type)">
            <summary>
            Creates a new instance of <see cref="T:Majid.Events.Bus.Factories.IocHandlerFactory"/> class.
            </summary>
            <param name="iocResolver"></param>
            <param name="handlerType">Type of the handler</param>
        </member>
        <member name="M:Majid.Events.Bus.Factories.IocHandlerFactory.GetHandler">
            <summary>
            Resolves handler object from Ioc container.
            </summary>
            <returns>Resolved handler object</returns>
        </member>
        <member name="M:Majid.Events.Bus.Factories.IocHandlerFactory.ReleaseHandler(Majid.Events.Bus.Handlers.IEventHandler)">
            <summary>
            Releases handler object using Ioc container.
            </summary>
            <param name="handler">Handler to be released</param>
        </member>
        <member name="T:Majid.Events.Bus.Handlers.IAsyncEventHandler`1">
            <summary>
            Defines an interface of a class that handles events asynchrounously of type <see cref="T:Majid.Events.Bus.Handlers.IAsyncEventHandler`1"/>.
            </summary>
            <typeparam name="TEventData">Event type to handle</typeparam>
        </member>
        <member name="M:Majid.Events.Bus.Handlers.IAsyncEventHandler`1.HandleEventAsync(`0)">
            <summary>
            Handler handles the event by implementing this method.
            </summary>
            <param name="eventData">Event data</param>
        </member>
        <member name="T:Majid.Events.Bus.Handlers.IEventHandler">
            <summary>
            Undirect base interface for all event handlers.
            Implement <see cref="T:Majid.Events.Bus.Handlers.IEventHandler`1"/> instead of this one.
            </summary>
        </member>
        <member name="T:Majid.Events.Bus.Handlers.IEventHandler`1">
            <summary>
            Defines an interface of a class that handles events of type <see cref="T:Majid.Events.Bus.Handlers.IEventHandler`1"/>.
            </summary>
            <typeparam name="TEventData">Event type to handle</typeparam>
        </member>
        <member name="M:Majid.Events.Bus.Handlers.IEventHandler`1.HandleEvent(`0)">
            <summary>
            Handler handles the event by implementing this method.
            </summary>
            <param name="eventData">Event data</param>
        </member>
        <member name="T:Majid.Events.Bus.Handlers.Internals.ActionEventHandler`1">
            <summary>
            This event handler is an adapter to be able to use an action as <see cref="T:Majid.Events.Bus.Handlers.IEventHandler`1"/> implementation.
            </summary>
            <typeparam name="TEventData">Event type</typeparam>
        </member>
        <member name="P:Majid.Events.Bus.Handlers.Internals.ActionEventHandler`1.Action">
            <summary>
            Action to handle the event.
            </summary>
        </member>
        <member name="M:Majid.Events.Bus.Handlers.Internals.ActionEventHandler`1.#ctor(System.Action{`0})">
            <summary>
            Creates a new instance of <see cref="T:Majid.Events.Bus.Handlers.Internals.ActionEventHandler`1"/>.
            </summary>
            <param name="handler">Action to handle the event</param>
        </member>
        <member name="M:Majid.Events.Bus.Handlers.Internals.ActionEventHandler`1.HandleEvent(`0)">
            <summary>
            Handles the event.
            </summary>
            <param name="eventData"></param>
        </member>
        <member name="T:Majid.Events.Bus.Handlers.Internals.AsyncActionEventHandler`1">
            <summary>
            This event handler is an adapter to be able to use an action as <see cref="T:Majid.Events.Bus.Handlers.IAsyncEventHandler`1"/> implementation.
            </summary>
            <typeparam name="TEventData">Event type</typeparam>
        </member>
        <member name="P:Majid.Events.Bus.Handlers.Internals.AsyncActionEventHandler`1.Action">
            <summary>
            Function to handle the event.
            </summary>
        </member>
        <member name="M:Majid.Events.Bus.Handlers.Internals.AsyncActionEventHandler`1.#ctor(System.Func{`0,System.Threading.Tasks.Task})">
            <summary>
            Creates a new instance of <see cref="T:Majid.Events.Bus.Handlers.Internals.AsyncActionEventHandler`1"/>.
            </summary>
            <param name="handler">Action to handle the event</param>
        </member>
        <member name="M:Majid.Events.Bus.Handlers.Internals.AsyncActionEventHandler`1.HandleEventAsync(`0)">
            <summary>
            Handles the event.
            </summary>
            <param name="eventData"></param>
        </member>
        <member name="T:Majid.Events.Bus.IEventBus">
            <summary>
            Defines interface of the event bus.
            </summary>
        </member>
        <member name="M:Majid.Events.Bus.IEventBus.Register``1(System.Action{``0})">
            <summary>
            Registers to an event.
            Given action is called for all event occurrences.
            </summary>
            <param name="action">Action to handle events</param>
            <typeparam name="TEventData">Event type</typeparam>
        </member>
        <member name="M:Majid.Events.Bus.IEventBus.AsyncRegister``1(System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Registers to an event.
            Given action is called for all event occurrences.
            </summary>
            <param name="action">Action to handle events</param>
            <typeparam name="TEventData">Event type</typeparam>
        </member>
        <member name="M:Majid.Events.Bus.IEventBus.Register``1(Majid.Events.Bus.Handlers.IEventHandler{``0})">
            <summary>
            Registers to an event. 
            Same (given) instance of the handler is used for all event occurrences.
            </summary>
            <typeparam name="TEventData">Event type</typeparam>
            <param name="handler">Object to handle the event</param>
        </member>
        <member name="M:Majid.Events.Bus.IEventBus.AsyncRegister``1(Majid.Events.Bus.Handlers.IAsyncEventHandler{``0})">
            <summary>
            Registers to an event. 
            Same (given) instance of the async handler is used for all event occurrences.
            </summary>
            <typeparam name="TEventData">Event type</typeparam>
            <param name="handler">Object to handle the event</param>
        </member>
        <member name="M:Majid.Events.Bus.IEventBus.Register``2">
            <summary>
            Registers to an event.
            A new instance of <see cref="!:THandler"/> object is created for every event occurrence.
            </summary>
            <typeparam name="TEventData">Event type</typeparam>
            <typeparam name="THandler">Type of the event handler</typeparam>
        </member>
        <member name="M:Majid.Events.Bus.IEventBus.Register(System.Type,Majid.Events.Bus.Handlers.IEventHandler)">
            <summary>
            Registers to an event.
            Same (given) instance of the handler is used for all event occurrences.
            </summary>
            <param name="eventType">Event type</param>
            <param name="handler">Object to handle the event</param>
        </member>
        <member name="M:Majid.Events.Bus.IEventBus.Register``1(Majid.Events.Bus.Factories.IEventHandlerFactory)">
            <summary>
            Registers to an event.
            Given factory is used to create/release handlers
            </summary>
            <typeparam name="TEventData">Event type</typeparam>
            <param name="factory">A factory to create/release handlers</param>
        </member>
        <member name="M:Majid.Events.Bus.IEventBus.Register(System.Type,Majid.Events.Bus.Factories.IEventHandlerFactory)">
            <summary>
            Registers to an event.
            </summary>
            <param name="eventType">Event type</param>
            <param name="factory">A factory to create/release handlers</param>
        </member>
        <member name="M:Majid.Events.Bus.IEventBus.Unregister``1(System.Action{``0})">
            <summary>
            Unregisters from an event.
            </summary>
            <typeparam name="TEventData">Event type</typeparam>
            <param name="action"></param>
        </member>
        <member name="M:Majid.Events.Bus.IEventBus.AsyncUnregister``1(System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Unregisters from an event.
            </summary>
            <typeparam name="TEventData">Event type</typeparam>
            <param name="action"></param>
        </member>
        <member name="M:Majid.Events.Bus.IEventBus.Unregister``1(Majid.Events.Bus.Handlers.IEventHandler{``0})">
            <summary>
            Unregisters from an event.
            </summary>
            <typeparam name="TEventData">Event type</typeparam>
            <param name="handler">Handler object that is registered before</param>
        </member>
        <member name="M:Majid.Events.Bus.IEventBus.AsyncUnregister``1(Majid.Events.Bus.Handlers.IAsyncEventHandler{``0})">
            <summary>
            Unregisters from an event.
            </summary>
            <typeparam name="TEventData">Event type</typeparam>
            <param name="handler">Handler object that is registered before</param>
        </member>
        <member name="M:Majid.Events.Bus.IEventBus.Unregister(System.Type,Majid.Events.Bus.Handlers.IEventHandler)">
            <summary>
            Unregisters from an event.
            </summary>
            <param name="eventType">Event type</param>
            <param name="handler">Handler object that is registered before</param>
        </member>
        <member name="M:Majid.Events.Bus.IEventBus.Unregister``1(Majid.Events.Bus.Factories.IEventHandlerFactory)">
            <summary>
            Unregisters from an event.
            </summary>
            <typeparam name="TEventData">Event type</typeparam>
            <param name="factory">Factory object that is registered before</param>
        </member>
        <member name="M:Majid.Events.Bus.IEventBus.Unregister(System.Type,Majid.Events.Bus.Factories.IEventHandlerFactory)">
            <summary>
            Unregisters from an event.
            </summary>
            <param name="eventType">Event type</param>
            <param name="factory">Factory object that is registered before</param>
        </member>
        <member name="M:Majid.Events.Bus.IEventBus.UnregisterAll``1">
            <summary>
            Unregisters all event handlers of given event type.
            </summary>
            <typeparam name="TEventData">Event type</typeparam>
        </member>
        <member name="M:Majid.Events.Bus.IEventBus.UnregisterAll(System.Type)">
            <summary>
            Unregisters all event handlers of given event type.
            </summary>
            <param name="eventType">Event type</param>
        </member>
        <member name="M:Majid.Events.Bus.IEventBus.Trigger``1(``0)">
            <summary>
            Triggers an event.
            </summary>
            <typeparam name="TEventData">Event type</typeparam>
            <param name="eventData">Related data for the event</param>
        </member>
        <member name="M:Majid.Events.Bus.IEventBus.Trigger``1(System.Object,``0)">
            <summary>
            Triggers an event.
            </summary>
            <typeparam name="TEventData">Event type</typeparam>
            <param name="eventSource">The object which triggers the event</param>
            <param name="eventData">Related data for the event</param>
        </member>
        <member name="M:Majid.Events.Bus.IEventBus.Trigger(System.Type,Majid.Events.Bus.IEventData)">
            <summary>
            Triggers an event.
            </summary>
            <param name="eventType">Event type</param>
            <param name="eventData">Related data for the event</param>
        </member>
        <member name="M:Majid.Events.Bus.IEventBus.Trigger(System.Type,System.Object,Majid.Events.Bus.IEventData)">
            <summary>
            Triggers an event.
            </summary>
            <param name="eventType">Event type</param>
            <param name="eventSource">The object which triggers the event</param>
            <param name="eventData">Related data for the event</param>
        </member>
        <member name="M:Majid.Events.Bus.IEventBus.TriggerAsync``1(``0)">
            <summary>
            Triggers an event asynchronously.
            </summary>
            <typeparam name="TEventData">Event type</typeparam>
            <param name="eventData">Related data for the event</param>
            <returns>The task to handle async operation</returns>
        </member>
        <member name="M:Majid.Events.Bus.IEventBus.TriggerAsync``1(System.Object,``0)">
            <summary>
            Triggers an event asynchronously.
            </summary>
            <typeparam name="TEventData">Event type</typeparam>
            <param name="eventSource">The object which triggers the event</param>
            <param name="eventData">Related data for the event</param>
            <returns>The task to handle async operation</returns>
        </member>
        <member name="M:Majid.Events.Bus.IEventBus.TriggerAsync(System.Type,Majid.Events.Bus.IEventData)">
            <summary>
            Triggers an event asynchronously.
            </summary>
            <param name="eventType">Event type</param>
            <param name="eventData">Related data for the event</param>
            <returns>The task to handle async operation</returns>
        </member>
        <member name="M:Majid.Events.Bus.IEventBus.TriggerAsync(System.Type,System.Object,Majid.Events.Bus.IEventData)">
            <summary>
            Triggers an event asynchronously.
            </summary>
            <param name="eventType">Event type</param>
            <param name="eventSource">The object which triggers the event</param>
            <param name="eventData">Related data for the event</param>
            <returns>The task to handle async operation</returns>
        </member>
        <member name="T:Majid.Events.Bus.IEventData">
            <summary>
            Defines interface for all Event data classes.
            </summary>
        </member>
        <member name="P:Majid.Events.Bus.IEventData.EventTime">
            <summary>
            The time when the event occured.
            </summary>
        </member>
        <member name="P:Majid.Events.Bus.IEventData.EventSource">
            <summary>
            The object which triggers the event (optional).
            </summary>
        </member>
        <member name="T:Majid.Events.Bus.IEventDataWithInheritableGenericArgument">
            <summary>
            This interface must be implemented by event data classes that
            has a single generic argument and this argument will be used by inheritance. 
            
            For example;
            Assume that Student inherits From Person. When trigger an EntityCreatedEventData{Student},
            EntityCreatedEventData{Person} is also triggered if EntityCreatedEventData implements
            this interface.
            </summary>
        </member>
        <member name="M:Majid.Events.Bus.IEventDataWithInheritableGenericArgument.GetConstructorArgs">
            <summary>
            Gets arguments to create this class since a new instance of this class is created.
            </summary>
            <returns>Constructor arguments</returns>
        </member>
        <member name="T:Majid.Events.Bus.NullEventBus">
            <summary>
            An event bus that implements Null object pattern.
            </summary>
        </member>
        <member name="P:Majid.Events.Bus.NullEventBus.Instance">
            <summary>
            Gets single instance of <see cref="T:Majid.Events.Bus.NullEventBus"/> class.
            </summary>
        </member>
        <member name="M:Majid.Events.Bus.NullEventBus.Register``1(System.Action{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.NullEventBus.AsyncRegister``1(System.Func{``0,System.Threading.Tasks.Task})">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.NullEventBus.Register``1(Majid.Events.Bus.Handlers.IEventHandler{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.NullEventBus.AsyncRegister``1(Majid.Events.Bus.Handlers.IAsyncEventHandler{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.NullEventBus.Register``2">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.NullEventBus.Register(System.Type,Majid.Events.Bus.Handlers.IEventHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.NullEventBus.Register``1(Majid.Events.Bus.Factories.IEventHandlerFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.NullEventBus.Register(System.Type,Majid.Events.Bus.Factories.IEventHandlerFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.NullEventBus.Unregister``1(System.Action{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.NullEventBus.AsyncUnregister``1(System.Func{``0,System.Threading.Tasks.Task})">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.NullEventBus.Unregister``1(Majid.Events.Bus.Handlers.IEventHandler{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.NullEventBus.AsyncUnregister``1(Majid.Events.Bus.Handlers.IAsyncEventHandler{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.NullEventBus.Unregister(System.Type,Majid.Events.Bus.Handlers.IEventHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.NullEventBus.Unregister``1(Majid.Events.Bus.Factories.IEventHandlerFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.NullEventBus.Unregister(System.Type,Majid.Events.Bus.Factories.IEventHandlerFactory)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.NullEventBus.UnregisterAll``1">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.NullEventBus.UnregisterAll(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.NullEventBus.Trigger``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.NullEventBus.Trigger``1(System.Object,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.NullEventBus.Trigger(System.Type,Majid.Events.Bus.IEventData)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.NullEventBus.Trigger(System.Type,System.Object,Majid.Events.Bus.IEventData)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.NullEventBus.TriggerAsync``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.NullEventBus.TriggerAsync``1(System.Object,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.NullEventBus.TriggerAsync(System.Type,Majid.Events.Bus.IEventData)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Events.Bus.NullEventBus.TriggerAsync(System.Type,System.Object,Majid.Events.Bus.IEventData)">
            <inheritdoc/>
        </member>
        <member name="T:Majid.Extensions.ComparableExtensions">
            <summary>
            Extension methods for <see cref="T:System.IComparable`1"/>.
            </summary>
        </member>
        <member name="M:Majid.Extensions.ComparableExtensions.IsBetween``1(``0,``0,``0)">
            <summary>
            Checks a value is between a minimum and maximum value.
            </summary>
            <param name="value">The value to be checked</param>
            <param name="minInclusiveValue">Minimum (inclusive) value</param>
            <param name="maxInclusiveValue">Maximum (inclusive) value</param>
        </member>
        <member name="T:Majid.Extensions.DateTimeExtensions">
            <summary>
            Extension methods for <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="M:Majid.Extensions.DateTimeExtensions.ToUnixTimestamp(System.DateTime)">
            <summary>
            Converts a DateTime to a Unix Timestamp
            </summary>
            <param name="target">This DateTime</param>
            <returns></returns>
        </member>
        <member name="M:Majid.Extensions.DateTimeExtensions.FromUnixTimestamp(System.Double)">
            <summary>
            Converts a Unix Timestamp in to a DateTime
            </summary>
            <param name="unixTime">This Unix Timestamp</param>
            <returns></returns>
        </member>
        <member name="M:Majid.Extensions.DateTimeExtensions.ToDayEnd(System.DateTime)">
            <summary>
            Gets the value of the End of the day (23:59)
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Majid.Extensions.DateTimeExtensions.StartOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets the First Date of the week for the specified date
            </summary>
            <param name="dt">this DateTime</param>
            <param name="startOfWeek">The Start Day of the Week (ie, Sunday/Monday)</param>
            <returns>The First Date of the week</returns>
        </member>
        <member name="M:Majid.Extensions.DateTimeExtensions.DaysOfMonth(System.Int32,System.Int32)">
            <summary>
            Returns all the days of a month.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <returns></returns>
        </member>
        <member name="M:Majid.Extensions.DateTimeExtensions.WeekDayInstanceOfMonth(System.DateTime)">
            <summary>
            Determines the Nth instance of a Date's DayOfWeek in a month
            </summary>
            <returns></returns>
            <example>11/29/2011 would return 5, because it is the 5th Tuesday of each month</example>
        </member>
        <member name="M:Majid.Extensions.DateTimeExtensions.TotalDaysInMonth(System.DateTime)">
            <summary>
            Gets the total days in a month
            </summary>
            <param name="dateTime">The date time.</param>
            <returns></returns>
        </member>
        <member name="M:Majid.Extensions.DateTimeExtensions.ToDateTimeUnspecified(System.DateTime)">
            <summary>
            Takes any date and returns it's value as an Unspecified DateTime
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Majid.Extensions.DateTimeExtensions.TrimMilliseconds(System.DateTime)">
            <summary>
            Trims the milliseconds off of a datetime
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="T:Majid.Extensions.DateTimeRangeExtensions">
            <summary>
            Extension methods for <see cref="T:Majid.Timing.IDateTimeRange"/>.
            </summary>
        </member>
        <member name="M:Majid.Extensions.DateTimeRangeExtensions.SetTo(Majid.Timing.IDateTimeRange,Majid.Timing.IDateTimeRange)">
            <summary>
            Sets date range to given target.
            </summary>
            <param name="source"></param>
            <param name="target"></param>
        </member>
        <member name="M:Majid.Extensions.DateTimeRangeExtensions.SetFrom(Majid.Timing.IDateTimeRange,Majid.Timing.IDateTimeRange)">
            <summary>
            Sets date range from given source.
            </summary>
        </member>
        <member name="M:Majid.Extensions.DateTimeRangeExtensions.DaysInRange(Majid.Timing.IDateTimeRange)">
            <summary>
            Returns all the days of a datetime range.
            </summary>
            <param name="dateRange">The date range.</param>
            <returns></returns>
        </member>
        <member name="M:Majid.Extensions.DateTimeRangeExtensions.DaysInRange(System.DateTime,System.DateTime)">
            <summary>
            Returns all the days in a range.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns></returns>
        </member>
        <member name="T:Majid.Extensions.DayOfWeekExtensions">
            <summary>
            Extension methods for <see cref="T:Majid.Extensions.DayOfWeekExtensions"/>.
            </summary>
        </member>
        <member name="M:Majid.Extensions.DayOfWeekExtensions.IsWeekend(System.DayOfWeek)">
            <summary>
            Check if a given <see cref="T:System.DayOfWeek"/> value is weekend.
            </summary>
        </member>
        <member name="M:Majid.Extensions.DayOfWeekExtensions.IsWeekday(System.DayOfWeek)">
            <summary>
            Check if a given <see cref="T:System.DayOfWeek"/> value is weekday.
            </summary>
        </member>
        <member name="M:Majid.Extensions.DayOfWeekExtensions.FindNthWeekDayOfMonth(System.DayOfWeek,System.Int32,System.Int32,System.Int32)">
            <summary>
            Finds the NTH week day of a month.
            </summary>
            <param name="dayOfWeek">The day of week.</param>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <param name="n">The nth instance.</param>
            <remarks>Compensates for 4th and 5th DayOfWeek of Month</remarks>
        </member>
        <member name="M:Majid.Extensions.DayOfWeekExtensions.TotalInstancesInMonth(System.DayOfWeek,System.Int32,System.Int32)">
            <summary>
            Finds the total number of instances of a specific DayOfWeek in a month.
            </summary>
            <param name="dayOfWeek">The day of week.</param>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <returns></returns>
        </member>
        <member name="M:Majid.Extensions.DayOfWeekExtensions.TotalInstancesInMonth(System.DayOfWeek,System.DateTime)">
            <summary>
            Gets the total number of instances of a specific DayOfWeek in a month.
            </summary>
            <param name="dayOfWeek">The day of week.</param>
            <param name="dateTime">The date in a month.</param>
            <returns></returns>
        </member>
        <member name="T:Majid.Extensions.EventHandlerExtensions">
            <summary>
            Extension methods for <see cref="T:System.EventHandler"/>.
            </summary>
        </member>
        <member name="M:Majid.Extensions.EventHandlerExtensions.InvokeSafely(System.EventHandler,System.Object)">
            <summary>
            Raises given event safely with given arguments.
            </summary>
            <param name="eventHandler">The event handler</param>
            <param name="sender">Source of the event</param>
        </member>
        <member name="M:Majid.Extensions.EventHandlerExtensions.InvokeSafely(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
            Raises given event safely with given arguments.
            </summary>
            <param name="eventHandler">The event handler</param>
            <param name="sender">Source of the event</param>
            <param name="e">Event argument</param>
        </member>
        <member name="M:Majid.Extensions.EventHandlerExtensions.InvokeSafely``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Raises given event safely with given arguments.
            </summary>
            <typeparam name="TEventArgs">Type of the <see cref="T:System.EventArgs"/></typeparam>
            <param name="eventHandler">The event handler</param>
            <param name="sender">Source of the event</param>
            <param name="e">Event argument</param>
        </member>
        <member name="T:Majid.Extensions.ExceptionExtensions">
            <summary>
            Extension methods for <see cref="T:System.Exception"/> class.
            </summary>
        </member>
        <member name="M:Majid.Extensions.ExceptionExtensions.ReThrow(System.Exception)">
            <summary>
            Uses <see cref="M:System.Runtime.ExceptionServices.ExceptionDispatchInfo.Capture(System.Exception)"/> method to re-throws exception
            while preserving stack trace.
            </summary>
            <param name="exception">Exception to be re-thrown</param>
        </member>
        <member name="T:Majid.Extensions.ObjectExtensions">
            <summary>
            Extension methods for all objects.
            </summary>
        </member>
        <member name="M:Majid.Extensions.ObjectExtensions.As``1(System.Object)">
            <summary>
            Used to simplify and beautify casting an object to a type. 
            </summary>
            <typeparam name="T">Type to be casted</typeparam>
            <param name="obj">Object to cast</param>
            <returns>Casted object</returns>
        </member>
        <member name="M:Majid.Extensions.ObjectExtensions.To``1(System.Object)">
            <summary>
            Converts given object to a value type using <see cref="M:System.Convert.ChangeType(System.Object,System.TypeCode)"/> method.
            </summary>
            <param name="obj">Object to be converted</param>
            <typeparam name="T">Type of the target object</typeparam>
            <returns>Converted object</returns>
        </member>
        <member name="M:Majid.Extensions.ObjectExtensions.IsIn``1(``0,``0[])">
            <summary>
            Check if an item is in a list.
            </summary>
            <param name="item">Item to check</param>
            <param name="list">List of items</param>
            <typeparam name="T">Type of the items</typeparam>
        </member>
        <member name="T:Majid.Extensions.StringExtensions">
            <summary>
            Extension methods for String class.
            </summary>
        </member>
        <member name="M:Majid.Extensions.StringExtensions.EnsureEndsWith(System.String,System.Char)">
            <summary>
            Adds a char to end of given string if it does not ends with the char.
            </summary>
        </member>
        <member name="M:Majid.Extensions.StringExtensions.EnsureEndsWith(System.String,System.Char,System.StringComparison)">
            <summary>
            Adds a char to end of given string if it does not ends with the char.
            </summary>
        </member>
        <member name="M:Majid.Extensions.StringExtensions.EnsureEndsWith(System.String,System.Char,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            Adds a char to end of given string if it does not ends with the char.
            </summary>
        </member>
        <member name="M:Majid.Extensions.StringExtensions.EnsureStartsWith(System.String,System.Char)">
            <summary>
            Adds a char to beginning of given string if it does not starts with the char.
            </summary>
        </member>
        <member name="M:Majid.Extensions.StringExtensions.EnsureStartsWith(System.String,System.Char,System.StringComparison)">
            <summary>
            Adds a char to beginning of given string if it does not starts with the char.
            </summary>
        </member>
        <member name="M:Majid.Extensions.StringExtensions.EnsureStartsWith(System.String,System.Char,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            Adds a char to beginning of given string if it does not starts with the char.
            </summary>
        </member>
        <member name="M:Majid.Extensions.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            Indicates whether this string is null or an System.String.Empty string.
            </summary>
        </member>
        <member name="M:Majid.Extensions.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            indicates whether this string is null, empty, or consists only of white-space characters.
            </summary>
        </member>
        <member name="M:Majid.Extensions.StringExtensions.Left(System.String,System.Int32)">
            <summary>
            Gets a substring of a string from beginning of the string.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="str"/> is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="len"/> is bigger that string's length</exception>
        </member>
        <member name="M:Majid.Extensions.StringExtensions.NormalizeLineEndings(System.String)">
            <summary>
            Converts line endings in the string to <see cref="P:System.Environment.NewLine"/>.
            </summary>
        </member>
        <member name="M:Majid.Extensions.StringExtensions.NthIndexOf(System.String,System.Char,System.Int32)">
            <summary>
            Gets index of nth occurence of a char in a string.
            </summary>
            <param name="str">source string to be searched</param>
            <param name="c">Char to search in <see cref="!:str"/></param>
            <param name="n">Count of the occurence</param>
        </member>
        <member name="M:Majid.Extensions.StringExtensions.RemovePostFix(System.String,System.String[])">
            <summary>
            Removes first occurrence of the given postfixes from end of the given string.
            Ordering is important. If one of the postFixes is matched, others will not be tested.
            </summary>
            <param name="str">The string.</param>
            <param name="postFixes">one or more postfix.</param>
            <returns>Modified string or the same string if it has not any of given postfixes</returns>
        </member>
        <member name="M:Majid.Extensions.StringExtensions.RemovePreFix(System.String,System.String[])">
            <summary>
            Removes first occurrence of the given prefixes from beginning of the given string.
            Ordering is important. If one of the preFixes is matched, others will not be tested.
            </summary>
            <param name="str">The string.</param>
            <param name="preFixes">one or more prefix.</param>
            <returns>Modified string or the same string if it has not any of given prefixes</returns>
        </member>
        <member name="M:Majid.Extensions.StringExtensions.Right(System.String,System.Int32)">
            <summary>
            Gets a substring of a string from end of the string.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="str"/> is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="len"/> is bigger that string's length</exception>
        </member>
        <member name="M:Majid.Extensions.StringExtensions.Split(System.String,System.String)">
            <summary>
            Uses string.Split method to split given string by given separator.
            </summary>
        </member>
        <member name="M:Majid.Extensions.StringExtensions.Split(System.String,System.String,System.StringSplitOptions)">
            <summary>
            Uses string.Split method to split given string by given separator.
            </summary>
        </member>
        <member name="M:Majid.Extensions.StringExtensions.SplitToLines(System.String)">
            <summary>
            Uses string.Split method to split given string by <see cref="P:System.Environment.NewLine"/>.
            </summary>
        </member>
        <member name="M:Majid.Extensions.StringExtensions.SplitToLines(System.String,System.StringSplitOptions)">
            <summary>
            Uses string.Split method to split given string by <see cref="P:System.Environment.NewLine"/>.
            </summary>
        </member>
        <member name="M:Majid.Extensions.StringExtensions.ToCamelCase(System.String,System.Boolean)">
            <summary>
            Converts PascalCase string to camelCase string.
            </summary>
            <param name="str">String to convert</param>
            <param name="invariantCulture">Invariant culture</param>
            <returns>camelCase of the string</returns>
        </member>
        <member name="M:Majid.Extensions.StringExtensions.ToCamelCase(System.String,System.Globalization.CultureInfo)">
            <summary>
            Converts PascalCase string to camelCase string in specified culture.
            </summary>
            <param name="str">String to convert</param>
            <param name="culture">An object that supplies culture-specific casing rules</param>
            <returns>camelCase of the string</returns>
        </member>
        <member name="M:Majid.Extensions.StringExtensions.ToSentenceCase(System.String,System.Boolean)">
            <summary>
            Converts given PascalCase/camelCase string to sentence (by splitting words by space).
            Example: "ThisIsSampleSentence" is converted to "This is a sample sentence".
            </summary>
            <param name="str">String to convert.</param>
            <param name="invariantCulture">Invariant culture</param>
        </member>
        <member name="M:Majid.Extensions.StringExtensions.ToSentenceCase(System.String,System.Globalization.CultureInfo)">
            <summary>
            Converts given PascalCase/camelCase string to sentence (by splitting words by space).
            Example: "ThisIsSampleSentence" is converted to "This is a sample sentence".
            </summary>
            <param name="str">String to convert.</param>
            <param name="culture">An object that supplies culture-specific casing rules.</param>
        </member>
        <member name="M:Majid.Extensions.StringExtensions.ToEnum``1(System.String)">
            <summary>
            Converts string to enum value.
            </summary>
            <typeparam name="T">Type of enum</typeparam>
            <param name="value">String value to convert</param>
            <returns>Returns enum object</returns>
        </member>
        <member name="M:Majid.Extensions.StringExtensions.ToEnum``1(System.String,System.Boolean)">
            <summary>
            Converts string to enum value.
            </summary>
            <typeparam name="T">Type of enum</typeparam>
            <param name="value">String value to convert</param>
            <param name="ignoreCase">Ignore case</param>
            <returns>Returns enum object</returns>
        </member>
        <member name="M:Majid.Extensions.StringExtensions.ToPascalCase(System.String,System.Boolean)">
            <summary>
            Converts camelCase string to PascalCase string.
            </summary>
            <param name="str">String to convert</param>
            <param name="invariantCulture">Invariant culture</param>
            <returns>PascalCase of the string</returns>
        </member>
        <member name="M:Majid.Extensions.StringExtensions.ToPascalCase(System.String,System.Globalization.CultureInfo)">
            <summary>
            Converts camelCase string to PascalCase string in specified culture.
            </summary>
            <param name="str">String to convert</param>
            <param name="culture">An object that supplies culture-specific casing rules</param>
            <returns>PascalCase of the string</returns>
        </member>
        <member name="M:Majid.Extensions.StringExtensions.Truncate(System.String,System.Int32)">
            <summary>
            Gets a substring of a string from beginning of the string if it exceeds maximum length.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="str"/> is null</exception>
        </member>
        <member name="M:Majid.Extensions.StringExtensions.TruncateWithPostfix(System.String,System.Int32)">
            <summary>
            Gets a substring of a string from beginning of the string if it exceeds maximum length.
            It adds a "..." postfix to end of the string if it's truncated.
            Returning string can not be longer than maxLength.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="str"/> is null</exception>
        </member>
        <member name="M:Majid.Extensions.StringExtensions.TruncateWithPostfix(System.String,System.Int32,System.String)">
            <summary>
            Gets a substring of a string from beginning of the string if it exceeds maximum length.
            It adds given <paramref name="postfix"/> to end of the string if it's truncated.
            Returning string can not be longer than maxLength.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="str"/> is null</exception>
        </member>
        <member name="T:Majid.IGuidGenerator">
            <summary>
            Used to generate Ids.
            </summary>
        </member>
        <member name="M:Majid.IGuidGenerator.Create">
            <summary>
            Creates a GUID.
            </summary>
        </member>
        <member name="T:Majid.IO.DirectoryHelper">
            <summary>
            A helper class for Directory operations.
            </summary>
        </member>
        <member name="M:Majid.IO.DirectoryHelper.CreateIfNotExists(System.String)">
            <summary>
            Creates a new directory if it does not exists.
            </summary>
            <param name="directory">Directory to create</param>
        </member>
        <member name="T:Majid.IO.FileHelper">
            <summary>
            A helper class for File operations.
            </summary>
        </member>
        <member name="M:Majid.IO.FileHelper.DeleteIfExists(System.String)">
            <summary>
            Checks and deletes given file if it does exists.
            </summary>
            <param name="filePath">Path of the file</param>
        </member>
        <member name="T:Majid.IShouldInitialize">
            <summary>
            Defines interface for objects those should be Initialized before using it.
            If the object resolved using dependency injection, <see cref="M:Castle.Core.IInitializable.Initialize"/>
            method is automatically called just after creation of the object.
            </summary>
        </member>
        <member name="T:Majid.IUserIdentifier">
            <summary>
            Interface to get a user identifier.
            </summary>
        </member>
        <member name="P:Majid.IUserIdentifier.TenantId">
            <summary>
            Tenant Id. Can be null for host users.
            </summary>
        </member>
        <member name="P:Majid.IUserIdentifier.UserId">
            <summary>
            Id of the user.
            </summary>
        </member>
        <member name="M:Majid.Json.JsonExtensions.ToJsonString(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Converts given object to JSON string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Majid.Json.JsonExtensions.FromJsonString``1(System.String)">
            <summary>
            Returns deserialized string using default <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Majid.Json.JsonExtensions.FromJsonString``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Returns deserialized string using custom <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Majid.Json.JsonExtensions.FromJsonString(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Returns deserialized string using explicit <see cref="T:System.Type"/> and custom <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="T:Majid.Json.JsonSerializationHelper">
            <summary>
            Defines helper methods to work with JSON.
            </summary>
        </member>
        <member name="M:Majid.Json.JsonSerializationHelper.SerializeWithType(System.Object)">
            <summary>
            Serializes an object with a type information included.
            So, it can be deserialized using <see cref="M:Majid.Json.JsonSerializationHelper.DeserializeWithType(System.String)"/> method later.
            </summary>
        </member>
        <member name="M:Majid.Json.JsonSerializationHelper.SerializeWithType(System.Object,System.Type)">
            <summary>
            Serializes an object with a type information included.
            So, it can be deserialized using <see cref="M:Majid.Json.JsonSerializationHelper.DeserializeWithType(System.String)"/> method later.
            </summary>
        </member>
        <member name="M:Majid.Json.JsonSerializationHelper.DeserializeWithType``1(System.String)">
            <summary>
            Deserializes an object serialized with <see cref="M:Majid.Json.JsonSerializationHelper.SerializeWithType(System.Object)"/> methods.
            </summary>
        </member>
        <member name="M:Majid.Json.JsonSerializationHelper.DeserializeWithType(System.String)">
            <summary>
            Deserializes an object serialized with <see cref="M:Majid.Json.JsonSerializationHelper.SerializeWithType(System.Object)"/> methods.
            </summary>
        </member>
        <member name="T:Majid.Linq.Extensions.QueryableExtensions">
            <summary>
            Some useful extension methods for <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
        </member>
        <member name="M:Majid.Linq.Extensions.QueryableExtensions.PageBy``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            Used for paging. Can be used as an alternative to Skip(...).Take(...) chaining.
            </summary>
        </member>
        <member name="M:Majid.Linq.Extensions.QueryableExtensions.PageBy``1(System.Linq.IQueryable{``0},Majid.Application.Services.Dto.IPagedResultRequest)">
            <summary>
            Used for paging with an <see cref="T:Majid.Application.Services.Dto.IPagedResultRequest"/> object.
            </summary>
            <param name="query">Queryable to apply paging</param>
            <param name="pagedResultRequest">An object implements <see cref="T:Majid.Application.Services.Dto.IPagedResultRequest"/> interface</param>
        </member>
        <member name="M:Majid.Linq.Extensions.QueryableExtensions.WhereIf``1(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Filters a <see cref="T:System.Linq.IQueryable`1"/> by given predicate if given condition is true.
            </summary>
            <param name="query">Queryable to apply filtering</param>
            <param name="condition">A boolean value</param>
            <param name="predicate">Predicate to filter the query</param>
            <returns>Filtered or not filtered query based on <paramref name="condition"/></returns>
        </member>
        <member name="M:Majid.Linq.Extensions.QueryableExtensions.WhereIf``1(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <summary>
            Filters a <see cref="T:System.Linq.IQueryable`1"/> by given predicate if given condition is true.
            </summary>
            <param name="query">Queryable to apply filtering</param>
            <param name="condition">A boolean value</param>
            <param name="predicate">Predicate to filter the query</param>
            <returns>Filtered or not filtered query based on <paramref name="condition"/></returns>
        </member>
        <member name="T:Majid.Linq.IAsyncQueryableExecuter">
            <summary>
            This interface is intended to be used by MAJID.
            </summary>
        </member>
        <member name="M:Majid.Localization.CultureInfoHelper.Get(System.String)">
            <summary>
            This method is a temporary solution since CultureInfo.GetCultureInfo() does not exists in netstandard yet.
            </summary>
        </member>
        <member name="T:Majid.Localization.Dictionaries.DictionaryBasedLocalizationSource">
            <summary>
            This class is used to build a localization source
            which works on memory based dictionaries to find strings.
            </summary>
        </member>
        <member name="P:Majid.Localization.Dictionaries.DictionaryBasedLocalizationSource.Name">
            <summary>
            Unique Name of the source.
            </summary>
        </member>
        <member name="M:Majid.Localization.Dictionaries.DictionaryBasedLocalizationSource.#ctor(System.String,Majid.Localization.Dictionaries.ILocalizationDictionaryProvider)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="dictionaryProvider"></param>
        </member>
        <member name="M:Majid.Localization.Dictionaries.DictionaryBasedLocalizationSource.Initialize(Majid.Configuration.Startup.ILocalizationConfiguration,Majid.Dependency.IIocResolver)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Localization.Dictionaries.DictionaryBasedLocalizationSource.GetString(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Localization.Dictionaries.DictionaryBasedLocalizationSource.GetString(System.String,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Localization.Dictionaries.DictionaryBasedLocalizationSource.GetAllStrings(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Localization.Dictionaries.DictionaryBasedLocalizationSource.GetAllStrings(System.Globalization.CultureInfo,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Localization.Dictionaries.DictionaryBasedLocalizationSource.Extend(Majid.Localization.Dictionaries.ILocalizationDictionary)">
            <summary>
            Extends the source with given dictionary.
            </summary>
            <param name="dictionary">Dictionary to extend the source</param>
        </member>
        <member name="T:Majid.Localization.Dictionaries.IDictionaryBasedLocalizationSource">
            <summary>
            Interface for a dictionary based localization source.
            </summary>
        </member>
        <member name="P:Majid.Localization.Dictionaries.IDictionaryBasedLocalizationSource.DictionaryProvider">
            <summary>
            Gets the dictionary provider.
            </summary>
        </member>
        <member name="M:Majid.Localization.Dictionaries.IDictionaryBasedLocalizationSource.Extend(Majid.Localization.Dictionaries.ILocalizationDictionary)">
            <summary>
            Extends the source with given dictionary.
            </summary>
            <param name="dictionary">Dictionary to extend the source</param>
        </member>
        <member name="T:Majid.Localization.Dictionaries.ILocalizationDictionary">
            <summary>
            Represents a dictionary that is used to find a localized string.
            </summary>
        </member>
        <member name="P:Majid.Localization.Dictionaries.ILocalizationDictionary.CultureInfo">
            <summary>
            Culture of the dictionary.
            </summary>
        </member>
        <member name="P:Majid.Localization.Dictionaries.ILocalizationDictionary.Item(System.String)">
            <summary>
            Gets/sets a string for this dictionary with given name (key).
            </summary>
            <param name="name">Name to get/set</param>
        </member>
        <member name="M:Majid.Localization.Dictionaries.ILocalizationDictionary.GetOrNull(System.String)">
            <summary>
            Gets a <see cref="T:Majid.Localization.LocalizedString"/> for given <paramref name="name"/>.
            </summary>
            <param name="name">Name (key) to get localized string</param>
            <returns>The localized string or null if not found in this dictionary</returns>
        </member>
        <member name="M:Majid.Localization.Dictionaries.ILocalizationDictionary.GetAllStrings">
            <summary>
            Gets a list of all strings in this dictionary.
            </summary>
            <returns>List of all <see cref="T:Majid.Localization.LocalizedString"/> object</returns>
        </member>
        <member name="T:Majid.Localization.Dictionaries.ILocalizationDictionaryProvider">
            <summary>
            Used to get localization dictionaries (<see cref="T:Majid.Localization.Dictionaries.ILocalizationDictionary"/>)
            for a <see cref="T:Majid.Localization.Dictionaries.IDictionaryBasedLocalizationSource"/>.
            </summary>
        </member>
        <member name="T:Majid.Localization.Dictionaries.Json.JsonEmbeddedFileLocalizationDictionaryProvider">
            <summary>
            Provides localization dictionaries from JSON files embedded into an <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:Majid.Localization.Dictionaries.Json.JsonEmbeddedFileLocalizationDictionaryProvider.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            Creates a new <see cref="T:Majid.Localization.Dictionaries.Json.JsonEmbeddedFileLocalizationDictionaryProvider"/> object.
            </summary>
            <param name="assembly">Assembly that contains embedded json files</param>
            <param name="rootNamespace">
            <para>
            Namespace of the embedded json dictionary files
            </para>
            <para>
            Notice : Json folder name is different from Xml folder name.
            </para>
            <para>
            You must name it like this : Json**** and Xml****; Do not name : ****Json and ****Xml
            </para>
            </param>
        </member>
        <member name="T:Majid.Localization.Dictionaries.Json.JsonFileLocalizationDictionaryProvider">
            <summary>
                Provides localization dictionaries from json files in a directory.
            </summary>
        </member>
        <member name="M:Majid.Localization.Dictionaries.Json.JsonFileLocalizationDictionaryProvider.#ctor(System.String)">
            <summary>
                Creates a new <see cref="T:Majid.Localization.Dictionaries.Json.JsonFileLocalizationDictionaryProvider" />.
            </summary>
            <param name="directoryPath">Path of the dictionary that contains all related XML files</param>
        </member>
        <member name="T:Majid.Localization.Dictionaries.Json.JsonLocalizationDictionary">
            <summary>
                This class is used to build a localization dictionary from json.
            </summary>
            <remarks>
                Use static Build methods to create instance of this class.
            </remarks>
        </member>
        <member name="M:Majid.Localization.Dictionaries.Json.JsonLocalizationDictionary.#ctor(System.Globalization.CultureInfo)">
            <summary>
                Private constructor.
            </summary>
            <param name="cultureInfo">Culture of the dictionary</param>
        </member>
        <member name="M:Majid.Localization.Dictionaries.Json.JsonLocalizationDictionary.BuildFromFile(System.String)">
            <summary>
                Builds an <see cref="T:Majid.Localization.Dictionaries.Json.JsonLocalizationDictionary" /> from given file.
            </summary>
            <param name="filePath">Path of the file</param>
        </member>
        <member name="M:Majid.Localization.Dictionaries.Json.JsonLocalizationDictionary.BuildFromJsonString(System.String)">
            <summary>
                Builds an <see cref="T:Majid.Localization.Dictionaries.Json.JsonLocalizationDictionary" /> from given json string.
            </summary>
            <param name="jsonString">Json string</param>
        </member>
        <member name="T:Majid.Localization.Dictionaries.Json.JsonLocalizationFile">
            <summary>
            Use it to serialize json file
            </summary>
        </member>
        <member name="M:Majid.Localization.Dictionaries.Json.JsonLocalizationFile.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Majid.Localization.Dictionaries.Json.JsonLocalizationFile.Culture">
            <summary>
            get or set the culture name; eg : en , en-us, zh-CN
            </summary>
        </member>
        <member name="P:Majid.Localization.Dictionaries.Json.JsonLocalizationFile.Texts">
            <summary>
             Key value pairs
            </summary>
        </member>
        <member name="T:Majid.Localization.Dictionaries.LocalizationDictionary">
            <summary>
            Represents a simple implementation of <see cref="T:Majid.Localization.Dictionaries.ILocalizationDictionary"/> interface.
            </summary>
        </member>
        <member name="P:Majid.Localization.Dictionaries.LocalizationDictionary.CultureInfo">
            <inheritdoc/>
        </member>
        <member name="P:Majid.Localization.Dictionaries.LocalizationDictionary.Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Localization.Dictionaries.LocalizationDictionary.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Creates a new <see cref="T:Majid.Localization.Dictionaries.LocalizationDictionary"/> object.
            </summary>
            <param name="cultureInfo">Culture of the dictionary</param>
        </member>
        <member name="M:Majid.Localization.Dictionaries.LocalizationDictionary.GetOrNull(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Localization.Dictionaries.LocalizationDictionary.GetAllStrings">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Localization.Dictionaries.LocalizationDictionary.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Majid.Localization.Dictionaries.Xml.XmlEmbeddedFileLocalizationDictionaryProvider">
            <summary>
            Provides localization dictionaries from XML files embedded into an <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:Majid.Localization.Dictionaries.Xml.XmlEmbeddedFileLocalizationDictionaryProvider.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            Creates a new <see cref="T:Majid.Localization.Dictionaries.Xml.XmlEmbeddedFileLocalizationDictionaryProvider"/> object.
            </summary>
            <param name="assembly">Assembly that contains embedded xml files</param>
            <param name="rootNamespace">Namespace of the embedded xml dictionary files</param>
        </member>
        <member name="T:Majid.Localization.Dictionaries.Xml.XmlFileLocalizationDictionaryProvider">
            <summary>
            Provides localization dictionaries from XML files in a directory.
            </summary>
        </member>
        <member name="M:Majid.Localization.Dictionaries.Xml.XmlFileLocalizationDictionaryProvider.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Majid.Localization.Dictionaries.Xml.XmlFileLocalizationDictionaryProvider"/>.
            </summary>
            <param name="directoryPath">Path of the dictionary that contains all related XML files</param>
        </member>
        <member name="T:Majid.Localization.Dictionaries.Xml.XmlLocalizationDictionary">
            <summary>
            This class is used to build a localization dictionary from XML.
            </summary>
            <remarks>
            Use static Build methods to create instance of this class.
            </remarks>
        </member>
        <member name="M:Majid.Localization.Dictionaries.Xml.XmlLocalizationDictionary.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Private constructor.
            </summary>
            <param name="cultureInfo">Culture of the dictionary</param>
        </member>
        <member name="M:Majid.Localization.Dictionaries.Xml.XmlLocalizationDictionary.BuildFomFile(System.String)">
            <summary>
            Builds an <see cref="T:Majid.Localization.Dictionaries.Xml.XmlLocalizationDictionary"/> from given file.
            </summary>
            <param name="filePath">Path of the file</param>
        </member>
        <member name="M:Majid.Localization.Dictionaries.Xml.XmlLocalizationDictionary.BuildFomXmlString(System.String)">
            <summary>
            Builds an <see cref="T:Majid.Localization.Dictionaries.Xml.XmlLocalizationDictionary"/> from given xml string.
            </summary>
            <param name="xmlString">XML string</param>
        </member>
        <member name="T:Majid.Localization.FixedLocalizableString">
            <summary>
            A class that gets the same string on every localization.
            </summary>
        </member>
        <member name="P:Majid.Localization.FixedLocalizableString.FixedString">
            <summary>
            The fixed string.
            Whenever Localize methods called, this string is returned.
            </summary>
        </member>
        <member name="M:Majid.Localization.FixedLocalizableString.#ctor">
            <summary>
            Needed for serialization.
            </summary>
        </member>
        <member name="M:Majid.Localization.FixedLocalizableString.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:Majid.Localization.FixedLocalizableString"/>.
            </summary>
            <param name="fixedString">
            The fixed string.
            Whenever Localize methods called, this string is returned.
            </param>
        </member>
        <member name="T:Majid.Localization.ILocalizableString">
            <summary>
            Represents a string that can be localized when needed.
            </summary>
        </member>
        <member name="M:Majid.Localization.ILocalizableString.Localize(Majid.Localization.ILocalizationContext)">
            <summary>
            Localizes the string in current culture.
            </summary>
            <param name="context">Localization context</param>
            <returns>Localized string</returns>
        </member>
        <member name="M:Majid.Localization.ILocalizableString.Localize(Majid.Localization.ILocalizationContext,System.Globalization.CultureInfo)">
            <summary>
            Localizes the string in given culture.
            </summary>
            <param name="context">Localization context</param>
            <param name="culture">culture</param>
            <returns>Localized string</returns>
        </member>
        <member name="T:Majid.Localization.ILocalizationContext">
            <summary>
            Localization context.
            </summary>
        </member>
        <member name="P:Majid.Localization.ILocalizationContext.LocalizationManager">
            <summary>
            Gets the localization manager.
            </summary>
        </member>
        <member name="T:Majid.Localization.ILocalizationManager">
            <summary>
            This interface is used to manage localization system.
            </summary>
        </member>
        <member name="M:Majid.Localization.ILocalizationManager.GetSource(System.String)">
            <summary>
            Gets a localization source with name.
            </summary>
            <param name="name">Unique name of the localization source</param>
            <returns>The localization source</returns>
        </member>
        <member name="M:Majid.Localization.ILocalizationManager.GetAllSources">
            <summary>
            Gets all registered localization sources.
            </summary>
            <returns>List of sources</returns>
        </member>
        <member name="T:Majid.Localization.LanguageInfo">
            <summary>
            Represents an available language for the application.
            </summary>
        </member>
        <member name="P:Majid.Localization.LanguageInfo.Name">
            <summary>
            Code name of the language.
            It should be valid culture code.
            Ex: "en-US" for American English, "tr-TR" for Turkey Turkish.
            </summary>
        </member>
        <member name="P:Majid.Localization.LanguageInfo.DisplayName">
            <summary>
            Display name of the language in it's original language.
            Ex: "English" for English, "T�rk�e" for Turkish.
            </summary>
        </member>
        <member name="P:Majid.Localization.LanguageInfo.Icon">
            <summary>
            An icon can be set to display on the UI.
            </summary>
        </member>
        <member name="P:Majid.Localization.LanguageInfo.IsDefault">
            <summary>
            Is this the default language?
            </summary>
        </member>
        <member name="P:Majid.Localization.LanguageInfo.IsDisabled">
            <summary>
            Is this the language disabled?
            </summary>
        </member>
        <member name="P:Majid.Localization.LanguageInfo.IsRightToLeft">
            <summary>
            Is this language Right To Left?
            </summary>
        </member>
        <member name="M:Majid.Localization.LanguageInfo.#ctor(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Majid.Localization.LanguageInfo"/> object.
            </summary>
            <param name="name">
            Code name of the language.
            It should be valid culture code.
            Ex: "en-US" for American English, "tr-TR" for Turkey Turkish.
            </param>
            <param name="displayName">
            Display name of the language in it's original language.
            Ex: "English" for English, "T�rk�e" for Turkish.
            </param>
            <param name="icon">An icon can be set to display on the UI</param>
            <param name="isDefault">Is this the default language?</param>
            <param name="isDisabled">Is this the language disabled?</param>
        </member>
        <member name="T:Majid.Localization.LocalizableString">
            <summary>
            Represents a string that can be localized.
            </summary>
        </member>
        <member name="P:Majid.Localization.LocalizableString.SourceName">
            <summary>
            Unique name of the localization source.
            </summary>
        </member>
        <member name="P:Majid.Localization.LocalizableString.Name">
            <summary>
            Unique Name of the string to be localized.
            </summary>
        </member>
        <member name="M:Majid.Localization.LocalizableString.#ctor">
            <summary>
            Needed for serialization.
            </summary>
        </member>
        <member name="M:Majid.Localization.LocalizableString.#ctor(System.String,System.String)">
            <param name="name">Unique Name of the string to be localized</param>
            <param name="sourceName">Unique name of the localization source</param>
        </member>
        <member name="M:Majid.Localization.LocalizableStringExtensions.Localize(Majid.Localization.ILocalizableString,Majid.Localization.ILocalizationManager)">
            <summary>
            Localizes the string in current culture.
            </summary>
            <param name="localizableString">Localizable string instance</param>
            <param name="localizationManager">Localization manager</param>
            <returns>Localized string</returns>
        </member>
        <member name="M:Majid.Localization.LocalizableStringExtensions.Localize(Majid.Localization.ILocalizableString,Majid.Localization.ILocalizationManager,System.Globalization.CultureInfo)">
            <summary>
            Localizes the string in current culture.
            </summary>
            <param name="localizableString">Localizable string instance</param>
            <param name="localizationManager">Localization manager</param>
            <param name="culture">culture</param>
            <returns>Localized string</returns>
        </member>
        <member name="T:Majid.Localization.LocalizableStringToStringJsonConverter">
            <summary>
            This class can be used to serialize <see cref="T:Majid.Localization.ILocalizableString"/> to <see cref="T:System.String"/> during serialization.
            It does not work for deserialization.
            </summary>
        </member>
        <member name="T:Majid.Localization.LocalizationContext">
            <summary>
            Implements <see cref="T:Majid.Localization.ILocalizationContext"/>.
            </summary>
        </member>
        <member name="M:Majid.Localization.LocalizationContext.#ctor(Majid.Localization.ILocalizationManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Majid.Localization.LocalizationContext"/> class.
            </summary>
            <param name="localizationManager">The localization manager.</param>
        </member>
        <member name="T:Majid.Localization.LocalizationHelper">
            <summary>
            This static class is used to simplify getting localized strings.
            </summary>
        </member>
        <member name="P:Majid.Localization.LocalizationHelper.Manager">
            <summary>
            Gets a reference to the localization manager.
            Inject and use <see cref="T:Majid.Localization.ILocalizationManager"/>
            wherever it's possible, instead of this shortcut.
            </summary>
        </member>
        <member name="M:Majid.Localization.LocalizationHelper.GetSource(System.String)">
            <summary>
            Gets a pre-registered localization source.
            </summary>
        </member>
        <member name="M:Majid.Localization.LocalizationHelper.GetString(System.String,System.String)">
            <summary>
            Gets a localized string in current language.
            </summary>
            <param name="sourceName">Name of the localization source</param>
            <param name="name">Key name to get localized string</param>
            <returns>Localized string</returns>
        </member>
        <member name="M:Majid.Localization.LocalizationHelper.GetString(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets a localized string in specified language.
            </summary>
            <param name="sourceName">Name of the localization source</param>
            <param name="name">Key name to get localized string</param>
            <param name="culture">culture</param>
            <returns>Localized string</returns>
        </member>
        <member name="M:Majid.Localization.LocalizationManager.#ctor(Majid.Localization.ILanguageManager,Majid.Configuration.Startup.ILocalizationConfiguration,Majid.Dependency.IIocResolver)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Majid.Localization.LocalizationManager.GetSource(System.String)">
            <summary>
            Gets a localization source with name.
            </summary>
            <param name="name">Unique name of the localization source</param>
            <returns>The localization source</returns>
        </member>
        <member name="M:Majid.Localization.LocalizationManager.GetAllSources">
            <summary>
            Gets all registered localization sources.
            </summary>
            <returns>List of sources</returns>
        </member>
        <member name="M:Majid.Localization.LocalizationManagerExtensions.GetString(Majid.Localization.ILocalizationManager,Majid.Localization.LocalizableString)">
            <summary>
            Gets a localized string in current language.
            </summary>
            <returns>Localized string</returns>
        </member>
        <member name="M:Majid.Localization.LocalizationManagerExtensions.GetString(Majid.Localization.ILocalizationManager,Majid.Localization.LocalizableString,System.Globalization.CultureInfo)">
            <summary>
            Gets a localized string in specified language.
            </summary>
            <returns>Localized string</returns>
        </member>
        <member name="M:Majid.Localization.LocalizationManagerExtensions.GetString(Majid.Localization.ILocalizationManager,System.String,System.String)">
            <summary>
            Gets a localized string in current language.
            </summary>
            <param name="localizationManager">Localization manager instance</param>
            <param name="sourceName">Name of the localization source</param>
            <param name="name">Key name to get localized string</param>
            <returns>Localized string</returns>
        </member>
        <member name="M:Majid.Localization.LocalizationManagerExtensions.GetString(Majid.Localization.ILocalizationManager,System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets a localized string in specified language.
            </summary>
            <param name="localizationManager">Localization manager instance</param>
            <param name="sourceName">Name of the localization source</param>
            <param name="name">Key name to get localized string</param>
            <param name="culture">culture</param>
            <returns>Localized string</returns>
        </member>
        <member name="T:Majid.Localization.LocalizedString">
            <summary>
            Represents a localized string.
            </summary>
        </member>
        <member name="P:Majid.Localization.LocalizedString.CultureInfo">
            <summary>
            Culture info for this string.
            </summary>
        </member>
        <member name="P:Majid.Localization.LocalizedString.Name">
            <summary>
            Unique Name of the string.
            </summary>
        </member>
        <member name="P:Majid.Localization.LocalizedString.Value">
            <summary>
            Value for the <see cref="P:Majid.Localization.LocalizedString.Name"/>.
            </summary>
        </member>
        <member name="M:Majid.Localization.LocalizedString.#ctor(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Creates a localized string instance.
            </summary>
            <param name="cultureInfo">Culture info for this string</param>
            <param name="name">Unique Name of the string</param>
            <param name="value">Value for the <paramref name="name"/></param>
        </member>
        <member name="P:Majid.Localization.NullLocalizationManager.Instance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="T:Majid.Localization.Sources.ILocalizationSource">
            <summary>
            A Localization Source is used to obtain localized strings.
            </summary>
        </member>
        <member name="P:Majid.Localization.Sources.ILocalizationSource.Name">
            <summary>
            Unique Name of the source.
            </summary>
        </member>
        <member name="M:Majid.Localization.Sources.ILocalizationSource.Initialize(Majid.Configuration.Startup.ILocalizationConfiguration,Majid.Dependency.IIocResolver)">
            <summary>
            This method is called by MAJID before first usage.
            </summary>
        </member>
        <member name="M:Majid.Localization.Sources.ILocalizationSource.GetString(System.String)">
            <summary>
            Gets localized string for given name in current language.
            Fallbacks to default language if not found in current culture.
            </summary>
            <param name="name">Key name</param>
            <returns>Localized string</returns>
        </member>
        <member name="M:Majid.Localization.Sources.ILocalizationSource.GetString(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets localized string for given name and specified culture.
            Fallbacks to default language if not found in given culture.
            </summary>
            <param name="name">Key name</param>
            <param name="culture">culture information</param>
            <returns>Localized string</returns>
        </member>
        <member name="M:Majid.Localization.Sources.ILocalizationSource.GetStringOrNull(System.String,System.Boolean)">
            <summary>
            Gets localized string for given name in current language.
            Returns null if not found.
            </summary>
            <param name="name">Key name</param>
            <param name="tryDefaults">
            True: Fallbacks to default language if not found in current culture.
            </param>
            <returns>Localized string</returns>
        </member>
        <member name="M:Majid.Localization.Sources.ILocalizationSource.GetStringOrNull(System.String,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Gets localized string for given name and specified culture.
            Returns null if not found.
            </summary>
            <param name="name">Key name</param>
            <param name="culture">culture information</param>
            <param name="tryDefaults">
            True: Fallbacks to default language if not found in current culture.
            </param>
            <returns>Localized string</returns>
        </member>
        <member name="M:Majid.Localization.Sources.ILocalizationSource.GetAllStrings(System.Boolean)">
            <summary>
            Gets all strings in current language.
            </summary>
            <param name="includeDefaults">
            True: Fallbacks to default language texts if not found in current culture.
            </param>
        </member>
        <member name="M:Majid.Localization.Sources.ILocalizationSource.GetAllStrings(System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Gets all strings in specified culture.
            </summary>
            <param name="culture">culture information</param>
            <param name="includeDefaults">
            True: Fallbacks to default language texts if not found in current culture.
            </param>
        </member>
        <member name="T:Majid.Localization.Sources.LocalizationSourceExtensionInfo">
            <summary>
            Used to store a localization source extension information.
            </summary>
        </member>
        <member name="P:Majid.Localization.Sources.LocalizationSourceExtensionInfo.SourceName">
            <summary>
            Source name.
            </summary>
        </member>
        <member name="P:Majid.Localization.Sources.LocalizationSourceExtensionInfo.DictionaryProvider">
            <summary>
            Extension dictionaries.
            </summary>
        </member>
        <member name="M:Majid.Localization.Sources.LocalizationSourceExtensionInfo.#ctor(System.String,Majid.Localization.Dictionaries.ILocalizationDictionaryProvider)">
            <summary>
            Creates a new <see cref="T:Majid.Localization.Sources.LocalizationSourceExtensionInfo"/> object.
            </summary>
            <param name="sourceName">Source name</param>
            <param name="dictionaryProvider">Extension dictionaries</param>
        </member>
        <member name="T:Majid.Localization.Sources.LocalizationSourceExtensions">
            <summary>
            Extension methods for <see cref="T:Majid.Localization.Sources.ILocalizationSource"/>.
            </summary>
        </member>
        <member name="M:Majid.Localization.Sources.LocalizationSourceExtensions.GetString(Majid.Localization.Sources.ILocalizationSource,System.String,System.Object[])">
            <summary>
            Get a localized string by formatting string.
            </summary>
            <param name="source">Localization source</param>
            <param name="name">Key name</param>
            <param name="args">Format arguments</param>
            <returns>Formatted and localized string</returns>
        </member>
        <member name="M:Majid.Localization.Sources.LocalizationSourceExtensions.GetString(Majid.Localization.Sources.ILocalizationSource,System.String,System.Globalization.CultureInfo,System.Object[])">
            <summary>
            Get a localized string in given language by formatting string.
            </summary>
            <param name="source">Localization source</param>
            <param name="name">Key name</param>
            <param name="culture">Culture</param>
            <param name="args">Format arguments</param>
            <returns>Formatted and localized string</returns>
        </member>
        <member name="T:Majid.Localization.Sources.NullLocalizationSource">
            <summary>
            Null object pattern for <see cref="T:Majid.Localization.Sources.ILocalizationSource"/>.
            </summary>
        </member>
        <member name="P:Majid.Localization.Sources.NullLocalizationSource.Instance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="T:Majid.Localization.Sources.Resource.ResourceFileLocalizationSource">
            <summary>
            This class is used to simplify to create a localization source that
            uses resource a file.
            </summary>
        </member>
        <member name="P:Majid.Localization.Sources.Resource.ResourceFileLocalizationSource.Name">
            <summary>
            Unique Name of the source.
            </summary>
        </member>
        <member name="P:Majid.Localization.Sources.Resource.ResourceFileLocalizationSource.ResourceManager">
            <summary>
            Reference to the <see cref="P:Majid.Localization.Sources.Resource.ResourceFileLocalizationSource.ResourceManager"/> object related to this localization source.
            </summary>
        </member>
        <member name="M:Majid.Localization.Sources.Resource.ResourceFileLocalizationSource.#ctor(System.String,System.Resources.ResourceManager)">
            <param name="name">Unique Name of the source</param>
            <param name="resourceManager">Reference to the <see cref="P:Majid.Localization.Sources.Resource.ResourceFileLocalizationSource.ResourceManager"/> object related to this localization source</param>
        </member>
        <member name="M:Majid.Localization.Sources.Resource.ResourceFileLocalizationSource.Initialize(Majid.Configuration.Startup.ILocalizationConfiguration,Majid.Dependency.IIocResolver)">
            <summary>
            This method is called by MAJID before first usage.
            </summary>
        </member>
        <member name="M:Majid.Localization.Sources.Resource.ResourceFileLocalizationSource.GetAllStrings(System.Boolean)">
            <summary>
            Gets all strings in current language.
            </summary>
        </member>
        <member name="M:Majid.Localization.Sources.Resource.ResourceFileLocalizationSource.GetAllStrings(System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Gets all strings in specified culture. 
            </summary>
        </member>
        <member name="T:Majid.Logging.IHasLogSeverity">
            <summary>
            Interface to define a <see cref="P:Majid.Logging.IHasLogSeverity.Severity"/> property (see <see cref="T:Majid.Logging.LogSeverity"/>).
            </summary>
        </member>
        <member name="P:Majid.Logging.IHasLogSeverity.Severity">
            <summary>
            Log severity.
            </summary>
        </member>
        <member name="T:Majid.Logging.LoggerExtensions">
            <summary>
            Extensions for <see cref="T:Castle.Core.Logging.ILogger"/>.
            </summary>
        </member>
        <member name="T:Majid.Logging.LogHelper">
            <summary>
            This class can be used to write logs from somewhere where it's a hard to get a reference to the <see cref="T:Castle.Core.Logging.ILogger"/>.
            Normally, use <see cref="T:Castle.Core.Logging.ILogger"/> with property injection wherever it's possible.
            </summary>
        </member>
        <member name="P:Majid.Logging.LogHelper.Logger">
            <summary>
            A reference to the logger.
            </summary>
        </member>
        <member name="T:Majid.Logging.LogSeverity">
            <summary>
            Indicates severity for log.
            </summary>
        </member>
        <member name="F:Majid.Logging.LogSeverity.Debug">
            <summary>
            Debug.
            </summary>
        </member>
        <member name="F:Majid.Logging.LogSeverity.Info">
            <summary>
            Info.
            </summary>
        </member>
        <member name="F:Majid.Logging.LogSeverity.Warn">
            <summary>
            Warn.
            </summary>
        </member>
        <member name="F:Majid.Logging.LogSeverity.Error">
            <summary>
            Error.
            </summary>
        </member>
        <member name="F:Majid.Logging.LogSeverity.Fatal">
            <summary>
            Fatal.
            </summary>
        </member>
        <member name="T:Majid.MajidBootstrapper">
            <summary>
            This is the main class that is responsible to start entire MAJID system.
            Prepares dependency injection and registers core components needed for startup.
            It must be instantiated and initialized (see <see cref="M:Majid.MajidBootstrapper.Initialize"/>) first in an application.
            </summary>
        </member>
        <member name="P:Majid.MajidBootstrapper.StartupModule">
            <summary>
            Get the startup module of the application which depends on other used modules.
            </summary>
        </member>
        <member name="P:Majid.MajidBootstrapper.PlugInSources">
            <summary>
            A list of plug in folders.
            </summary>
        </member>
        <member name="P:Majid.MajidBootstrapper.IocManager">
            <summary>
            Gets IIocManager object used by this class.
            </summary>
        </member>
        <member name="F:Majid.MajidBootstrapper.IsDisposed">
            <summary>
            Is this object disposed before?
            </summary>
        </member>
        <member name="M:Majid.MajidBootstrapper.#ctor(System.Type,System.Action{Majid.MajidBootstrapperOptions})">
            <summary>
            Creates a new <see cref="T:Majid.MajidBootstrapper"/> instance.
            </summary>
            <param name="startupModule">Startup module of the application which depends on other used modules. Should be derived from <see cref="T:Majid.Modules.MajidModule"/>.</param>
            <param name="optionsAction">An action to set options</param>
        </member>
        <member name="M:Majid.MajidBootstrapper.Create``1(System.Action{Majid.MajidBootstrapperOptions})">
            <summary>
            Creates a new <see cref="T:Majid.MajidBootstrapper"/> instance.
            </summary>
            <typeparam name="TStartupModule">Startup module of the application which depends on other used modules. Should be derived from <see cref="T:Majid.Modules.MajidModule"/>.</typeparam>
            <param name="optionsAction">An action to set options</param>
        </member>
        <member name="M:Majid.MajidBootstrapper.Create(System.Type,System.Action{Majid.MajidBootstrapperOptions})">
            <summary>
            Creates a new <see cref="T:Majid.MajidBootstrapper"/> instance.
            </summary>
            <param name="startupModule">Startup module of the application which depends on other used modules. Should be derived from <see cref="T:Majid.Modules.MajidModule"/>.</param>
            <param name="optionsAction">An action to set options</param>
        </member>
        <member name="M:Majid.MajidBootstrapper.Create``1(Majid.Dependency.IIocManager)">
            <summary>
            Creates a new <see cref="T:Majid.MajidBootstrapper"/> instance.
            </summary>
            <typeparam name="TStartupModule">Startup module of the application which depends on other used modules. Should be derived from <see cref="T:Majid.Modules.MajidModule"/>.</typeparam>
            <param name="iocManager">IIocManager that is used to bootstrap the MAJID system</param>
        </member>
        <member name="M:Majid.MajidBootstrapper.Create(System.Type,Majid.Dependency.IIocManager)">
            <summary>
            Creates a new <see cref="T:Majid.MajidBootstrapper"/> instance.
            </summary>
            <param name="startupModule">Startup module of the application which depends on other used modules. Should be derived from <see cref="T:Majid.Modules.MajidModule"/>.</param>
            <param name="iocManager">IIocManager that is used to bootstrap the MAJID system</param>
        </member>
        <member name="M:Majid.MajidBootstrapper.Initialize">
            <summary>
            Initializes the MAJID system.
            </summary>
        </member>
        <member name="M:Majid.MajidBootstrapper.Dispose">
            <summary>
            Disposes the MAJID system.
            </summary>
        </member>
        <member name="P:Majid.MajidBootstrapperOptions.DisableAllInterceptors">
            <summary>
            Used to disable all interceptors added by MAJID.
            </summary>
        </member>
        <member name="P:Majid.MajidBootstrapperOptions.IocManager">
            <summary>
            IIocManager that is used to bootstrap the MAJID system. If set to null, uses global <see cref="P:Majid.Dependency.IocManager.Instance"/>
            </summary>
        </member>
        <member name="P:Majid.MajidBootstrapperOptions.PlugInSources">
            <summary>
            List of plugin sources.
            </summary>
        </member>
        <member name="T:Majid.MajidConsts">
            <summary>
                Used to define some constants for MAJID.
            </summary>
        </member>
        <member name="F:Majid.MajidConsts.LocalizationSourceName">
            <summary>
                Localization source name of ASP.NET Boilerplate framework.
            </summary>
        </member>
        <member name="T:Majid.MajidException">
            <summary>
            Base exception type for those are thrown by Majid system for Majid specific exceptions.
            </summary>
        </member>
        <member name="M:Majid.MajidException.#ctor">
            <summary>
            Creates a new <see cref="T:Majid.MajidException"/> object.
            </summary>
        </member>
        <member name="M:Majid.MajidException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new <see cref="T:Majid.MajidException"/> object.
            </summary>
        </member>
        <member name="M:Majid.MajidException.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Majid.MajidException"/> object.
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:Majid.MajidException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new <see cref="T:Majid.MajidException"/> object.
            </summary>
            <param name="message">Exception message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="T:Majid.MajidInitializationException">
            <summary>
            This exception is thrown if a problem on MAJID initialization progress.
            </summary>
        </member>
        <member name="M:Majid.MajidInitializationException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Majid.MajidInitializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for serializing.
            </summary>
        </member>
        <member name="M:Majid.MajidInitializationException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:Majid.MajidInitializationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="T:Majid.MajidKernelModule">
            <summary>
            Kernel (core) module of the MAJID system.
            No need to depend on this, it's automatically the first module always.
            </summary>
        </member>
        <member name="T:Majid.MajidServiceBase">
            <summary>
            This class can be used as a base class for services.
            It has some useful objects property-injected and has some basic methods
            most of services may need to.
            </summary>
        </member>
        <member name="P:Majid.MajidServiceBase.SettingManager">
            <summary>
            Reference to the setting manager.
            </summary>
        </member>
        <member name="P:Majid.MajidServiceBase.UnitOfWorkManager">
            <summary>
            Reference to <see cref="T:Majid.Domain.Uow.IUnitOfWorkManager"/>.
            </summary>
        </member>
        <member name="P:Majid.MajidServiceBase.CurrentUnitOfWork">
            <summary>
            Gets current unit of work.
            </summary>
        </member>
        <member name="P:Majid.MajidServiceBase.LocalizationManager">
            <summary>
            Reference to the localization manager.
            </summary>
        </member>
        <member name="P:Majid.MajidServiceBase.LocalizationSourceName">
            <summary>
            Gets/sets name of the localization source that is used in this application service.
            It must be set in order to use <see cref="M:Majid.MajidServiceBase.L(System.String)"/> and <see cref="M:Majid.MajidServiceBase.L(System.String,System.Globalization.CultureInfo)"/> methods.
            </summary>
        </member>
        <member name="P:Majid.MajidServiceBase.LocalizationSource">
            <summary>
            Gets localization source.
            It's valid if <see cref="P:Majid.MajidServiceBase.LocalizationSourceName"/> is set.
            </summary>
        </member>
        <member name="P:Majid.MajidServiceBase.Logger">
            <summary>
            Reference to the logger to write logs.
            </summary>
        </member>
        <member name="P:Majid.MajidServiceBase.ObjectMapper">
            <summary>
            Reference to the object to object mapper.
            </summary>
        </member>
        <member name="M:Majid.MajidServiceBase.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Majid.MajidServiceBase.L(System.String)">
            <summary>
            Gets localized string for given key name and current language.
            </summary>
            <param name="name">Key name</param>
            <returns>Localized string</returns>
        </member>
        <member name="M:Majid.MajidServiceBase.L(System.String,System.Object[])">
            <summary>
            Gets localized string for given key name and current language with formatting strings.
            </summary>
            <param name="name">Key name</param>
            <param name="args">Format arguments</param>
            <returns>Localized string</returns>
        </member>
        <member name="M:Majid.MajidServiceBase.L(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets localized string for given key name and specified culture information.
            </summary>
            <param name="name">Key name</param>
            <param name="culture">culture information</param>
            <returns>Localized string</returns>
        </member>
        <member name="M:Majid.MajidServiceBase.L(System.String,System.Globalization.CultureInfo,System.Object[])">
            <summary>
            Gets localized string for given key name and current language with formatting strings.
            </summary>
            <param name="name">Key name</param>
            <param name="culture">culture information</param>
            <param name="args">Format arguments</param>
            <returns>Localized string</returns>
        </member>
        <member name="T:Majid.Modules.DependsOnAttribute">
            <summary>
            Used to define dependencies of an MAJID module to other modules.
            It should be used for a class derived from <see cref="T:Majid.Modules.MajidModule"/>.
            </summary>
        </member>
        <member name="P:Majid.Modules.DependsOnAttribute.DependedModuleTypes">
            <summary>
            Types of depended modules.
            </summary>
        </member>
        <member name="M:Majid.Modules.DependsOnAttribute.#ctor(System.Type[])">
            <summary>
            Used to define dependencies of an MAJID module to other modules.
            </summary>
            <param name="dependedModuleTypes">Types of depended modules</param>
        </member>
        <member name="T:Majid.Modules.MajidModule">
            <summary>
            This class must be implemented by all module definition classes.
            </summary>
            <remarks>
            A module definition class is generally located in it's own assembly
            and implements some action in module events on application startup and shutdown.
            It also defines depended modules.
            </remarks>
        </member>
        <member name="P:Majid.Modules.MajidModule.IocManager">
            <summary>
            Gets a reference to the IOC manager.
            </summary>
        </member>
        <member name="P:Majid.Modules.MajidModule.Configuration">
            <summary>
            Gets a reference to the MAJID configuration.
            </summary>
        </member>
        <member name="P:Majid.Modules.MajidModule.Logger">
            <summary>
            Gets or sets the logger.
            </summary>
        </member>
        <member name="M:Majid.Modules.MajidModule.PreInitialize">
            <summary>
            This is the first event called on application startup. 
            Codes can be placed here to run before dependency injection registrations.
            </summary>
        </member>
        <member name="M:Majid.Modules.MajidModule.Initialize">
            <summary>
            This method is used to register dependencies for this module.
            </summary>
        </member>
        <member name="M:Majid.Modules.MajidModule.PostInitialize">
            <summary>
            This method is called lastly on application startup.
            </summary>
        </member>
        <member name="M:Majid.Modules.MajidModule.Shutdown">
            <summary>
            This method is called when the application is being shutdown.
            </summary>
        </member>
        <member name="M:Majid.Modules.MajidModule.IsMajidModule(System.Type)">
            <summary>
            Checks if given type is an Majid module class.
            </summary>
            <param name="type">Type to check</param>
        </member>
        <member name="M:Majid.Modules.MajidModule.FindDependedModuleTypes(System.Type)">
            <summary>
            Finds direct depended modules of a module (excluding given module).
            </summary>
        </member>
        <member name="T:Majid.Modules.MajidModuleCollection">
            <summary>
            Used to store MajidModuleInfo objects as a dictionary.
            </summary>
        </member>
        <member name="M:Majid.Modules.MajidModuleCollection.GetModule``1">
            <summary>
            Gets a reference to a module instance.
            </summary>
            <typeparam name="TModule">Module type</typeparam>
            <returns>Reference to the module instance</returns>
        </member>
        <member name="M:Majid.Modules.MajidModuleCollection.GetSortedModuleListByDependency">
            <summary>
            Sorts modules according to dependencies.
            If module A depends on module B, A comes after B in the returned List.
            </summary>
            <returns>Sorted list</returns>
        </member>
        <member name="T:Majid.Modules.MajidModuleInfo">
            <summary>
            Used to store all needed information for a module.
            </summary>
        </member>
        <member name="P:Majid.Modules.MajidModuleInfo.Assembly">
            <summary>
            The assembly which contains the module definition.
            </summary>
        </member>
        <member name="P:Majid.Modules.MajidModuleInfo.Type">
            <summary>
            Type of the module.
            </summary>
        </member>
        <member name="P:Majid.Modules.MajidModuleInfo.Instance">
            <summary>
            Instance of the module.
            </summary>
        </member>
        <member name="P:Majid.Modules.MajidModuleInfo.IsLoadedAsPlugIn">
            <summary>
            Is this module loaded as a plugin.
            </summary>
        </member>
        <member name="P:Majid.Modules.MajidModuleInfo.Dependencies">
            <summary>
            All dependent modules of this module.
            </summary>
        </member>
        <member name="M:Majid.Modules.MajidModuleInfo.#ctor(System.Type,Majid.Modules.MajidModule,System.Boolean)">
            <summary>
            Creates a new MajidModuleInfo object.
            </summary>
        </member>
        <member name="T:Majid.Modules.MajidModuleManager">
            <summary>
            This class is used to manage modules.
            </summary>
        </member>
        <member name="F:Majid.MultiTenancy.MultiTenancyConsts.DefaultTenantId">
            <summary>
            Default tenant id: 1.
            </summary>
        </member>
        <member name="T:Majid.MultiTenancy.MultiTenancyExtensions">
            <summary>
            Extension methods for multi-tenancy.
            </summary>
        </member>
        <member name="M:Majid.MultiTenancy.MultiTenancyExtensions.GetMultiTenancySide(Majid.Domain.Entities.IMayHaveTenant)">
            <summary>
            Gets multi-tenancy side (<see cref="T:Majid.MultiTenancy.MultiTenancySides"/>) of an object that implements <see cref="T:Majid.Domain.Entities.IMayHaveTenant"/>.
            </summary>
            <param name="obj">The object</param>
        </member>
        <member name="M:Majid.MultiTenancy.MultiTenancyHelper.IsTenantEntity(System.Object,System.Nullable{System.Int32})">
            <param name="entity">The entity to check</param>
            <param name="expectedTenantId">TenantId or null for host</param>
        </member>
        <member name="T:Majid.MultiTenancy.MultiTenancySideAttribute">
            <summary>
            Used to declare multi tenancy side of an object.
            </summary>
        </member>
        <member name="P:Majid.MultiTenancy.MultiTenancySideAttribute.Side">
            <summary>
            Multitenancy side.
            </summary>
        </member>
        <member name="M:Majid.MultiTenancy.MultiTenancySideAttribute.#ctor(Majid.MultiTenancy.MultiTenancySides)">
            <summary>
            Initializes a new instance of the <see cref="T:Majid.MultiTenancy.MultiTenancySideAttribute"/> class.
            </summary>
            <param name="side">Multitenancy side.</param>
        </member>
        <member name="T:Majid.MultiTenancy.MultiTenancySides">
            <summary>
            Represents sides in a multi tenancy application.
            </summary>
        </member>
        <member name="F:Majid.MultiTenancy.MultiTenancySides.Tenant">
            <summary>
            Tenant side.
            </summary>
        </member>
        <member name="F:Majid.MultiTenancy.MultiTenancySides.Host">
            <summary>
            Host (tenancy owner) side.
            </summary>
        </member>
        <member name="T:Majid.NamedTypeSelector">
            <summary>
            Used to represent a named type selector.
            </summary>
        </member>
        <member name="P:Majid.NamedTypeSelector.Name">
            <summary>
            Name of the selector.
            </summary>
        </member>
        <member name="P:Majid.NamedTypeSelector.Predicate">
            <summary>
            Predicate.
            </summary>
        </member>
        <member name="M:Majid.NamedTypeSelector.#ctor(System.String,System.Func{System.Type,System.Boolean})">
            <summary>
            Creates new <see cref="T:Majid.NamedTypeSelector"/> object.
            </summary>
            <param name="name">Name</param>
            <param name="predicate">Predicate</param>
        </member>
        <member name="M:Majid.NamedTypeSelectorListExtensions.Add(System.Collections.Generic.IList{Majid.NamedTypeSelector},System.String,System.Type[])">
            <summary>
            Add list of types to the list.
            </summary>
            <param name="list">List of NamedTypeSelector items</param>
            <param name="name">An arbitrary but unique name (can be later used to remove types from the list)</param>
            <param name="types"></param>
        </member>
        <member name="T:Majid.NameValue">
            <summary>
            Can be used to store Name/Value (or Key/Value) pairs.
            </summary>
        </member>
        <member name="M:Majid.NameValue.#ctor">
            <summary>
            Creates a new <see cref="T:Majid.NameValue"/>.
            </summary>
        </member>
        <member name="M:Majid.NameValue.#ctor(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Majid.NameValue"/>.
            </summary>
        </member>
        <member name="T:Majid.NameValue`1">
            <summary>
            Can be used to store Name/Value (or Key/Value) pairs.
            </summary>
        </member>
        <member name="P:Majid.NameValue`1.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:Majid.NameValue`1.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="M:Majid.NameValue`1.#ctor">
            <summary>
            Creates a new <see cref="T:Majid.NameValue"/>.
            </summary>
        </member>
        <member name="M:Majid.NameValue`1.#ctor(System.String,`0)">
            <summary>
            Creates a new <see cref="T:Majid.NameValue"/>.
            </summary>
        </member>
        <member name="T:Majid.Net.Mail.EmailSenderBase">
            <summary>
            This class can be used as base to implement <see cref="T:Majid.Net.Mail.IEmailSender"/>.
            </summary>
        </member>
        <member name="M:Majid.Net.Mail.EmailSenderBase.#ctor(Majid.Net.Mail.IEmailSenderConfiguration)">
            <summary>
            Constructor.
            </summary>
            <param name="configuration">Configuration</param>
        </member>
        <member name="M:Majid.Net.Mail.EmailSenderBase.SendEmailAsync(System.Net.Mail.MailMessage)">
            <summary>
            Should implement this method to send email in derived classes.
            </summary>
            <param name="mail">Mail to be sent</param>
        </member>
        <member name="M:Majid.Net.Mail.EmailSenderBase.SendEmail(System.Net.Mail.MailMessage)">
            <summary>
            Should implement this method to send email in derived classes.
            </summary>
            <param name="mail">Mail to be sent</param>
        </member>
        <member name="M:Majid.Net.Mail.EmailSenderBase.NormalizeMail(System.Net.Mail.MailMessage)">
            <summary>
            Normalizes given email.
            Fills <see cref="P:System.Net.Mail.MailMessage.From"/> if it's not filled before.
            Sets encodings to UTF8 if they are not set before.
            </summary>
            <param name="mail">Mail to be normalized</param>
        </member>
        <member name="T:Majid.Net.Mail.EmailSenderConfiguration">
            <summary>
            Implementation of <see cref="T:Majid.Net.Mail.IEmailSenderConfiguration"/> that reads settings
            from <see cref="T:Majid.Configuration.ISettingManager"/>.
            </summary>
        </member>
        <member name="M:Majid.Net.Mail.EmailSenderConfiguration.#ctor(Majid.Configuration.ISettingManager)">
            <summary>
            Creates a new <see cref="T:Majid.Net.Mail.EmailSenderConfiguration"/>.
            </summary>
        </member>
        <member name="M:Majid.Net.Mail.EmailSenderConfiguration.GetNotEmptySettingValue(System.String)">
            <summary>
            Gets a setting value by checking. Throws <see cref="T:Majid.MajidException"/> if it's null or empty.
            </summary>
            <param name="name">Name of the setting</param>
            <returns>Value of the setting</returns>
        </member>
        <member name="T:Majid.Net.Mail.EmailSettingNames">
            <summary>
            Declares names of the settings defined by <see cref="T:Majid.Net.Mail.EmailSettingProvider"/>.
            </summary>
        </member>
        <member name="F:Majid.Net.Mail.EmailSettingNames.DefaultFromAddress">
            <summary>
            Majid.Net.Mail.DefaultFromAddress
            </summary>
        </member>
        <member name="F:Majid.Net.Mail.EmailSettingNames.DefaultFromDisplayName">
            <summary>
            Majid.Net.Mail.DefaultFromDisplayName
            </summary>
        </member>
        <member name="T:Majid.Net.Mail.EmailSettingNames.Smtp">
            <summary>
            SMTP related email settings.
            </summary>
        </member>
        <member name="F:Majid.Net.Mail.EmailSettingNames.Smtp.Host">
            <summary>
            Majid.Net.Mail.Smtp.Host
            </summary>
        </member>
        <member name="F:Majid.Net.Mail.EmailSettingNames.Smtp.Port">
            <summary>
            Majid.Net.Mail.Smtp.Port
            </summary>
        </member>
        <member name="F:Majid.Net.Mail.EmailSettingNames.Smtp.UserName">
            <summary>
            Majid.Net.Mail.Smtp.UserName
            </summary>
        </member>
        <member name="F:Majid.Net.Mail.EmailSettingNames.Smtp.Password">
            <summary>
            Majid.Net.Mail.Smtp.Password
            </summary>
        </member>
        <member name="F:Majid.Net.Mail.EmailSettingNames.Smtp.Domain">
            <summary>
            Majid.Net.Mail.Smtp.Domain
            </summary>
        </member>
        <member name="F:Majid.Net.Mail.EmailSettingNames.Smtp.EnableSsl">
            <summary>
            Majid.Net.Mail.Smtp.EnableSsl
            </summary>
        </member>
        <member name="F:Majid.Net.Mail.EmailSettingNames.Smtp.UseDefaultCredentials">
            <summary>
            Majid.Net.Mail.Smtp.UseDefaultCredentials
            </summary>
        </member>
        <member name="T:Majid.Net.Mail.EmailSettingProvider">
            <summary>
            Defines settings to send emails.
            <see cref="T:Majid.Net.Mail.EmailSettingNames"/> for all available configurations.
            </summary>
        </member>
        <member name="T:Majid.Net.Mail.IEmailSender">
            <summary>
            This service can be used simply sending emails.
            </summary>
        </member>
        <member name="M:Majid.Net.Mail.IEmailSender.SendAsync(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sends an email.
            </summary>
        </member>
        <member name="M:Majid.Net.Mail.IEmailSender.Send(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sends an email.
            </summary>
        </member>
        <member name="M:Majid.Net.Mail.IEmailSender.SendAsync(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sends an email.
            </summary>
        </member>
        <member name="M:Majid.Net.Mail.IEmailSender.Send(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sends an email.
            </summary>
        </member>
        <member name="M:Majid.Net.Mail.IEmailSender.Send(System.Net.Mail.MailMessage,System.Boolean)">
            <summary>
            Sends an email.
            </summary>
            <param name="mail">Mail to be sent</param>
            <param name="normalize">
            Should normalize email?
            If true, it sets sender address/name if it's not set before and makes mail encoding UTF-8. 
            </param>
        </member>
        <member name="M:Majid.Net.Mail.IEmailSender.SendAsync(System.Net.Mail.MailMessage,System.Boolean)">
            <summary>
            Sends an email.
            </summary>
            <param name="mail">Mail to be sent</param>
            <param name="normalize">
            Should normalize email?
            If true, it sets sender address/name if it's not set before and makes mail encoding UTF-8. 
            </param>
        </member>
        <member name="T:Majid.Net.Mail.IEmailSenderConfiguration">
            <summary>
            Defines configurations used while sending emails.
            </summary>
        </member>
        <member name="P:Majid.Net.Mail.IEmailSenderConfiguration.DefaultFromAddress">
            <summary>
            Default from address.
            </summary>
        </member>
        <member name="P:Majid.Net.Mail.IEmailSenderConfiguration.DefaultFromDisplayName">
            <summary>
            Default display name.
            </summary>
        </member>
        <member name="T:Majid.Net.Mail.NullEmailSender">
            <summary>
            This class is an implementation of <see cref="T:Majid.Net.Mail.IEmailSender"/> as similar to null pattern.
            It does not send emails but logs them.
            </summary>
        </member>
        <member name="M:Majid.Net.Mail.NullEmailSender.#ctor(Majid.Net.Mail.IEmailSenderConfiguration)">
            <summary>
            Creates a new <see cref="T:Majid.Net.Mail.NullEmailSender"/> object.
            </summary>
            <param name="configuration">Configuration</param>
        </member>
        <member name="T:Majid.Net.Mail.Smtp.ISmtpEmailSender">
            <summary>
            Used to send emails over SMTP.
            </summary>
        </member>
        <member name="M:Majid.Net.Mail.Smtp.ISmtpEmailSender.BuildClient">
            <summary>
            Creates and configures new <see cref="T:System.Net.Mail.SmtpClient"/> object to send emails.
            </summary>
            <returns>
            An <see cref="T:System.Net.Mail.SmtpClient"/> object that is ready to send emails.
            </returns>
        </member>
        <member name="T:Majid.Net.Mail.Smtp.ISmtpEmailSenderConfiguration">
            <summary>
            Defines configurations to used by SmtpClient object.
            </summary>
        </member>
        <member name="P:Majid.Net.Mail.Smtp.ISmtpEmailSenderConfiguration.Host">
            <summary>
            SMTP Host name/IP.
            </summary>
        </member>
        <member name="P:Majid.Net.Mail.Smtp.ISmtpEmailSenderConfiguration.Port">
            <summary>
            SMTP Port.
            </summary>
        </member>
        <member name="P:Majid.Net.Mail.Smtp.ISmtpEmailSenderConfiguration.UserName">
            <summary>
            User name to login to SMTP server.
            </summary>
        </member>
        <member name="P:Majid.Net.Mail.Smtp.ISmtpEmailSenderConfiguration.Password">
            <summary>
            Password to login to SMTP server.
            </summary>
        </member>
        <member name="P:Majid.Net.Mail.Smtp.ISmtpEmailSenderConfiguration.Domain">
            <summary>
            Domain name to login to SMTP server.
            </summary>
        </member>
        <member name="P:Majid.Net.Mail.Smtp.ISmtpEmailSenderConfiguration.EnableSsl">
            <summary>
            Is SSL enabled?
            </summary>
        </member>
        <member name="P:Majid.Net.Mail.Smtp.ISmtpEmailSenderConfiguration.UseDefaultCredentials">
            <summary>
            Use default credentials?
            </summary>
        </member>
        <member name="T:Majid.Net.Mail.Smtp.SmtpEmailSender">
            <summary>
            Used to send emails over SMTP.
            </summary>
        </member>
        <member name="M:Majid.Net.Mail.Smtp.SmtpEmailSender.#ctor(Majid.Net.Mail.Smtp.ISmtpEmailSenderConfiguration)">
            <summary>
            Creates a new <see cref="T:Majid.Net.Mail.Smtp.SmtpEmailSender"/>.
            </summary>
            <param name="configuration">Configuration</param>
        </member>
        <member name="T:Majid.Net.Mail.Smtp.SmtpEmailSenderConfiguration">
            <summary>
            Implementation of <see cref="T:Majid.Net.Mail.Smtp.ISmtpEmailSenderConfiguration"/> that reads settings
            from <see cref="T:Majid.Configuration.ISettingManager"/>.
            </summary>
        </member>
        <member name="P:Majid.Net.Mail.Smtp.SmtpEmailSenderConfiguration.Host">
            <summary>
            SMTP Host name/IP.
            </summary>
        </member>
        <member name="P:Majid.Net.Mail.Smtp.SmtpEmailSenderConfiguration.Port">
            <summary>
            SMTP Port.
            </summary>
        </member>
        <member name="P:Majid.Net.Mail.Smtp.SmtpEmailSenderConfiguration.UserName">
            <summary>
            User name to login to SMTP server.
            </summary>
        </member>
        <member name="P:Majid.Net.Mail.Smtp.SmtpEmailSenderConfiguration.Password">
            <summary>
            Password to login to SMTP server.
            </summary>
        </member>
        <member name="P:Majid.Net.Mail.Smtp.SmtpEmailSenderConfiguration.Domain">
            <summary>
            Domain name to login to SMTP server.
            </summary>
        </member>
        <member name="P:Majid.Net.Mail.Smtp.SmtpEmailSenderConfiguration.EnableSsl">
            <summary>
            Is SSL enabled?
            </summary>
        </member>
        <member name="P:Majid.Net.Mail.Smtp.SmtpEmailSenderConfiguration.UseDefaultCredentials">
            <summary>
            Use default credentials?
            </summary>
        </member>
        <member name="M:Majid.Net.Mail.Smtp.SmtpEmailSenderConfiguration.#ctor(Majid.Configuration.ISettingManager)">
            <summary>
            Creates a new <see cref="T:Majid.Net.Mail.Smtp.SmtpEmailSenderConfiguration"/>.
            </summary>
            <param name="settingManager">Setting manager</param>
        </member>
        <member name="T:Majid.Notifications.INotificationConfiguration">
            <summary>
            Used to configure notification system.
            </summary>
        </member>
        <member name="P:Majid.Notifications.INotificationConfiguration.Providers">
            <summary>
            Notification providers.
            </summary>
        </member>
        <member name="T:Majid.Notifications.INotificationDefinitionContext">
            <summary>
            Used as a context while defining notifications.
            </summary>
        </member>
        <member name="P:Majid.Notifications.INotificationDefinitionContext.Manager">
            <summary>
            Gets the notification definition manager.
            </summary>
        </member>
        <member name="T:Majid.Notifications.INotificationDefinitionManager">
            <summary>
            Used to manage notification definitions.
            </summary>
        </member>
        <member name="M:Majid.Notifications.INotificationDefinitionManager.Add(Majid.Notifications.NotificationDefinition)">
            <summary>
            Adds the specified notification definition.
            </summary>
        </member>
        <member name="M:Majid.Notifications.INotificationDefinitionManager.Get(System.String)">
            <summary>
            Gets a notification definition by name.
            Throws exception if there is no notification definition with given name.
            </summary>
        </member>
        <member name="M:Majid.Notifications.INotificationDefinitionManager.GetOrNull(System.String)">
            <summary>
            Gets a notification definition by name.
            Returns null if there is no notification definition with given name.
            </summary>
        </member>
        <member name="M:Majid.Notifications.INotificationDefinitionManager.GetAll">
            <summary>
            Gets all notification definitions.
            </summary>
        </member>
        <member name="M:Majid.Notifications.INotificationDefinitionManager.IsAvailableAsync(System.String,Majid.UserIdentifier)">
            <summary>
            Checks if given notification (<see cref="!:name"/>) is available for given user.
            </summary>
        </member>
        <member name="M:Majid.Notifications.INotificationDefinitionManager.GetAllAvailableAsync(Majid.UserIdentifier)">
            <summary>
            Gets all available notification definitions for given user.
            </summary>
            <param name="user">User.</param>
        </member>
        <member name="M:Majid.Notifications.INotificationDefinitionManager.Remove(System.String)">
            <summary>
            Remove notification with given name
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Majid.Notifications.INotificationDistributer">
            <summary>
            Used to distribute notifications to users.
            </summary>
        </member>
        <member name="M:Majid.Notifications.INotificationDistributer.DistributeAsync(System.Guid)">
            <summary>
            Distributes given notification to users.
            </summary>
            <param name="notificationId">The notification id.</param>
        </member>
        <member name="T:Majid.Notifications.INotificationPublisher">
            <summary>
            Used to publish notifications.
            </summary>
        </member>
        <member name="M:Majid.Notifications.INotificationPublisher.PublishAsync(System.String,Majid.Notifications.NotificationData,Majid.Domain.Entities.EntityIdentifier,Majid.Notifications.NotificationSeverity,Majid.UserIdentifier[],Majid.UserIdentifier[],System.Nullable{System.Int32}[])">
            <summary>
            Publishes a new notification.
            </summary>
            <param name="notificationName">Unique notification name</param>
            <param name="data">Notification data (optional)</param>
            <param name="entityIdentifier">The entity identifier if this notification is related to an entity</param>
            <param name="severity">Notification severity</param>
            <param name="userIds">
            Target user id(s). 
            Used to send notification to specific user(s) (without checking the subscription). 
            If this is null/empty, the notification is sent to subscribed users.
            </param>
            <param name="excludedUserIds">
            Excluded user id(s).
            This can be set to exclude some users while publishing notifications to subscribed users.
            It's normally not set if <see cref="!:userIds"/> is set.
            </param>
            <param name="tenantIds">
            Target tenant id(s).
            Used to send notification to subscribed users of specific tenant(s).
            This should not be set if <see cref="!:userIds"/> is set.
            <see cref="P:Majid.Notifications.NotificationPublisher.AllTenants"/> can be passed to indicate all tenants.
            But this can only work in a single database approach (all tenants are stored in host database).
            If this is null, then it's automatically set to the current tenant on <see cref="P:Majid.Runtime.Session.IMajidSession.TenantId"/>. 
            </param>
        </member>
        <member name="T:Majid.Notifications.INotificationStore">
            <summary>
            Used to store (persist) notifications.
            </summary>
        </member>
        <member name="M:Majid.Notifications.INotificationStore.InsertSubscriptionAsync(Majid.Notifications.NotificationSubscriptionInfo)">
            <summary>
            Inserts a notification subscription.
            </summary>
        </member>
        <member name="M:Majid.Notifications.INotificationStore.DeleteSubscriptionAsync(Majid.UserIdentifier,System.String,System.String,System.String)">
            <summary>
            Deletes a notification subscription.
            </summary>
        </member>
        <member name="M:Majid.Notifications.INotificationStore.InsertNotificationAsync(Majid.Notifications.NotificationInfo)">
            <summary>
            Inserts a notification.
            </summary>
        </member>
        <member name="M:Majid.Notifications.INotificationStore.GetNotificationOrNullAsync(System.Guid)">
            <summary>
            Gets a notification by Id, or returns null if not found.
            </summary>
        </member>
        <member name="M:Majid.Notifications.INotificationStore.InsertUserNotificationAsync(Majid.Notifications.UserNotificationInfo)">
            <summary>
            Inserts a user notification.
            </summary>
        </member>
        <member name="M:Majid.Notifications.INotificationStore.GetSubscriptionsAsync(System.String,System.String,System.String)">
            <summary>
            Gets subscriptions for a notification.
            </summary>
        </member>
        <member name="M:Majid.Notifications.INotificationStore.GetSubscriptionsAsync(System.Nullable{System.Int32}[],System.String,System.String,System.String)">
            <summary>
            Gets subscriptions for a notification for specified tenant(s).
            </summary>
        </member>
        <member name="M:Majid.Notifications.INotificationStore.GetSubscriptionsAsync(Majid.UserIdentifier)">
            <summary>
            Gets subscriptions for a user.
            </summary>
        </member>
        <member name="M:Majid.Notifications.INotificationStore.IsSubscribedAsync(Majid.UserIdentifier,System.String,System.String,System.String)">
            <summary>
            Checks if a user subscribed for a notification
            </summary>
        </member>
        <member name="M:Majid.Notifications.INotificationStore.UpdateUserNotificationStateAsync(System.Nullable{System.Int32},System.Guid,Majid.Notifications.UserNotificationState)">
            <summary>
            Updates a user notification state.
            </summary>
        </member>
        <member name="M:Majid.Notifications.INotificationStore.UpdateAllUserNotificationStatesAsync(Majid.UserIdentifier,Majid.Notifications.UserNotificationState)">
            <summary>
            Updates all notification states for a user.
            </summary>
        </member>
        <member name="M:Majid.Notifications.INotificationStore.DeleteUserNotificationAsync(System.Nullable{System.Int32},System.Guid)">
            <summary>
            Deletes a user notification.
            </summary>
        </member>
        <member name="M:Majid.Notifications.INotificationStore.DeleteAllUserNotificationsAsync(Majid.UserIdentifier)">
            <summary>
            Deletes all notifications of a user.
            </summary>
        </member>
        <member name="M:Majid.Notifications.INotificationStore.GetUserNotificationsWithNotificationsAsync(Majid.UserIdentifier,System.Nullable{Majid.Notifications.UserNotificationState},System.Int32,System.Int32)">
            <summary>
            Gets notifications of a user.
            </summary>
            <param name="user">User.</param>
            <param name="skipCount">Skip count.</param>
            <param name="maxResultCount">Maximum result count.</param>
            <param name="state">State</param>
        </member>
        <member name="M:Majid.Notifications.INotificationStore.GetUserNotificationCountAsync(Majid.UserIdentifier,System.Nullable{Majid.Notifications.UserNotificationState})">
            <summary>
            Gets user notification count.
            </summary>
            <param name="user">User.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Majid.Notifications.INotificationStore.GetUserNotificationWithNotificationOrNullAsync(System.Nullable{System.Int32},System.Guid)">
            <summary>
            Gets a user notification.
            </summary>
            <param name="tenantId">Tenant Id</param>
            <param name="userNotificationId">Skip count.</param>
        </member>
        <member name="M:Majid.Notifications.INotificationStore.InsertTenantNotificationAsync(Majid.Notifications.TenantNotificationInfo)">
            <summary>
            Inserts notification for a tenant.
            </summary>
        </member>
        <member name="M:Majid.Notifications.INotificationStore.DeleteNotificationAsync(Majid.Notifications.NotificationInfo)">
            <summary>
            Deletes the notification.
            </summary>
            <param name="notification">The notification.</param>
        </member>
        <member name="T:Majid.Notifications.INotificationSubscriptionManager">
            <summary>
            Used to manage subscriptions for notifications.
            </summary>
        </member>
        <member name="M:Majid.Notifications.INotificationSubscriptionManager.SubscribeAsync(Majid.UserIdentifier,System.String,Majid.Domain.Entities.EntityIdentifier)">
            <summary>
            Subscribes to a notification for given user and notification informations.
            </summary>
            <param name="user">User</param>
            <param name="notificationName">Name of the notification.</param>
            <param name="entityIdentifier">entity identifier</param>
        </member>
        <member name="M:Majid.Notifications.INotificationSubscriptionManager.SubscribeToAllAvailableNotificationsAsync(Majid.UserIdentifier)">
            <summary>
            Subscribes to all available notifications for given user.
            It does not subscribe entity related notifications.
            </summary>
            <param name="user">User.</param>
        </member>
        <member name="M:Majid.Notifications.INotificationSubscriptionManager.UnsubscribeAsync(Majid.UserIdentifier,System.String,Majid.Domain.Entities.EntityIdentifier)">
            <summary>
            Unsubscribes from a notification.
            </summary>
            <param name="user">User.</param>
            <param name="notificationName">Name of the notification.</param>
            <param name="entityIdentifier">entity identifier</param>
        </member>
        <member name="M:Majid.Notifications.INotificationSubscriptionManager.GetSubscriptionsAsync(System.String,Majid.Domain.Entities.EntityIdentifier)">
            <summary>
            Gets all subscribtions for given notification (including all tenants).
            This only works for single database approach in a multitenant application!
            </summary>
            <param name="notificationName">Name of the notification.</param>
            <param name="entityIdentifier">entity identifier</param>
        </member>
        <member name="M:Majid.Notifications.INotificationSubscriptionManager.GetSubscriptionsAsync(System.Nullable{System.Int32},System.String,Majid.Domain.Entities.EntityIdentifier)">
            <summary>
            Gets all subscribtions for given notification.
            </summary>
            <param name="tenantId">Tenant id. Null for the host.</param>
            <param name="notificationName">Name of the notification.</param>
            <param name="entityIdentifier">entity identifier</param>
        </member>
        <member name="M:Majid.Notifications.INotificationSubscriptionManager.GetSubscribedNotificationsAsync(Majid.UserIdentifier)">
            <summary>
            Gets subscribed notifications for a user.
            </summary>
            <param name="user">User.</param>
        </member>
        <member name="M:Majid.Notifications.INotificationSubscriptionManager.IsSubscribedAsync(Majid.UserIdentifier,System.String,Majid.Domain.Entities.EntityIdentifier)">
            <summary>
            Checks if a user subscribed for a notification.
            </summary>
            <param name="user">User.</param>
            <param name="notificationName">Name of the notification.</param>
            <param name="entityIdentifier">entity identifier</param>
        </member>
        <member name="T:Majid.Notifications.IRealTimeNotifier">
            <summary>
            Interface to send real time notifications to users.
            </summary>
        </member>
        <member name="M:Majid.Notifications.IRealTimeNotifier.SendNotificationsAsync(Majid.Notifications.UserNotification[])">
            <summary>
            This method tries to deliver real time notifications to specified users.
            If a user is not online, it should ignore him.
            </summary>
        </member>
        <member name="T:Majid.Notifications.IUserNotificationManager">
            <summary>
            Used to manage user notifications.
            </summary>
        </member>
        <member name="M:Majid.Notifications.IUserNotificationManager.GetUserNotificationsAsync(Majid.UserIdentifier,System.Nullable{Majid.Notifications.UserNotificationState},System.Int32,System.Int32)">
            <summary>
            Gets notifications for a user.
            </summary>
            <param name="user">User.</param>
            <param name="state">State</param>
            <param name="skipCount">Skip count.</param>
            <param name="maxResultCount">Maximum result count.</param>
        </member>
        <member name="M:Majid.Notifications.IUserNotificationManager.GetUserNotificationCountAsync(Majid.UserIdentifier,System.Nullable{Majid.Notifications.UserNotificationState})">
            <summary>
            Gets user notification count.
            </summary>
            <param name="user">User.</param>
            <param name="state">State.</param>
        </member>
        <member name="M:Majid.Notifications.IUserNotificationManager.GetUserNotificationAsync(System.Nullable{System.Int32},System.Guid)">
            <summary>
            Gets a user notification by given id.
            </summary>
            <param name="tenantId">Tenant Id</param>
            <param name="userNotificationId">The user notification id.</param>
        </member>
        <member name="M:Majid.Notifications.IUserNotificationManager.UpdateUserNotificationStateAsync(System.Nullable{System.Int32},System.Guid,Majid.Notifications.UserNotificationState)">
            <summary>
            Updates a user notification state.
            </summary>
            <param name="tenantId">Tenant Id.</param>
            <param name="userNotificationId">The user notification id.</param>
            <param name="state">New state.</param>
        </member>
        <member name="M:Majid.Notifications.IUserNotificationManager.UpdateAllUserNotificationStatesAsync(Majid.UserIdentifier,Majid.Notifications.UserNotificationState)">
            <summary>
            Updates all notification states for a user.
            </summary>
            <param name="user">User.</param>
            <param name="state">New state.</param>
        </member>
        <member name="M:Majid.Notifications.IUserNotificationManager.DeleteUserNotificationAsync(System.Nullable{System.Int32},System.Guid)">
            <summary>
            Deletes a user notification.
            </summary>
            <param name="tenantId">Tenant Id.</param>
            <param name="userNotificationId">The user notification id.</param>
        </member>
        <member name="M:Majid.Notifications.IUserNotificationManager.DeleteAllUserNotificationsAsync(Majid.UserIdentifier)">
            <summary>
            Deletes all notifications of a user.
            </summary>
            <param name="user">User.</param>
        </member>
        <member name="T:Majid.Notifications.LocalizableMessageNotificationData">
            <summary>
            Can be used to store a simple message as notification data.
            </summary>
        </member>
        <member name="P:Majid.Notifications.LocalizableMessageNotificationData.Message">
            <summary>
            The message.
            </summary>
        </member>
        <member name="M:Majid.Notifications.LocalizableMessageNotificationData.#ctor">
            <summary>
            Needed for serialization.
            </summary>
        </member>
        <member name="M:Majid.Notifications.LocalizableMessageNotificationData.#ctor(Majid.Localization.LocalizableString)">
            <summary>
            Initializes a new instance of the <see cref="T:Majid.Notifications.LocalizableMessageNotificationData"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:Majid.Notifications.MessageNotificationData">
            <summary>
            Can be used to store a simple message as notification data.
            </summary>
        </member>
        <member name="P:Majid.Notifications.MessageNotificationData.Message">
            <summary>
            The message.
            </summary>
        </member>
        <member name="M:Majid.Notifications.MessageNotificationData.#ctor">
            <summary>
            Needed for serialization.
            </summary>
        </member>
        <member name="T:Majid.Notifications.NotificationData">
            <summary>
            Used to store data for a notification.
            It can be directly used or can be derived.
            </summary>
        </member>
        <member name="P:Majid.Notifications.NotificationData.Type">
            <summary>
            Gets notification data type name.
            It returns the full class name by default.
            </summary>
        </member>
        <member name="P:Majid.Notifications.NotificationData.Item(System.String)">
            <summary>
            Shortcut to set/get <see cref="P:Majid.Notifications.NotificationData.Properties"/>.
            </summary>
        </member>
        <member name="P:Majid.Notifications.NotificationData.Properties">
            <summary>
            Can be used to add custom properties to this notification.
            </summary>
        </member>
        <member name="M:Majid.Notifications.NotificationData.#ctor">
            <summary>
            Createa a new NotificationData object.
            </summary>
        </member>
        <member name="T:Majid.Notifications.NotificationDefinition">
            <summary>
            Definition for a notification.
            </summary>
        </member>
        <member name="P:Majid.Notifications.NotificationDefinition.Name">
            <summary>
            Unique name of the notification.
            </summary>
        </member>
        <member name="P:Majid.Notifications.NotificationDefinition.EntityType">
            <summary>
            Related entity type with this notification (optional).
            </summary>
        </member>
        <member name="P:Majid.Notifications.NotificationDefinition.DisplayName">
            <summary>
            Display name of the notification.
            Optional.
            </summary>
        </member>
        <member name="P:Majid.Notifications.NotificationDefinition.Description">
            <summary>
            Description for the notification.
            Optional.
            </summary>
        </member>
        <member name="P:Majid.Notifications.NotificationDefinition.PermissionDependency">
            <summary>
            A permission dependency. This notification will be available to a user if this dependency is satisfied.
            Optional.
            </summary>
        </member>
        <member name="P:Majid.Notifications.NotificationDefinition.FeatureDependency">
            <summary>
            A feature dependency. This notification will be available to a tenant if this feature is enabled.
            Optional.
            </summary>
        </member>
        <member name="P:Majid.Notifications.NotificationDefinition.Item(System.String)">
            <summary>
            Gets/sets arbitrary objects related to this object.
            Gets null if given key does not exists.
            This is a shortcut for <see cref="P:Majid.Notifications.NotificationDefinition.Attributes"/> dictionary.
            </summary>
            <param name="key">Key</param>
        </member>
        <member name="P:Majid.Notifications.NotificationDefinition.Attributes">
            <summary>
            Arbitrary objects related to this object.
            These objects must be serializable.
            </summary>
        </member>
        <member name="M:Majid.Notifications.NotificationDefinition.#ctor(System.String,System.Type,Majid.Localization.ILocalizableString,Majid.Localization.ILocalizableString,Majid.Authorization.IPermissionDependency,Majid.Application.Features.IFeatureDependency)">
            <summary>
            Initializes a new instance of the <see cref="T:Majid.Notifications.NotificationDefinition"/> class.
            </summary>
            <param name="name">Unique name of the notification.</param>
            <param name="entityType">Related entity type with this notification (optional).</param>
            <param name="displayName">Display name of the notification.</param>
            <param name="description">Description for the notification</param>
            <param name="permissionDependency">A permission dependency. This notification will be available to a user if this dependency is satisfied.</param>
            <param name="featureDependency">A feature dependency. This notification will be available to a tenant if this feature is enabled.</param>
        </member>
        <member name="T:Majid.Notifications.NotificationDefinitionManager">
            <summary>
            Implements <see cref="T:Majid.Notifications.INotificationDefinitionManager"/>.
            </summary>
        </member>
        <member name="T:Majid.Notifications.NotificationDefinitionManagerExtensions">
            <summary>
            Extension methods for <see cref="T:Majid.Notifications.INotificationDefinitionManager"/>.
            </summary>
        </member>
        <member name="M:Majid.Notifications.NotificationDefinitionManagerExtensions.GetAllAvailable(Majid.Notifications.INotificationDefinitionManager,Majid.UserIdentifier)">
            <summary>
            Gets all available notification definitions for given user.
            </summary>
            <param name="notificationDefinitionManager">Notification definition manager</param>
            <param name="user">User</param>
        </member>
        <member name="T:Majid.Notifications.NotificationDistributer">
            <summary>
            Used to distribute notifications to users.
            </summary>
        </member>
        <member name="M:Majid.Notifications.NotificationDistributer.#ctor(Majid.Notifications.INotificationDefinitionManager,Majid.Notifications.INotificationStore,Majid.Domain.Uow.IUnitOfWorkManager,Majid.IGuidGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:Majid.Notifications.NotificationDistributionJob"/> class.
            </summary>
        </member>
        <member name="T:Majid.Notifications.NotificationDistributionJob">
            <summary>
            This background job distributes notifications to users.
            </summary>
        </member>
        <member name="M:Majid.Notifications.NotificationDistributionJob.#ctor(Majid.Notifications.INotificationDistributer)">
            <summary>
            Initializes a new instance of the <see cref="T:Majid.Notifications.NotificationDistributionJob"/> class.
            </summary>
        </member>
        <member name="T:Majid.Notifications.NotificationDistributionJobArgs">
            <summary>
            Arguments for <see cref="T:Majid.Notifications.NotificationDistributionJob"/>.
            </summary>
        </member>
        <member name="P:Majid.Notifications.NotificationDistributionJobArgs.NotificationId">
            <summary>
            Notification Id.
            </summary>
        </member>
        <member name="M:Majid.Notifications.NotificationDistributionJobArgs.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Majid.Notifications.NotificationDistributionJobArgs"/> class.
            </summary>
        </member>
        <member name="T:Majid.Notifications.NotificationExtensions">
            <summary>
            Extension methods for
            <see cref="T:Majid.Notifications.INotificationSubscriptionManager"/>, 
            <see cref="T:Majid.Notifications.INotificationPublisher"/>, 
            <see cref="T:Majid.Notifications.IUserNotificationManager"/>.
            </summary>
        </member>
        <member name="M:Majid.Notifications.NotificationExtensions.Subscribe(Majid.Notifications.INotificationSubscriptionManager,Majid.UserIdentifier,System.String,Majid.Domain.Entities.EntityIdentifier)">
            <summary>
            Subscribes to a notification.
            </summary>
            <param name="notificationSubscriptionManager">Notification subscription manager</param>
            <param name="user">User.</param>
            <param name="notificationName">Name of the notification.</param>
            <param name="entityIdentifier">entity identifier</param>
        </member>
        <member name="M:Majid.Notifications.NotificationExtensions.SubscribeToAllAvailableNotifications(Majid.Notifications.INotificationSubscriptionManager,Majid.UserIdentifier)">
            <summary>
            Subscribes to all available notifications for given user.
            It does not subscribe entity related notifications.
            </summary>
            <param name="notificationSubscriptionManager">Notification subscription manager</param>
            <param name="user">User.</param>
        </member>
        <member name="M:Majid.Notifications.NotificationExtensions.Unsubscribe(Majid.Notifications.INotificationSubscriptionManager,Majid.UserIdentifier,System.String,Majid.Domain.Entities.EntityIdentifier)">
            <summary>
            Unsubscribes from a notification.
            </summary>
            <param name="notificationSubscriptionManager">Notification subscription manager</param>
            <param name="user">User.</param>
            <param name="notificationName">Name of the notification.</param>
            <param name="entityIdentifier">entity identifier</param>
        </member>
        <member name="M:Majid.Notifications.NotificationExtensions.GetSubscriptions(Majid.Notifications.INotificationSubscriptionManager,System.String,Majid.Domain.Entities.EntityIdentifier)">
            <summary>
            Gets all subscribtions for given notification.
            TODO: Can work only for single database approach!
            </summary>
            <param name="notificationSubscriptionManager">Notification subscription manager</param>
            <param name="notificationName">Name of the notification.</param>
            <param name="entityIdentifier">entity identifier</param>
        </member>
        <member name="M:Majid.Notifications.NotificationExtensions.GetSubscriptions(Majid.Notifications.INotificationSubscriptionManager,System.Nullable{System.Int32},System.String,Majid.Domain.Entities.EntityIdentifier)">
            <summary>
            Gets all subscribtions for given notification.
            </summary>
            <param name="notificationSubscriptionManager">Notification subscription manager</param>
            <param name="tenantId">Tenant id. Null for the host.</param>
            <param name="notificationName">Name of the notification.</param>
            <param name="entityIdentifier">entity identifier</param>
        </member>
        <member name="M:Majid.Notifications.NotificationExtensions.GetSubscribedNotifications(Majid.Notifications.INotificationSubscriptionManager,Majid.UserIdentifier)">
            <summary>
            Gets subscribed notifications for a user.
            </summary>
            <param name="notificationSubscriptionManager">Notification subscription manager</param>
            <param name="user">User.</param>
        </member>
        <member name="M:Majid.Notifications.NotificationExtensions.IsSubscribed(Majid.Notifications.INotificationSubscriptionManager,Majid.UserIdentifier,System.String,Majid.Domain.Entities.EntityIdentifier)">
            <summary>
            Checks if a user subscribed for a notification.
            </summary>
            <param name="notificationSubscriptionManager">Notification subscription manager</param>
            <param name="user">User.</param>
            <param name="notificationName">Name of the notification.</param>
            <param name="entityIdentifier">entity identifier</param>
        </member>
        <member name="M:Majid.Notifications.NotificationExtensions.Publish(Majid.Notifications.INotificationPublisher,System.String,Majid.Notifications.NotificationData,Majid.Domain.Entities.EntityIdentifier,Majid.Notifications.NotificationSeverity,Majid.UserIdentifier[])">
            <summary>
            Publishes a new notification.
            </summary>
            <param name="notificationPublisher">Notification publisher</param>
            <param name="notificationName">Unique notification name</param>
            <param name="data">Notification data (optional)</param>
            <param name="entityIdentifier">The entity identifier if this notification is related to an entity</param>
            <param name="severity">Notification severity</param>
            <param name="userIds">Target user id(s). Used to send notification to specific user(s). If this is null/empty, the notification is sent to all subscribed users</param>
        </member>
        <member name="M:Majid.Notifications.NotificationExtensions.GetUserNotifications(Majid.Notifications.IUserNotificationManager,Majid.UserIdentifier,System.Nullable{Majid.Notifications.UserNotificationState},System.Int32,System.Int32)">
            <summary>
            Gets notifications for a user.
            </summary>
            <param name="userNotificationManager">User notificaiton manager</param>
            <param name="user">User.</param>
            <param name="state">State</param>
            <param name="skipCount">Skip count.</param>
            <param name="maxResultCount">Maximum result count.</param>
        </member>
        <member name="M:Majid.Notifications.NotificationExtensions.GetUserNotificationCount(Majid.Notifications.IUserNotificationManager,Majid.UserIdentifier,System.Nullable{Majid.Notifications.UserNotificationState})">
            <summary>
            Gets user notification count.
            </summary>
            <param name="userNotificationManager">User notificaiton manager</param>
            <param name="user">User.</param>
            <param name="state">State.</param>
        </member>
        <member name="M:Majid.Notifications.NotificationExtensions.GetUserNotification(Majid.Notifications.IUserNotificationManager,System.Nullable{System.Int32},System.Guid)">
            <summary>
            Gets a user notification by given id.
            </summary>
            <param name="userNotificationManager">User notificaiton manager</param>
            <param name="tenantId">Tenant Id</param>
            <param name="userNotificationId">The user notification id.</param>
        </member>
        <member name="M:Majid.Notifications.NotificationExtensions.UpdateUserNotificationState(Majid.Notifications.IUserNotificationManager,System.Nullable{System.Int32},System.Guid,Majid.Notifications.UserNotificationState)">
            <summary>
            Updates a user notification state.
            </summary>
            <param name="userNotificationManager">User notificaiton manager</param>
            <param name="tenantId">Tenant Id</param>
            <param name="userNotificationId">The user notification id.</param>
            <param name="state">New state.</param>
        </member>
        <member name="M:Majid.Notifications.NotificationExtensions.UpdateAllUserNotificationStates(Majid.Notifications.IUserNotificationManager,Majid.UserIdentifier,Majid.Notifications.UserNotificationState)">
            <summary>
            Updates all notification states for a user.
            </summary>
            <param name="userNotificationManager">User notificaiton manager</param>
            <param name="user">User.</param>
            <param name="state">New state.</param>
        </member>
        <member name="M:Majid.Notifications.NotificationExtensions.DeleteUserNotification(Majid.Notifications.IUserNotificationManager,System.Nullable{System.Int32},System.Guid)">
            <summary>
            Deletes a user notification.
            </summary>
            <param name="userNotificationManager">User notificaiton manager</param>
            <param name="tenantId">Tenant Id</param>
            <param name="userNotificationId">The user notification id.</param>
        </member>
        <member name="M:Majid.Notifications.NotificationExtensions.DeleteAllUserNotifications(Majid.Notifications.IUserNotificationManager,Majid.UserIdentifier)">
            <summary>
            Deletes all notifications of a user.
            </summary>
            <param name="userNotificationManager">User notificaiton manager</param>
            <param name="user">The user id.</param>
        </member>
        <member name="T:Majid.Notifications.NotificationInfo">
            <summary>
            Used to store a notification request.
            This notification is distributed to tenants and users by <see cref="T:Majid.Notifications.INotificationDistributer"/>.
            </summary>
        </member>
        <member name="F:Majid.Notifications.NotificationInfo.AllTenantIds">
            <summary>
            Indicates all tenant ids for <see cref="P:Majid.Notifications.NotificationInfo.TenantIds"/> property.
            Value: "0".
            </summary>
        </member>
        <member name="F:Majid.Notifications.NotificationInfo.MaxNotificationNameLength">
            <summary>
            Maximum length of <see cref="P:Majid.Notifications.NotificationInfo.NotificationName"/> property.
            Value: 96.
            </summary>
        </member>
        <member name="F:Majid.Notifications.NotificationInfo.MaxDataLength">
            <summary>
            Maximum length of <see cref="P:Majid.Notifications.NotificationInfo.Data"/> property.
            Value: 1048576 (1 MB).
            </summary>
        </member>
        <member name="F:Majid.Notifications.NotificationInfo.MaxDataTypeNameLength">
            <summary>
            Maximum length of <see cref="P:Majid.Notifications.NotificationInfo.DataTypeName"/> property.
            Value: 512.
            </summary>
        </member>
        <member name="F:Majid.Notifications.NotificationInfo.MaxEntityTypeNameLength">
            <summary>
            Maximum length of <see cref="P:Majid.Notifications.NotificationInfo.EntityTypeName"/> property.
            Value: 250.
            </summary>
        </member>
        <member name="F:Majid.Notifications.NotificationInfo.MaxEntityTypeAssemblyQualifiedNameLength">
            <summary>
            Maximum length of <see cref="P:Majid.Notifications.NotificationInfo.EntityTypeAssemblyQualifiedName"/> property.
            Value: 512.
            </summary>
        </member>
        <member name="F:Majid.Notifications.NotificationInfo.MaxEntityIdLength">
            <summary>
            Maximum length of <see cref="P:Majid.Notifications.NotificationInfo.EntityId"/> property.
            Value: 96.
            </summary>
        </member>
        <member name="F:Majid.Notifications.NotificationInfo.MaxUserIdsLength">
            <summary>
            Maximum length of <see cref="P:Majid.Notifications.NotificationInfo.UserIds"/> property.
            Value: 131072 (128 KB).
            </summary>
        </member>
        <member name="F:Majid.Notifications.NotificationInfo.MaxTenantIdsLength">
            <summary>
            Maximum length of <see cref="P:Majid.Notifications.NotificationInfo.TenantIds"/> property.
            Value: 131072 (128 KB).
            </summary>
        </member>
        <member name="P:Majid.Notifications.NotificationInfo.NotificationName">
            <summary>
            Unique notification name.
            </summary>
        </member>
        <member name="P:Majid.Notifications.NotificationInfo.Data">
            <summary>
            Notification data as JSON string.
            </summary>
        </member>
        <member name="P:Majid.Notifications.NotificationInfo.DataTypeName">
            <summary>
            Type of the JSON serialized <see cref="P:Majid.Notifications.NotificationInfo.Data"/>.
            It's AssemblyQualifiedName of the type.
            </summary>
        </member>
        <member name="P:Majid.Notifications.NotificationInfo.EntityTypeName">
            <summary>
            Gets/sets entity type name, if this is an entity level notification.
            It's FullName of the entity type.
            </summary>
        </member>
        <member name="P:Majid.Notifications.NotificationInfo.EntityTypeAssemblyQualifiedName">
            <summary>
            AssemblyQualifiedName of the entity type.
            </summary>
        </member>
        <member name="P:Majid.Notifications.NotificationInfo.EntityId">
            <summary>
            Gets/sets primary key of the entity, if this is an entity level notification.
            </summary>
        </member>
        <member name="P:Majid.Notifications.NotificationInfo.Severity">
            <summary>
            Notification severity.
            </summary>
        </member>
        <member name="P:Majid.Notifications.NotificationInfo.UserIds">
            <summary>
            Target users of the notification.
            If this is set, it overrides subscribed users.
            If this is null/empty, then notification is sent to all subscribed users.
            </summary>
        </member>
        <member name="P:Majid.Notifications.NotificationInfo.ExcludedUserIds">
            <summary>
            Excluded users.
            This can be set to exclude some users while publishing notifications to subscribed users.
            It's not normally used if <see cref="P:Majid.Notifications.NotificationInfo.UserIds"/> is not null.
            </summary>
        </member>
        <member name="P:Majid.Notifications.NotificationInfo.TenantIds">
            <summary>
            Target tenants of the notification.
            Used to send notification to subscribed users of specific tenant(s).
            This is valid only if UserIds is null.
            If it's "0", then indicates to all tenants.
            </summary>
        </member>
        <member name="M:Majid.Notifications.NotificationInfo.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Majid.Notifications.NotificationInfo"/> class.
            </summary>
        </member>
        <member name="T:Majid.Notifications.NotificationProvider">
            <summary>
            This class should be implemented in order to define notifications.
            </summary>
        </member>
        <member name="M:Majid.Notifications.NotificationProvider.SetNotifications(Majid.Notifications.INotificationDefinitionContext)">
            <summary>
            Used to add/manipulate notification definitions.
            </summary>
            <param name="context">Context</param>
        </member>
        <member name="T:Majid.Notifications.NotificationPublisher">
            <summary>
            Implements <see cref="T:Majid.Notifications.INotificationPublisher"/>.
            </summary>
        </member>
        <member name="P:Majid.Notifications.NotificationPublisher.AllTenants">
            <summary>
            Indicates all tenants.
            </summary>
        </member>
        <member name="P:Majid.Notifications.NotificationPublisher.MajidSession">
            <summary>
            Reference to MAJID session.
            </summary>
        </member>
        <member name="M:Majid.Notifications.NotificationPublisher.#ctor(Majid.Notifications.INotificationStore,Majid.BackgroundJobs.IBackgroundJobManager,Majid.Notifications.INotificationDistributer,Majid.IGuidGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:Majid.Notifications.NotificationPublisher"/> class.
            </summary>
        </member>
        <member name="T:Majid.Notifications.NotificationSettingNames">
            <summary>
            Pre-defined setting names for notification system.
            </summary>
        </member>
        <member name="F:Majid.Notifications.NotificationSettingNames.ReceiveNotifications">
            <summary>
            A top-level switch to enable/disable receiving notifications for a user.
            "Majid.Notifications.ReceiveNotifications".
            </summary>
        </member>
        <member name="T:Majid.Notifications.NotificationSeverity">
            <summary>
            Notification severity.
            </summary>
        </member>
        <member name="F:Majid.Notifications.NotificationSeverity.Info">
            <summary>
            Info.
            </summary>
        </member>
        <member name="F:Majid.Notifications.NotificationSeverity.Success">
            <summary>
            Success.
            </summary>
        </member>
        <member name="F:Majid.Notifications.NotificationSeverity.Warn">
            <summary>
            Warn.
            </summary>
        </member>
        <member name="F:Majid.Notifications.NotificationSeverity.Error">
            <summary>
            Error.
            </summary>
        </member>
        <member name="F:Majid.Notifications.NotificationSeverity.Fatal">
            <summary>
            Fatal.
            </summary>
        </member>
        <member name="T:Majid.Notifications.NotificationSubscription">
            <summary>
            Represents a user subscription to a notification.
            </summary>
        </member>
        <member name="P:Majid.Notifications.NotificationSubscription.TenantId">
            <summary>
            Tenant id of the subscribed user.
            </summary>
        </member>
        <member name="P:Majid.Notifications.NotificationSubscription.UserId">
            <summary>
            User Id.
            </summary>
        </member>
        <member name="P:Majid.Notifications.NotificationSubscription.NotificationName">
            <summary>
            Notification unique name.
            </summary>
        </member>
        <member name="P:Majid.Notifications.NotificationSubscription.EntityType">
            <summary>
            Entity type.
            </summary>
        </member>
        <member name="P:Majid.Notifications.NotificationSubscription.EntityTypeName">
            <summary>
            Name of the entity type (including namespaces).
            </summary>
        </member>
        <member name="P:Majid.Notifications.NotificationSubscription.EntityId">
            <summary>
            Entity Id.
            </summary>
        </member>
        <member name="M:Majid.Notifications.NotificationSubscription.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Majid.Notifications.NotificationSubscription"/> class.
            </summary>
        </member>
        <member name="T:Majid.Notifications.NotificationSubscriptionInfo">
            <summary>
            Used to store a notification subscription.
            </summary>
        </member>
        <member name="P:Majid.Notifications.NotificationSubscriptionInfo.TenantId">
            <summary>
            Tenant id of the subscribed user.
            </summary>
        </member>
        <member name="P:Majid.Notifications.NotificationSubscriptionInfo.UserId">
            <summary>
            User Id.
            </summary>
        </member>
        <member name="P:Majid.Notifications.NotificationSubscriptionInfo.NotificationName">
            <summary>
            Notification unique name.
            </summary>
        </member>
        <member name="P:Majid.Notifications.NotificationSubscriptionInfo.EntityTypeName">
            <summary>
            Gets/sets entity type name, if this is an entity level notification.
            It's FullName of the entity type.
            </summary>
        </member>
        <member name="P:Majid.Notifications.NotificationSubscriptionInfo.EntityTypeAssemblyQualifiedName">
            <summary>
            AssemblyQualifiedName of the entity type.
            </summary>
        </member>
        <member name="P:Majid.Notifications.NotificationSubscriptionInfo.EntityId">
            <summary>
            Gets/sets primary key of the entity, if this is an entity level notification.
            </summary>
        </member>
        <member name="M:Majid.Notifications.NotificationSubscriptionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Majid.Notifications.NotificationSubscriptionInfo"/> class.
            </summary>
        </member>
        <member name="M:Majid.Notifications.NotificationSubscriptionInfo.#ctor(System.Guid,System.Nullable{System.Int32},System.Int64,System.String,Majid.Domain.Entities.EntityIdentifier)">
            <summary>
            Initializes a new instance of the <see cref="T:Majid.Notifications.NotificationSubscriptionInfo"/> class.
            </summary>
        </member>
        <member name="T:Majid.Notifications.NotificationSubscriptionInfoExtensions">
            <summary>
            Extension methods for <see cref="T:Majid.Notifications.NotificationSubscriptionInfo"/>.
            </summary>
        </member>
        <member name="M:Majid.Notifications.NotificationSubscriptionInfoExtensions.ToNotificationSubscription(Majid.Notifications.NotificationSubscriptionInfo)">
            <summary>
            Converts <see cref="T:Majid.Notifications.UserNotificationInfo"/> to <see cref="T:Majid.Notifications.UserNotification"/>.
            </summary>
        </member>
        <member name="T:Majid.Notifications.NotificationSubscriptionManager">
            <summary>
            Implements <see cref="T:Majid.Notifications.INotificationSubscriptionManager"/>.
            </summary>
        </member>
        <member name="M:Majid.Notifications.NotificationSubscriptionManager.#ctor(Majid.Notifications.INotificationStore,Majid.Notifications.INotificationDefinitionManager,Majid.IGuidGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:Majid.Notifications.NotificationSubscriptionManager"/> class.
            </summary>
        </member>
        <member name="T:Majid.Notifications.NullNotificationStore">
            <summary>
            Null pattern implementation of <see cref="T:Majid.Notifications.INotificationStore"/>.
            </summary>
        </member>
        <member name="T:Majid.Notifications.NullRealTimeNotifier">
            <summary>
            Null pattern implementation of <see cref="T:Majid.Notifications.IRealTimeNotifier"/>.
            </summary>
        </member>
        <member name="P:Majid.Notifications.NullRealTimeNotifier.Instance">
            <summary>
            Gets single instance of <see cref="T:Majid.Notifications.NullRealTimeNotifier"/> class.
            </summary>
        </member>
        <member name="T:Majid.Notifications.TenantNotification">
            <summary>
            Represents a published notification for a tenant/user.
            </summary>
        </member>
        <member name="P:Majid.Notifications.TenantNotification.TenantId">
            <summary>
            Tenant Id.
            </summary>
        </member>
        <member name="P:Majid.Notifications.TenantNotification.NotificationName">
            <summary>
            Unique notification name.
            </summary>
        </member>
        <member name="P:Majid.Notifications.TenantNotification.Data">
            <summary>
            Notification data.
            </summary>
        </member>
        <member name="P:Majid.Notifications.TenantNotification.EntityType">
            <summary>
            Gets or sets the type of the entity.
            </summary>
        </member>
        <member name="P:Majid.Notifications.TenantNotification.EntityTypeName">
            <summary>
            Name of the entity type (including namespaces).
            </summary>
        </member>
        <member name="P:Majid.Notifications.TenantNotification.EntityId">
            <summary>
            Entity id.
            </summary>
        </member>
        <member name="P:Majid.Notifications.TenantNotification.Severity">
            <summary>
            Severity.
            </summary>
        </member>
        <member name="M:Majid.Notifications.TenantNotification.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Majid.Notifications.TenantNotification"/> class.
            </summary>
        </member>
        <member name="T:Majid.Notifications.TenantNotificationInfo">
            <summary>
            A notification distributed to it's related tenant.
            </summary>
        </member>
        <member name="P:Majid.Notifications.TenantNotificationInfo.TenantId">
            <summary>
            Tenant id of the subscribed user.
            </summary>
        </member>
        <member name="P:Majid.Notifications.TenantNotificationInfo.NotificationName">
            <summary>
            Unique notification name.
            </summary>
        </member>
        <member name="P:Majid.Notifications.TenantNotificationInfo.Data">
            <summary>
            Notification data as JSON string.
            </summary>
        </member>
        <member name="P:Majid.Notifications.TenantNotificationInfo.DataTypeName">
            <summary>
            Type of the JSON serialized <see cref="P:Majid.Notifications.TenantNotificationInfo.Data"/>.
            It's AssemblyQualifiedName of the type.
            </summary>
        </member>
        <member name="P:Majid.Notifications.TenantNotificationInfo.EntityTypeName">
            <summary>
            Gets/sets entity type name, if this is an entity level notification.
            It's FullName of the entity type.
            </summary>
        </member>
        <member name="P:Majid.Notifications.TenantNotificationInfo.EntityTypeAssemblyQualifiedName">
            <summary>
            AssemblyQualifiedName of the entity type.
            </summary>
        </member>
        <member name="P:Majid.Notifications.TenantNotificationInfo.EntityId">
            <summary>
            Gets/sets primary key of the entity, if this is an entity level notification.
            </summary>
        </member>
        <member name="P:Majid.Notifications.TenantNotificationInfo.Severity">
            <summary>
            Notification severity.
            </summary>
        </member>
        <member name="T:Majid.Notifications.TenantNotificationInfoExtensions">
            <summary>
            Extension methods for <see cref="T:Majid.Notifications.NotificationInfo"/>.
            </summary>
        </member>
        <member name="M:Majid.Notifications.TenantNotificationInfoExtensions.ToTenantNotification(Majid.Notifications.TenantNotificationInfo)">
            <summary>
            Converts <see cref="T:Majid.Notifications.NotificationInfo"/> to <see cref="T:Majid.Notifications.TenantNotification"/>.
            </summary>
        </member>
        <member name="T:Majid.Notifications.UserNotification">
            <summary>
            Represents a notification sent to a user.
            </summary>
        </member>
        <member name="P:Majid.Notifications.UserNotification.TenantId">
            <summary>
            TenantId.
            </summary>
        </member>
        <member name="P:Majid.Notifications.UserNotification.UserId">
            <summary>
            User Id.
            </summary>
        </member>
        <member name="P:Majid.Notifications.UserNotification.State">
            <summary>
            Current state of the user notification.
            </summary>
        </member>
        <member name="P:Majid.Notifications.UserNotification.Notification">
            <summary>
            The notification.
            </summary>
        </member>
        <member name="T:Majid.Notifications.UserNotificationInfo">
            <summary>
            Used to store a user notification.
            </summary>
        </member>
        <member name="P:Majid.Notifications.UserNotificationInfo.TenantId">
            <summary>
            Tenant Id.
            </summary>
        </member>
        <member name="P:Majid.Notifications.UserNotificationInfo.UserId">
            <summary>
            User Id.
            </summary>
        </member>
        <member name="P:Majid.Notifications.UserNotificationInfo.TenantNotificationId">
            <summary>
            Notification Id.
            </summary>
        </member>
        <member name="P:Majid.Notifications.UserNotificationInfo.State">
            <summary>
            Current state of the user notification.
            </summary>
        </member>
        <member name="M:Majid.Notifications.UserNotificationInfo.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Majid.Notifications.UserNotificationInfo"/> class.
            </summary>
            <param name="create"></param>
        </member>
        <member name="T:Majid.Notifications.UserNotificationInfoExtensions">
            <summary>
            Extension methods for <see cref="T:Majid.Notifications.UserNotificationInfo"/>.
            </summary>
        </member>
        <member name="M:Majid.Notifications.UserNotificationInfoExtensions.ToUserNotification(Majid.Notifications.UserNotificationInfo,Majid.Notifications.TenantNotification)">
            <summary>
            Converts <see cref="T:Majid.Notifications.UserNotificationInfo"/> to <see cref="T:Majid.Notifications.UserNotification"/>.
            </summary>
        </member>
        <member name="T:Majid.Notifications.UserNotificationInfoWithNotificationInfo">
            <summary>
            A class contains a <see cref="T:Majid.Notifications.UserNotificationInfo"/> and related <see cref="T:Majid.Notifications.NotificationInfo"/>.
            </summary>
        </member>
        <member name="P:Majid.Notifications.UserNotificationInfoWithNotificationInfo.UserNotification">
            <summary>
            User notification.
            </summary>
        </member>
        <member name="P:Majid.Notifications.UserNotificationInfoWithNotificationInfo.Notification">
            <summary>
            Notification.
            </summary>
        </member>
        <member name="M:Majid.Notifications.UserNotificationInfoWithNotificationInfo.#ctor(Majid.Notifications.UserNotificationInfo,Majid.Notifications.TenantNotificationInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Majid.Notifications.UserNotificationInfoWithNotificationInfo"/> class.
            </summary>
        </member>
        <member name="T:Majid.Notifications.UserNotificationInfoWithNotificationInfoExtensions">
            <summary>
            Extension methods for <see cref="T:Majid.Notifications.UserNotificationInfoWithNotificationInfo"/>.
            </summary>
        </member>
        <member name="M:Majid.Notifications.UserNotificationInfoWithNotificationInfoExtensions.ToUserNotification(Majid.Notifications.UserNotificationInfoWithNotificationInfo)">
            <summary>
            Converts <see cref="T:Majid.Notifications.UserNotificationInfoWithNotificationInfo"/> to <see cref="T:Majid.Notifications.UserNotification"/>.
            </summary>
        </member>
        <member name="T:Majid.Notifications.UserNotificationManager">
            <summary>
            Implements  <see cref="T:Majid.Notifications.IUserNotificationManager"/>.
            </summary>
        </member>
        <member name="M:Majid.Notifications.UserNotificationManager.#ctor(Majid.Notifications.INotificationStore)">
            <summary>
            Initializes a new instance of the <see cref="T:Majid.Notifications.UserNotificationManager"/> class.
            </summary>
        </member>
        <member name="T:Majid.Notifications.UserNotificationState">
            <summary>
            Represents state of a <see cref="T:Majid.Notifications.UserNotification"/>.
            </summary>
        </member>
        <member name="F:Majid.Notifications.UserNotificationState.Unread">
            <summary>
            Notification is not read by user yet.
            </summary>
        </member>
        <member name="F:Majid.Notifications.UserNotificationState.Read">
            <summary>
            Notification is read by user.
            </summary>
        </member>
        <member name="T:Majid.ObjectMapping.IObjectMapper">
            <summary>
            Defines a simple interface to map objects.
            </summary>
        </member>
        <member name="M:Majid.ObjectMapping.IObjectMapper.Map``1(System.Object)">
            <summary>
            Converts an object to another. Creates a new object of <see cref="!:TDestination"/>.
            </summary>
            <typeparam name="TDestination">Type of the destination object</typeparam>
            <param name="source">Source object</param>
        </member>
        <member name="M:Majid.ObjectMapping.IObjectMapper.Map``2(``0,``1)">
            <summary>
            Execute a mapping from the source object to the existing destination object
            </summary>
            <typeparam name="TSource">Source type</typeparam>
            <typeparam name="TDestination">Destination type</typeparam>
            <param name="source">Source object</param>
            <param name="destination">Destination object</param>
            <returns>Returns the same <see cref="!:destination"/> object after mapping operation</returns>
        </member>
        <member name="P:Majid.ObjectMapping.NullObjectMapper.Instance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="T:Majid.RandomHelper">
            <summary>
            A shortcut to use <see cref="T:System.Random"/> class.
            Also provides some useful methods.
            </summary>
        </member>
        <member name="M:Majid.RandomHelper.GetRandom(System.Int32,System.Int32)">
            <summary>
            Returns a random number within a specified range.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue.</param>
            <returns>
            A 32-bit signed integer greater than or equal to minValue and less than maxValue; 
            that is, the range of return values includes minValue but not maxValue. 
            If minValue equals maxValue, minValue is returned.
            </returns>
        </member>
        <member name="M:Majid.RandomHelper.GetRandom(System.Int32)">
            <summary>
            Returns a nonnegative random number less than the specified maximum.
            </summary>
            <param name="maxValue">The exclusive upper bound of the random number to be generated. maxValue must be greater than or equal to zero.</param>
            <returns>
            A 32-bit signed integer greater than or equal to zero, and less than maxValue; 
            that is, the range of return values ordinarily includes zero but not maxValue. 
            However, if maxValue equals zero, maxValue is returned.
            </returns>
        </member>
        <member name="M:Majid.RandomHelper.GetRandom">
            <summary>
            Returns a nonnegative random number.
            </summary>
            <returns>A 32-bit signed integer greater than or equal to zero and less than <see cref="F:System.Int32.MaxValue"/>.</returns>
        </member>
        <member name="M:Majid.RandomHelper.GetRandomOf``1(``0[])">
            <summary>
            Gets random of given objects.
            </summary>
            <typeparam name="T">Type of the objects</typeparam>
            <param name="objs">List of object to select a random one</param>
        </member>
        <member name="M:Majid.RandomHelper.GenerateRandomizedList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Generates a randomized list from given enumerable.
            </summary>
            <typeparam name="T">Type of items in the list</typeparam>
            <param name="items">items</param>
        </member>
        <member name="T:Majid.RealTime.IOnlineClient">
            <summary>
            Represents an online client connected to the application.
            </summary>
        </member>
        <member name="P:Majid.RealTime.IOnlineClient.ConnectionId">
            <summary>
            Unique connection Id for this client.
            </summary>
        </member>
        <member name="P:Majid.RealTime.IOnlineClient.IpAddress">
            <summary>
            IP address of this client.
            </summary>
        </member>
        <member name="P:Majid.RealTime.IOnlineClient.TenantId">
            <summary>
            Tenant Id.
            </summary>
        </member>
        <member name="P:Majid.RealTime.IOnlineClient.UserId">
            <summary>
            User Id.
            </summary>
        </member>
        <member name="P:Majid.RealTime.IOnlineClient.ConnectTime">
            <summary>
            Connection establishment time for this client.
            </summary>
        </member>
        <member name="P:Majid.RealTime.IOnlineClient.Item(System.String)">
            <summary>
            Shortcut to set/get <see cref="P:Majid.RealTime.IOnlineClient.Properties"/>.
            </summary>
        </member>
        <member name="P:Majid.RealTime.IOnlineClient.Properties">
            <summary>
            Can be used to add custom properties for this client.
            </summary>
        </member>
        <member name="T:Majid.RealTime.IOnlineClientManager`1">
            <summary>
            Used to manage online clients those are connected to the application.
            </summary>
        </member>
        <member name="M:Majid.RealTime.IOnlineClientManager.Add(Majid.RealTime.IOnlineClient)">
            <summary>
            Adds a client.
            </summary>
            <param name="client">The client.</param>
        </member>
        <member name="M:Majid.RealTime.IOnlineClientManager.Remove(System.String)">
            <summary>
            Removes a client by connection id.
            </summary>
            <param name="connectionId">The connection id.</param>
            <returns>True, if a client is removed</returns>
        </member>
        <member name="M:Majid.RealTime.IOnlineClientManager.GetByConnectionIdOrNull(System.String)">
            <summary>
            Tries to find a client by connection id.
            Returns null if not found.
            </summary>
            <param name="connectionId">connection id</param>
        </member>
        <member name="M:Majid.RealTime.IOnlineClientManager.GetAllClients">
            <summary>
            Gets all online clients.
            </summary>
        </member>
        <member name="T:Majid.RealTime.OnlineClient">
            <summary>
            Implements <see cref="T:Majid.RealTime.IOnlineClient"/>.
            </summary>
        </member>
        <member name="P:Majid.RealTime.OnlineClient.ConnectionId">
            <summary>
            Unique connection Id for this client.
            </summary>
        </member>
        <member name="P:Majid.RealTime.OnlineClient.IpAddress">
            <summary>
            IP address of this client.
            </summary>
        </member>
        <member name="P:Majid.RealTime.OnlineClient.TenantId">
            <summary>
            Tenant Id.
            </summary>
        </member>
        <member name="P:Majid.RealTime.OnlineClient.UserId">
            <summary>
            User Id.
            </summary>
        </member>
        <member name="P:Majid.RealTime.OnlineClient.ConnectTime">
            <summary>
            Connection establishment time for this client.
            </summary>
        </member>
        <member name="P:Majid.RealTime.OnlineClient.Item(System.String)">
            <summary>
            Shortcut to set/get <see cref="P:Majid.RealTime.OnlineClient.Properties"/>.
            </summary>
        </member>
        <member name="P:Majid.RealTime.OnlineClient.Properties">
            <summary>
            Can be used to add custom properties for this client.
            </summary>
        </member>
        <member name="M:Majid.RealTime.OnlineClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Majid.RealTime.OnlineClient"/> class.
            </summary>
        </member>
        <member name="M:Majid.RealTime.OnlineClient.#ctor(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int64})">
            <summary>
            Initializes a new instance of the <see cref="T:Majid.RealTime.OnlineClient"/> class.
            </summary>
            <param name="connectionId">The connection identifier.</param>
            <param name="ipAddress">The ip address.</param>
            <param name="tenantId">The tenant identifier.</param>
            <param name="userId">The user identifier.</param>
        </member>
        <member name="T:Majid.RealTime.OnlineClientManager">
            <summary>
            Implements <see cref="T:Majid.RealTime.IOnlineClientManager"/>.
            </summary>
        </member>
        <member name="P:Majid.RealTime.OnlineClientManager.Clients">
            <summary>
            Online clients.
            </summary>
        </member>
        <member name="M:Majid.RealTime.OnlineClientManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Majid.RealTime.OnlineClientManager"/> class.
            </summary>
        </member>
        <member name="T:Majid.RealTime.OnlineClientManagerExtensions">
            <summary>
            Extension methods for <see cref="T:Majid.RealTime.IOnlineClientManager"/>.
            </summary>
        </member>
        <member name="M:Majid.RealTime.OnlineClientManagerExtensions.IsOnline(Majid.RealTime.IOnlineClientManager,Majid.UserIdentifier)">
            <summary>
            Determines whether the specified user is online or not.
            </summary>
            <param name="onlineClientManager">The online client manager.</param>
            <param name="user">User.</param>
        </member>
        <member name="M:Majid.Reflection.Extensions.AssemblyExtensions.GetDirectoryPathOrNull(System.Reflection.Assembly)">
            <summary>
            Gets directory path of given assembly or returns null if can not find.
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="T:Majid.Reflection.Extensions.MemberInfoExtensions">
            <summary>
            Extensions to <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
        </member>
        <member name="M:Majid.Reflection.Extensions.MemberInfoExtensions.GetSingleAttributeOrNull``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets a single attribute for a member.
            </summary>
            <typeparam name="TAttribute">Type of the attribute</typeparam>
            <param name="memberInfo">The member that will be checked for the attribute</param>
            <param name="inherit">Include inherited attributes</param>
            <returns>Returns the attribute object if found. Returns null if not found.</returns>
        </member>
        <member name="T:Majid.Reflection.IAssemblyFinder">
            <summary>
            This interface is used to get assemblies in the application.
            It may not return all assemblies, but those are related with modules.
            </summary>
        </member>
        <member name="M:Majid.Reflection.IAssemblyFinder.GetAllAssemblies">
            <summary>
            Gets all assemblies.
            </summary>
            <returns>List of assemblies</returns>
        </member>
        <member name="M:Majid.Reflection.ProxyHelper.UnProxy(System.Object)">
            <summary>
            Returns dynamic proxy target object if this is a proxied object, otherwise returns the given object. 
            </summary>
        </member>
        <member name="T:Majid.Reflection.ReflectionHelper">
            <summary>
            Defines helper methods for reflection.
            </summary>
        </member>
        <member name="M:Majid.Reflection.ReflectionHelper.IsAssignableToGenericType(System.Type,System.Type)">
            <summary>
            Checks whether <paramref name="givenType"/> implements/inherits <paramref name="genericType"/>.
            </summary>
            <param name="givenType">Type to check</param>
            <param name="genericType">Generic type</param>
        </member>
        <member name="M:Majid.Reflection.ReflectionHelper.GetAttributesOfMemberAndDeclaringType(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets a list of attributes defined for a class member and it's declaring type including inherited attributes.
            </summary>
            <param name="inherit">Inherit attribute from base classes</param>
            <param name="memberInfo">MemberInfo</param>
        </member>
        <member name="M:Majid.Reflection.ReflectionHelper.GetAttributesOfMemberAndType(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
            Gets a list of attributes defined for a class member and type including inherited attributes.
            </summary>
            <param name="memberInfo">MemberInfo</param>
            <param name="type">Type</param>
            <param name="inherit">Inherit attribute from base classes</param>
        </member>
        <member name="M:Majid.Reflection.ReflectionHelper.GetAttributesOfMemberAndDeclaringType``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets a list of attributes defined for a class member and it's declaring type including inherited attributes.
            </summary>
            <typeparam name="TAttribute">Type of the attribute</typeparam>
            <param name="memberInfo">MemberInfo</param>
            <param name="inherit">Inherit attribute from base classes</param>
        </member>
        <member name="M:Majid.Reflection.ReflectionHelper.GetAttributesOfMemberAndType``1(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
            Gets a list of attributes defined for a class member and type including inherited attributes.
            </summary>
            <typeparam name="TAttribute">Type of the attribute</typeparam>
            <param name="memberInfo">MemberInfo</param>
            <param name="type">Type</param>
            <param name="inherit">Inherit attribute from base classes</param>
        </member>
        <member name="M:Majid.Reflection.ReflectionHelper.GetSingleAttributeOfMemberOrDeclaringTypeOrDefault``1(System.Reflection.MemberInfo,``0,System.Boolean)">
            <summary>
            Tries to gets an of attribute defined for a class member and it's declaring type including inherited attributes.
            Returns default value if it's not declared at all.
            </summary>
            <typeparam name="TAttribute">Type of the attribute</typeparam>
            <param name="memberInfo">MemberInfo</param>
            <param name="defaultValue">Default value (null as default)</param>
            <param name="inherit">Inherit attribute from base classes</param>
        </member>
        <member name="M:Majid.Reflection.ReflectionHelper.GetSingleAttributeOrDefault``1(System.Reflection.MemberInfo,``0,System.Boolean)">
            <summary>
            Tries to gets an of attribute defined for a class member and it's declaring type including inherited attributes.
            Returns default value if it's not declared at all.
            </summary>
            <typeparam name="TAttribute">Type of the attribute</typeparam>
            <param name="memberInfo">MemberInfo</param>
            <param name="defaultValue">Default value (null as default)</param>
            <param name="inherit">Inherit attribute from base classes</param>
        </member>
        <member name="M:Majid.Reflection.ReflectionHelper.GetPropertyByPath(System.Object,System.Type,System.String)">
            <summary>
            Gets a property by it's full path from given object
            </summary>
            <param name="obj">Object to get value from</param>
            <param name="objectType">Type of given object</param>
            <param name="propertyPath">Full path of property</param>
            <returns></returns>
        </member>
        <member name="M:Majid.Reflection.ReflectionHelper.GetValueByPath(System.Object,System.Type,System.String)">
            <summary>
            Gets value of a property by it's full path from given object
            </summary>
            <param name="obj">Object to get value from</param>
            <param name="objectType">Type of given object</param>
            <param name="propertyPath">Full path of property</param>
            <returns></returns>
        </member>
        <member name="M:Majid.Reflection.ReflectionHelper.SetValueByPath(System.Object,System.Type,System.String,System.Object)">
            <summary>
            Sets value of a property by it's full path on given object
            </summary>
            <param name="obj"></param>
            <param name="objectType"></param>
            <param name="propertyPath"></param>
            <param name="value"></param>
        </member>
        <member name="T:Majid.Reflection.TypeHelper">
            <summary>
            Some simple type-checking methods used internally.
            </summary>
        </member>
        <member name="T:Majid.RegularGuidGenerator">
            <summary>
            Implements <see cref="T:Majid.IGuidGenerator"/> by using <see cref="M:System.Guid.NewGuid"/>.
            </summary>
        </member>
        <member name="T:Majid.Resources.Embedded.EmbeddedResourceItem">
            <summary>
            Stores needed information of an embedded resource.
            </summary>
        </member>
        <member name="P:Majid.Resources.Embedded.EmbeddedResourceItem.FileName">
            <summary>
            File name including extension.
            </summary>
        </member>
        <member name="P:Majid.Resources.Embedded.EmbeddedResourceItem.Content">
            <summary>
            Content of the resource file.
            </summary>
        </member>
        <member name="P:Majid.Resources.Embedded.EmbeddedResourceItem.Assembly">
            <summary>
            The assembly that contains the resource.
            </summary>
        </member>
        <member name="M:Majid.Resources.Embedded.EmbeddedResourceManager.GetResource(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Majid.Resources.Embedded.IEmbeddedResourceManager">
            <summary>
            Provides infrastructure to use any type of resources (files) embedded into assemblies.
            </summary>
        </member>
        <member name="M:Majid.Resources.Embedded.IEmbeddedResourceManager.GetResource(System.String)">
            <summary>
            Used to get an embedded resource file.
            Can return null if resource is not found!
            </summary>
            <param name="fullResourcePath">Full path of the resource</param>
            <returns>The resource</returns>
        </member>
        <member name="M:Majid.Resources.Embedded.IEmbeddedResourceManager.GetResources(System.String)">
            <summary>
            Used to get the list of embedded resource file.
            </summary>
            <param name="fullResourcePath">Full path of the resource</param>
            <returns>The list of resource</returns>
        </member>
        <member name="T:Majid.Runtime.Caching.CacheBase">
            <summary>
            Base class for caches.
            It's used to simplify implementing <see cref="T:Majid.Runtime.Caching.ICache"/>.
            </summary>
        </member>
        <member name="M:Majid.Runtime.Caching.CacheBase.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Majid.Runtime.Caching.CacheExtensions">
            <summary>
            Extension methods for <see cref="T:Majid.Runtime.Caching.ICache"/>.
            </summary>
        </member>
        <member name="T:Majid.Runtime.Caching.CacheManagerBase">
            <summary>
            Base class for cache managers.
            </summary>
        </member>
        <member name="M:Majid.Runtime.Caching.CacheManagerBase.#ctor(Majid.Dependency.IIocManager,Majid.Runtime.Caching.Configuration.ICachingConfiguration)">
            <summary>
            Constructor.
            </summary>
            <param name="iocManager"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:Majid.Runtime.Caching.CacheManagerBase.CreateCacheImplementation(System.String)">
            <summary>
            Used to create actual cache implementation.
            </summary>
            <param name="name">Name of the cache</param>
            <returns>Cache object</returns>
        </member>
        <member name="T:Majid.Runtime.Caching.CacheManagerExtensions">
            <summary>
            Extension methods for <see cref="T:Majid.Runtime.Caching.ICacheManager"/>.
            </summary>
        </member>
        <member name="T:Majid.Runtime.Caching.Configuration.ICacheConfigurator">
            <summary>
            A registered cache configurator.
            </summary>
        </member>
        <member name="P:Majid.Runtime.Caching.Configuration.ICacheConfigurator.CacheName">
            <summary>
            Name of the cache.
            It will be null if this configurator configures all caches.
            </summary>
        </member>
        <member name="P:Majid.Runtime.Caching.Configuration.ICacheConfigurator.InitAction">
            <summary>
            Configuration action. Called just after the cache is created.
            </summary>
        </member>
        <member name="T:Majid.Runtime.Caching.Configuration.ICachingConfiguration">
            <summary>
            Used to configure caching system.
            </summary>
        </member>
        <member name="P:Majid.Runtime.Caching.Configuration.ICachingConfiguration.MajidConfiguration">
            <summary>
            Gets the MAJID configuration object.
            </summary>
        </member>
        <member name="P:Majid.Runtime.Caching.Configuration.ICachingConfiguration.Configurators">
            <summary>
            List of all registered configurators.
            </summary>
        </member>
        <member name="M:Majid.Runtime.Caching.Configuration.ICachingConfiguration.ConfigureAll(System.Action{Majid.Runtime.Caching.ICache})">
            <summary>
            Used to configure all caches.
            </summary>
            <param name="initAction">
            An action to configure caches
            This action is called for each cache just after created.
            </param>
        </member>
        <member name="M:Majid.Runtime.Caching.Configuration.ICachingConfiguration.Configure(System.String,System.Action{Majid.Runtime.Caching.ICache})">
            <summary>
            Used to configure a specific cache. 
            </summary>
            <param name="cacheName">Cache name</param>
            <param name="initAction">
            An action to configure the cache.
            This action is called just after the cache is created.
            </param>
        </member>
        <member name="T:Majid.Runtime.Caching.ICache">
            <summary>
            Defines a cache that can be store and get items by keys.
            </summary>
        </member>
        <member name="P:Majid.Runtime.Caching.ICache.Name">
            <summary>
            Unique name of the cache.
            </summary>
        </member>
        <member name="P:Majid.Runtime.Caching.ICache.DefaultSlidingExpireTime">
            <summary>
            Default sliding expire time of cache items.
            Default value: 60 minutes (1 hour).
            Can be changed by configuration.
            </summary>
        </member>
        <member name="P:Majid.Runtime.Caching.ICache.DefaultAbsoluteExpireTime">
            <summary>
            Default absolute expire time of cache items.
            Default value: null (not used).
            </summary>
        </member>
        <member name="M:Majid.Runtime.Caching.ICache.Get(System.String,System.Func{System.String,System.Object})">
            <summary>
            Gets an item from the cache.
            This method hides cache provider failures (and logs them),
            uses the factory method to get the object if cache provider fails.
            </summary>
            <param name="key">Key</param>
            <param name="factory">Factory method to create cache item if not exists</param>
            <returns>Cached item</returns>
        </member>
        <member name="M:Majid.Runtime.Caching.ICache.GetAsync(System.String,System.Func{System.String,System.Threading.Tasks.Task{System.Object}})">
            <summary>
            Gets an item from the cache.
            This method hides cache provider failures (and logs them),
            uses the factory method to get the object if cache provider fails.
            </summary>
            <param name="key">Key</param>
            <param name="factory">Factory method to create cache item if not exists</param>
            <returns>Cached item</returns>
        </member>
        <member name="M:Majid.Runtime.Caching.ICache.GetOrDefault(System.String)">
            <summary>
            Gets an item from the cache or null if not found.
            </summary>
            <param name="key">Key</param>
            <returns>Cached item or null if not found</returns>
        </member>
        <member name="M:Majid.Runtime.Caching.ICache.GetOrDefaultAsync(System.String)">
            <summary>
            Gets an item from the cache or null if not found.
            </summary>
            <param name="key">Key</param>
            <returns>Cached item or null if not found</returns>
        </member>
        <member name="M:Majid.Runtime.Caching.ICache.Set(System.String,System.Object,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            Saves/Overrides an item in the cache by a key.
            Use one of the expire times at most (<paramref name="slidingExpireTime"/> or <paramref name="absoluteExpireTime"/>).
            If none of them is specified, then
            <see cref="P:Majid.Runtime.Caching.ICache.DefaultAbsoluteExpireTime"/> will be used if it's not null. Othewise, <see cref="P:Majid.Runtime.Caching.ICache.DefaultSlidingExpireTime"/>
            will be used.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
            <param name="slidingExpireTime">Sliding expire time</param>
            <param name="absoluteExpireTime">Absolute expire time</param>
        </member>
        <member name="M:Majid.Runtime.Caching.ICache.SetAsync(System.String,System.Object,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            Saves/Overrides an item in the cache by a key.
            Use one of the expire times at most (<paramref name="slidingExpireTime"/> or <paramref name="absoluteExpireTime"/>).
            If none of them is specified, then
            <see cref="P:Majid.Runtime.Caching.ICache.DefaultAbsoluteExpireTime"/> will be used if it's not null. Othewise, <see cref="P:Majid.Runtime.Caching.ICache.DefaultSlidingExpireTime"/>
            will be used.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
            <param name="slidingExpireTime">Sliding expire time</param>
            <param name="absoluteExpireTime">Absolute expire time</param>
        </member>
        <member name="M:Majid.Runtime.Caching.ICache.Remove(System.String)">
            <summary>
            Removes a cache item by it's key.
            </summary>
            <param name="key">Key</param>
        </member>
        <member name="M:Majid.Runtime.Caching.ICache.RemoveAsync(System.String)">
            <summary>
            Removes a cache item by it's key (does nothing if given key does not exists in the cache).
            </summary>
            <param name="key">Key</param>
        </member>
        <member name="M:Majid.Runtime.Caching.ICache.Clear">
            <summary>
            Clears all items in this cache.
            </summary>
        </member>
        <member name="M:Majid.Runtime.Caching.ICache.ClearAsync">
            <summary>
            Clears all items in this cache.
            </summary>
        </member>
        <member name="T:Majid.Runtime.Caching.ICacheManager">
            <summary>
            An upper level container for <see cref="T:Majid.Runtime.Caching.ICache"/> objects. 
            A cache manager should work as Singleton and track and manage <see cref="T:Majid.Runtime.Caching.ICache"/> objects.
            </summary>
        </member>
        <member name="M:Majid.Runtime.Caching.ICacheManager.GetAllCaches">
            <summary>
            Gets all caches.
            </summary>
            <returns>List of caches</returns>
        </member>
        <member name="M:Majid.Runtime.Caching.ICacheManager.GetCache(System.String)">
            <summary>
            Gets a <see cref="T:Majid.Runtime.Caching.ICache"/> instance.
            It may create the cache if it does not already exists.
            </summary>
            <param name="name">
            Unique and case sensitive name of the cache.
            </param>
            <returns>The cache reference</returns>
        </member>
        <member name="T:Majid.Runtime.Caching.ITypedCache`2">
            <summary>
            An interface to work with cache in a typed manner.
            Use <see cref="M:Majid.Runtime.Caching.CacheExtensions.AsTyped``2(Majid.Runtime.Caching.ICache)"/> method
            to convert a <see cref="T:Majid.Runtime.Caching.ICache"/> to this interface.
            </summary>
            <typeparam name="TKey">Key type for cache items</typeparam>
            <typeparam name="TValue">Value type for cache items</typeparam>
        </member>
        <member name="P:Majid.Runtime.Caching.ITypedCache`2.Name">
            <summary>
            Unique name of the cache.
            </summary>
        </member>
        <member name="P:Majid.Runtime.Caching.ITypedCache`2.DefaultSlidingExpireTime">
            <summary>
            Default sliding expire time of cache items.
            </summary>
        </member>
        <member name="P:Majid.Runtime.Caching.ITypedCache`2.InternalCache">
            <summary>
            Gets the internal cache.
            </summary>
        </member>
        <member name="M:Majid.Runtime.Caching.ITypedCache`2.Get(`0,System.Func{`0,`1})">
            <summary>
            Gets an item from the cache.
            </summary>
            <param name="key">Key</param>
            <param name="factory">Factory method to create cache item if not exists</param>
            <returns>Cached item</returns>
        </member>
        <member name="M:Majid.Runtime.Caching.ITypedCache`2.GetAsync(`0,System.Func{`0,System.Threading.Tasks.Task{`1}})">
            <summary>
            Gets an item from the cache.
            </summary>
            <param name="key">Key</param>
            <param name="factory">Factory method to create cache item if not exists</param>
            <returns>Cached item</returns>
        </member>
        <member name="M:Majid.Runtime.Caching.ITypedCache`2.GetOrDefault(`0)">
            <summary>
            Gets an item from the cache or null if not found.
            </summary>
            <param name="key">Key</param>
            <returns>Cached item or null if not found</returns>
        </member>
        <member name="M:Majid.Runtime.Caching.ITypedCache`2.GetOrDefaultAsync(`0)">
            <summary>
            Gets an item from the cache or null if not found.
            </summary>
            <param name="key">Key</param>
            <returns>Cached item or null if not found</returns>
        </member>
        <member name="M:Majid.Runtime.Caching.ITypedCache`2.Set(`0,`1,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            Saves/Overrides an item in the cache by a key.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
            <param name="slidingExpireTime">Sliding expire time</param>
            <param name="absoluteExpireTime">Absolute expire time</param>
        </member>
        <member name="M:Majid.Runtime.Caching.ITypedCache`2.SetAsync(`0,`1,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            Saves/Overrides an item in the cache by a key.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
            <param name="slidingExpireTime">Sliding expire time</param>
            <param name="absoluteExpireTime">Absolute expire time</param>
        </member>
        <member name="M:Majid.Runtime.Caching.ITypedCache`2.Remove(`0)">
            <summary>
            Removes a cache item by it's key (does nothing if given key does not exists in the cache).
            </summary>
            <param name="key">Key</param>
        </member>
        <member name="M:Majid.Runtime.Caching.ITypedCache`2.RemoveAsync(`0)">
            <summary>
            Removes a cache item by it's key.
            </summary>
            <param name="key">Key</param>
        </member>
        <member name="M:Majid.Runtime.Caching.ITypedCache`2.Clear">
            <summary>
            Clears all items in this cache.
            </summary>
        </member>
        <member name="M:Majid.Runtime.Caching.ITypedCache`2.ClearAsync">
            <summary>
            Clears all items in this cache.
            </summary>
        </member>
        <member name="T:Majid.Runtime.Caching.MajidCacheData">
            <summary>
            A class to hold the Type information and Serialized payload for data stored in the cache.
            </summary>
        </member>
        <member name="T:Majid.Runtime.Caching.MajidCacheNames">
            <summary>
            Names of standard caches used in MAJID.
            </summary>
        </member>
        <member name="F:Majid.Runtime.Caching.MajidCacheNames.ApplicationSettings">
            <summary>
            Application settings cache: MajidApplicationSettingsCache.
            </summary>
        </member>
        <member name="F:Majid.Runtime.Caching.MajidCacheNames.TenantSettings">
            <summary>
            Tenant settings cache: MajidTenantSettingsCache.
            </summary>
        </member>
        <member name="F:Majid.Runtime.Caching.MajidCacheNames.UserSettings">
            <summary>
            User settings cache: MajidUserSettingsCache.
            </summary>
        </member>
        <member name="F:Majid.Runtime.Caching.MajidCacheNames.LocalizationScripts">
            <summary>
            Localization scripts cache: MajidLocalizationScripts.
            </summary>
        </member>
        <member name="T:Majid.Runtime.Caching.Memory.MajidMemoryCache">
            <summary>
            Implements <see cref="T:Majid.Runtime.Caching.ICache"/> to work with <see cref="T:Microsoft.Extensions.Caching.Memory.MemoryCache"/>.
            </summary>
        </member>
        <member name="M:Majid.Runtime.Caching.Memory.MajidMemoryCache.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Unique name of the cache</param>
        </member>
        <member name="T:Majid.Runtime.Caching.Memory.MajidMemoryCacheManager">
            <summary>
            Implements <see cref="T:Majid.Runtime.Caching.ICacheManager"/> to work with MemoryCache.
            </summary>
        </member>
        <member name="M:Majid.Runtime.Caching.Memory.MajidMemoryCacheManager.#ctor(Majid.Dependency.IIocManager,Majid.Runtime.Caching.Configuration.ICachingConfiguration)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Majid.Runtime.Caching.TypedCacheExtensions">
            <summary>
            Extension methods for <see cref="T:Majid.Runtime.Caching.ITypedCache`2"/>.
            </summary>
        </member>
        <member name="T:Majid.Runtime.Caching.TypedCacheWrapper`2">
            <summary>
            Implements <see cref="T:Majid.Runtime.Caching.ITypedCache`2"/> to wrap a <see cref="T:Majid.Runtime.Caching.ICache"/>.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Majid.Runtime.Caching.TypedCacheWrapper`2.#ctor(Majid.Runtime.Caching.ICache)">
            <summary>
            Creates a new <see cref="T:Majid.Runtime.Caching.TypedCacheWrapper`2"/> object.
            </summary>
            <param name="internalCache">The actual internal cache</param>
        </member>
        <member name="T:Majid.Runtime.Security.MajidClaimTypes">
            <summary>
            Used to get MAJID-specific claim type names.
            </summary>
        </member>
        <member name="P:Majid.Runtime.Security.MajidClaimTypes.UserName">
            <summary>
            UserId.
            Default: <see cref="F:System.Security.Claims.ClaimTypes.Name"/>
            </summary>
        </member>
        <member name="P:Majid.Runtime.Security.MajidClaimTypes.UserId">
            <summary>
            UserId.
            Default: <see cref="F:System.Security.Claims.ClaimTypes.NameIdentifier"/>
            </summary>
        </member>
        <member name="P:Majid.Runtime.Security.MajidClaimTypes.Role">
            <summary>
            UserId.
            Default: <see cref="F:System.Security.Claims.ClaimTypes.Role"/>
            </summary>
        </member>
        <member name="P:Majid.Runtime.Security.MajidClaimTypes.TenantId">
            <summary>
            TenantId.
            Default: http://www.aspnetboilerplate.com/identity/claims/tenantId
            </summary>
        </member>
        <member name="P:Majid.Runtime.Security.MajidClaimTypes.ImpersonatorUserId">
            <summary>
            ImpersonatorUserId.
            Default: http://www.aspnetboilerplate.com/identity/claims/impersonatorUserId
            </summary>
        </member>
        <member name="P:Majid.Runtime.Security.MajidClaimTypes.ImpersonatorTenantId">
            <summary>
            ImpersonatorTenantId
            Default: http://www.aspnetboilerplate.com/identity/claims/impersonatorTenantId
            </summary>
        </member>
        <member name="T:Majid.Runtime.Security.SimpleStringCipher">
            <summary>
            Can be used to simply encrypt/decrypt texts.
            </summary>
        </member>
        <member name="F:Majid.Runtime.Security.SimpleStringCipher.InitVectorBytes">
            <summary>
            This constant string is used as a "salt" value for the PasswordDeriveBytes function calls.
            This size of the IV (in bytes) must = (keysize / 8).  Default keysize is 256, so the IV must be
            32 bytes long.  Using a 16 character string here gives us 32 bytes when converted to a byte array.
            </summary>
        </member>
        <member name="P:Majid.Runtime.Security.SimpleStringCipher.DefaultPassPhrase">
            <summary>
            Default password to encrypt/decrypt texts.
            It's recommented to set to another value for security.
            Default value: "gsKnGZ041HLL4IM8"
            </summary>
        </member>
        <member name="P:Majid.Runtime.Security.SimpleStringCipher.DefaultInitVectorBytes">
            <summary>
            Default value: Encoding.ASCII.GetBytes("jkE49230Tf093b42")
            </summary>
        </member>
        <member name="P:Majid.Runtime.Security.SimpleStringCipher.DefaultSalt">
            <summary>
            Default value: Encoding.ASCII.GetBytes("hgt!16kl")
            </summary>
        </member>
        <member name="F:Majid.Runtime.Security.SimpleStringCipher.Keysize">
            <summary>
            This constant is used to determine the keysize of the encryption algorithm.
            </summary>
        </member>
        <member name="T:Majid.Runtime.Serialization.BinarySerializationHelper">
            <summary>
            This class is used to simplify serialization/deserialization operations.
            Uses .NET binary serialization.
            </summary>
        </member>
        <member name="M:Majid.Runtime.Serialization.BinarySerializationHelper.Serialize(System.Object)">
            <summary>
            Serializes an object and returns as a byte array.
            </summary>
            <param name="obj">object to be serialized</param>
            <returns>bytes of object</returns>
        </member>
        <member name="M:Majid.Runtime.Serialization.BinarySerializationHelper.Serialize(System.Object,System.IO.Stream)">
            <summary>
            Serializes an object into a stream.
            </summary>
            <param name="obj">object to be serialized</param>
            <param name="stream">Stream to serialize in</param>
            <returns>bytes of object</returns>
        </member>
        <member name="M:Majid.Runtime.Serialization.BinarySerializationHelper.Deserialize(System.Byte[])">
            <summary>
            Deserializes an object from given byte array.
            </summary>
            <param name="bytes">The byte array that contains object</param>
            <returns>deserialized object</returns>
        </member>
        <member name="M:Majid.Runtime.Serialization.BinarySerializationHelper.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes an object from given stream.
            </summary>
            <param name="stream">The stream that contains object</param>
            <returns>deserialized object</returns> 
        </member>
        <member name="M:Majid.Runtime.Serialization.BinarySerializationHelper.DeserializeExtended(System.Byte[])">
            <summary>
            Deserializes an object from given byte array.
            Difference from <see cref="M:Majid.Runtime.Serialization.BinarySerializationHelper.Deserialize(System.Byte[])"/> is that; this method can also deserialize
            types that are defined in dynamically loaded assemblies (like PlugIns).
            </summary>
            <param name="bytes">The byte array that contains object</param>
            <returns>deserialized object</returns>        
        </member>
        <member name="M:Majid.Runtime.Serialization.BinarySerializationHelper.DeserializeExtended(System.IO.Stream)">
            <summary>
            Deserializes an object from given stream.
            Difference from <see cref="M:Majid.Runtime.Serialization.BinarySerializationHelper.Deserialize(System.IO.Stream)"/> is that; this method can also deserialize
            types that are defined in dynamically loaded assemblies (like PlugIns).
            </summary>
            <param name="stream">The stream that contains object</param>
            <returns>deserialized object</returns> 
        </member>
        <member name="T:Majid.Runtime.Serialization.BinarySerializationHelper.ExtendedSerializationBinder">
            <summary>
            This class is used in deserializing to allow deserializing objects that are defined
            in assemlies that are load in runtime (like PlugIns).
            </summary>
        </member>
        <member name="T:Majid.Runtime.Session.ClaimsMajidSession">
            <summary>
            Implements <see cref="T:Majid.Runtime.Session.IMajidSession"/> to get session properties from current claims.
            </summary>
        </member>
        <member name="T:Majid.Runtime.Session.IMajidSession">
            <summary>
            Defines some session information that can be useful for applications.
            </summary>
        </member>
        <member name="P:Majid.Runtime.Session.IMajidSession.UserId">
            <summary>
            Gets current UserId or null.
            It can be null if no user logged in.
            </summary>
        </member>
        <member name="P:Majid.Runtime.Session.IMajidSession.TenantId">
            <summary>
            Gets current TenantId or null.
            This TenantId should be the TenantId of the <see cref="P:Majid.Runtime.Session.IMajidSession.UserId"/>.
            It can be null if given <see cref="P:Majid.Runtime.Session.IMajidSession.UserId"/> is a host user or no user logged in.
            </summary>
        </member>
        <member name="P:Majid.Runtime.Session.IMajidSession.MultiTenancySide">
            <summary>
            Gets current multi-tenancy side.
            </summary>
        </member>
        <member name="P:Majid.Runtime.Session.IMajidSession.ImpersonatorUserId">
            <summary>
            UserId of the impersonator.
            This is filled if a user is performing actions behalf of the <see cref="P:Majid.Runtime.Session.IMajidSession.UserId"/>.
            </summary>
        </member>
        <member name="P:Majid.Runtime.Session.IMajidSession.ImpersonatorTenantId">
            <summary>
            TenantId of the impersonator.
            This is filled if a user with <see cref="P:Majid.Runtime.Session.IMajidSession.ImpersonatorUserId"/> performing actions behalf of the <see cref="P:Majid.Runtime.Session.IMajidSession.UserId"/>.
            </summary>
        </member>
        <member name="M:Majid.Runtime.Session.IMajidSession.Use(System.Nullable{System.Int32},System.Nullable{System.Int64})">
            <summary>
            Used to change <see cref="P:Majid.Runtime.Session.IMajidSession.TenantId"/> and <see cref="P:Majid.Runtime.Session.IMajidSession.UserId"/> for a limited scope.
            </summary>
            <param name="tenantId"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="T:Majid.Runtime.Session.MajidSessionExtensions">
            <summary>
            Extension methods for <see cref="T:Majid.Runtime.Session.IMajidSession"/>.
            </summary>
        </member>
        <member name="M:Majid.Runtime.Session.MajidSessionExtensions.GetUserId(Majid.Runtime.Session.IMajidSession)">
            <summary>
            Gets current User's Id.
            Throws <see cref="T:Majid.MajidException"/> if <see cref="P:Majid.Runtime.Session.IMajidSession.UserId"/> is null.
            </summary>
            <param name="session">Session object.</param>
            <returns>Current User's Id.</returns>
        </member>
        <member name="M:Majid.Runtime.Session.MajidSessionExtensions.GetTenantId(Majid.Runtime.Session.IMajidSession)">
            <summary>
            Gets current Tenant's Id.
            Throws <see cref="T:Majid.MajidException"/> if <see cref="P:Majid.Runtime.Session.IMajidSession.TenantId"/> is null.
            </summary>
            <param name="session">Session object.</param>
            <returns>Current Tenant's Id.</returns>
            <exception cref="T:Majid.MajidException"></exception>
        </member>
        <member name="M:Majid.Runtime.Session.MajidSessionExtensions.ToUserIdentifier(Majid.Runtime.Session.IMajidSession)">
            <summary>
            Creates <see cref="T:Majid.UserIdentifier"/> from given session.
            Returns null if <see cref="P:Majid.Runtime.Session.IMajidSession.UserId"/> is null.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="T:Majid.Runtime.Session.NullMajidSession">
            <summary>
            Implements null object pattern for <see cref="T:Majid.Runtime.Session.IMajidSession"/>.
            </summary>
        </member>
        <member name="P:Majid.Runtime.Session.NullMajidSession.Instance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="P:Majid.Runtime.Session.NullMajidSession.UserId">
            <inheritdoc/>
        </member>
        <member name="P:Majid.Runtime.Session.NullMajidSession.TenantId">
            <inheritdoc/>
        </member>
        <member name="P:Majid.Runtime.Validation.CustomValidationContext.Results">
            <summary>
            List of validation results (errors). Add validation errors to this list.
            </summary>
        </member>
        <member name="P:Majid.Runtime.Validation.CustomValidationContext.IocResolver">
            <summary>
            Can be used to resolve dependencies on validation.
            </summary>
        </member>
        <member name="M:Majid.Runtime.Validation.CustomValidationContextExtensions.Localize(Majid.Runtime.Validation.CustomValidationContext,System.String,System.String)">
            <param name="validationContext">Validation context</param>
            <param name="sourceName">Localization source name</param>
            <param name="key">Localization key</param>
        </member>
        <member name="T:Majid.Runtime.Validation.DisableValidationAttribute">
            <summary>
            Can be added to a method to disable auto validation.
            </summary>
        </member>
        <member name="T:Majid.Runtime.Validation.EnableValidationAttribute">
            <summary>
            Can be added to a method to enable auto validation if validation is disabled for it's class.
            </summary>
        </member>
        <member name="T:Majid.Runtime.Validation.ICustomValidate">
            <summary>
            Defines interface that must be implemented by classes those must be validated with custom rules.
            So, implementing class can define it's own validation logic.
            </summary>
        </member>
        <member name="M:Majid.Runtime.Validation.ICustomValidate.AddValidationErrors(Majid.Runtime.Validation.CustomValidationContext)">
            <summary>
            This method is used to validate the object.
            </summary>
            <param name="context">Validation context.</param>
        </member>
        <member name="M:Majid.Runtime.Validation.Interception.DataAnnotationsValidator.GetDataAnnotationAttributeErrors(System.Object)">
            <summary>
            Checks all properties for DataAnnotations attributes.
            </summary>
        </member>
        <member name="T:Majid.Runtime.Validation.Interception.IMethodParameterValidator">
            <summary>
            This interface is used to validate method parameters.
            </summary>
        </member>
        <member name="T:Majid.Runtime.Validation.Interception.MethodInvocationValidator">
            <summary>
            This class is used to validate a method call (invocation) for method arguments.
            </summary>
        </member>
        <member name="M:Majid.Runtime.Validation.Interception.MethodInvocationValidator.#ctor(Majid.Configuration.Startup.IValidationConfiguration,Majid.Dependency.IIocResolver)">
            <summary>
            Creates a new <see cref="T:Majid.Runtime.Validation.Interception.MethodInvocationValidator"/> instance.
            </summary>
        </member>
        <member name="M:Majid.Runtime.Validation.Interception.MethodInvocationValidator.Initialize(System.Reflection.MethodInfo,System.Object[])">
            <param name="method">Method to be validated</param>
            <param name="parameterValues">List of arguments those are used to call the <paramref name="method"/>.</param>
        </member>
        <member name="M:Majid.Runtime.Validation.Interception.MethodInvocationValidator.Validate">
            <summary>
            Validates the method invocation.
            </summary>
        </member>
        <member name="M:Majid.Runtime.Validation.Interception.MethodInvocationValidator.ValidateMethodParameter(System.Reflection.ParameterInfo,System.Object)">
            <summary>
            Validates given parameter for given value.
            </summary>
            <param name="parameterInfo">Parameter of the method to validate</param>
            <param name="parameterValue">Value to validate</param>
        </member>
        <member name="T:Majid.Runtime.Validation.Interception.ValidationInterceptor">
            <summary>
            This interceptor is used intercept method calls for classes which's methods must be validated.
            </summary>
        </member>
        <member name="T:Majid.Runtime.Validation.IShouldNormalize">
            <summary>
            This interface is used to normalize inputs before method execution.
            </summary>
        </member>
        <member name="M:Majid.Runtime.Validation.IShouldNormalize.Normalize">
            <summary>
            This method is called lastly before method execution (after validation if exists).
            </summary>
        </member>
        <member name="T:Majid.Runtime.Validation.MajidValidationException">
            <summary>
            This exception type is used to throws validation exceptions.
            </summary>
        </member>
        <member name="P:Majid.Runtime.Validation.MajidValidationException.ValidationErrors">
            <summary>
            Detailed list of validation errors for this exception.
            </summary>
        </member>
        <member name="P:Majid.Runtime.Validation.MajidValidationException.Severity">
            <summary>
            Exception severity.
            Default: Warn.
            </summary>
        </member>
        <member name="M:Majid.Runtime.Validation.MajidValidationException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Majid.Runtime.Validation.MajidValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for serializing.
            </summary>
        </member>
        <member name="M:Majid.Runtime.Validation.MajidValidationException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:Majid.Runtime.Validation.MajidValidationException.#ctor(System.String,System.Collections.Generic.IList{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message</param>
            <param name="validationErrors">Validation errors</param>
        </member>
        <member name="M:Majid.Runtime.Validation.MajidValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="P:Majid.Runtime.Validation.ValueValidatorBase.Item(System.String)">
            <summary>
            Gets/sets arbitrary objects related to this object.
            Gets null if given key does not exists.
            </summary>
            <param name="key">Key</param>
        </member>
        <member name="P:Majid.Runtime.Validation.ValueValidatorBase.Attributes">
            <summary>
            Arbitrary objects related to this object.
            </summary>
        </member>
        <member name="T:Majid.SequentialGuidGenerator">
            <summary>
            Implements <see cref="T:Majid.IGuidGenerator"/> by creating sequential Guids.
            This code is taken from https://github.com/jhtodd/SequentialGuid/blob/master/SequentialGuid/Classes/SequentialGuid.cs
            </summary>
        </member>
        <member name="P:Majid.SequentialGuidGenerator.Instance">
            <summary>
            Gets the singleton <see cref="T:Majid.SequentialGuidGenerator"/> instance.
            </summary>
        </member>
        <member name="M:Majid.SequentialGuidGenerator.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Majid.SequentialGuidGenerator"/> class from being created.
            Use <see cref="P:Majid.SequentialGuidGenerator.Instance"/>.
            </summary>
        </member>
        <member name="T:Majid.SequentialGuidGenerator.SequentialGuidDatabaseType">
            <summary>
            Database type to generate GUIDs.
            </summary>
        </member>
        <member name="T:Majid.SequentialGuidGenerator.SequentialGuidType">
            <summary>
            Describes the type of a sequential GUID value.
            </summary>
        </member>
        <member name="F:Majid.SequentialGuidGenerator.SequentialGuidType.SequentialAsString">
            <summary>
            The GUID should be sequential when formatted using the
            <see cref="M:System.Guid.ToString" /> method.
            </summary>
        </member>
        <member name="F:Majid.SequentialGuidGenerator.SequentialGuidType.SequentialAsBinary">
            <summary>
            The GUID should be sequential when formatted using the
            <see cref="M:System.Guid.ToByteArray" /> method.
            </summary>
        </member>
        <member name="F:Majid.SequentialGuidGenerator.SequentialGuidType.SequentialAtEnd">
            <summary>
            The sequential portion of the GUID should be located at the end
            of the Data4 block.
            </summary>
        </member>
        <member name="T:Majid.Specifications.AndNotSpecification`1">
            <summary>
            Represents the combined specification which indicates that the first specification
            can be satisifed by the given object whereas the second one cannot.
            </summary>
            <typeparam name="T">The type of the object to which the specification is applied.</typeparam>
        </member>
        <member name="M:Majid.Specifications.AndNotSpecification`1.#ctor(Majid.Specifications.ISpecification{`0},Majid.Specifications.ISpecification{`0})">
            <summary>
            Constructs a new instance of <see cref="T:Majid.Specifications.AndNotSpecification`1"/> class.
            </summary>
            <param name="left">The first specification.</param>
            <param name="right">The second specification.</param>
        </member>
        <member name="M:Majid.Specifications.AndNotSpecification`1.ToExpression">
            <summary>
            Gets the LINQ expression which represents the current specification.
            </summary>
            <returns>The LINQ expression.</returns>
        </member>
        <member name="T:Majid.Specifications.AndSpecification`1">
            <summary>
            Represents the combined specification which indicates that both of the given
            specifications should be satisfied by the given object.
            </summary>
            <typeparam name="T">The type of the object to which the specification is applied.</typeparam>
        </member>
        <member name="M:Majid.Specifications.AndSpecification`1.#ctor(Majid.Specifications.ISpecification{`0},Majid.Specifications.ISpecification{`0})">
            <summary>
            Constructs a new instance of <see cref="T:Majid.Specifications.AndSpecification`1"/> class.
            </summary>
            <param name="left">The first specification.</param>
            <param name="right">The second specification.</param>
        </member>
        <member name="M:Majid.Specifications.AndSpecification`1.ToExpression">
            <summary>
            Gets the LINQ expression which represents the current specification.
            </summary>
            <returns>The LINQ expression.</returns>
        </member>
        <member name="T:Majid.Specifications.AnySpecification`1">
            <summary>
            Represents the specification that can be satisfied by the given object
            in any circumstance.
            </summary>
            <typeparam name="T">The type of the object to which the specification is applied.</typeparam>
        </member>
        <member name="M:Majid.Specifications.AnySpecification`1.ToExpression">
            <summary>
            Gets the LINQ expression which represents the current specification.
            </summary>
            <returns>The LINQ expression.</returns>
        </member>
        <member name="T:Majid.Specifications.CompositeSpecification`1">
            <summary>
            Represents the base class for composite specifications.
            </summary>
            <typeparam name="T">The type of the object to which the specification is applied.</typeparam>
        </member>
        <member name="P:Majid.Specifications.CompositeSpecification`1.Left">
            <summary>
            Gets the first specification.
            </summary>
        </member>
        <member name="P:Majid.Specifications.CompositeSpecification`1.Right">
            <summary>
            Gets the second specification.
            </summary>
        </member>
        <member name="M:Majid.Specifications.CompositeSpecification`1.#ctor(Majid.Specifications.ISpecification{`0},Majid.Specifications.ISpecification{`0})">
            <summary>
            Constructs a new instance of <see cref="T:Majid.Specifications.CompositeSpecification`1"/> class.
            </summary>
            <param name="left">The first specification.</param>
            <param name="right">The second specification.</param>
        </member>
        <member name="T:Majid.Specifications.ExpressionFuncExtender">
            <summary>
            Represents the extender for Expression[Func[T, bool]] type.
            This is part of the solution which solves
            the expression parameter problem when going to Entity Framework.
            For more information about this solution please refer to http://blogs.msdn.com/b/meek/archive/2008/05/02/linq-to-entities-combining-predicates.aspx.
            </summary>
        </member>
        <member name="M:Majid.Specifications.ExpressionFuncExtender.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Combines two given expressions by using the AND semantics.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="first">The first part of the expression.</param>
            <param name="second">The second part of the expression.</param>
            <returns>The combined expression.</returns>
        </member>
        <member name="M:Majid.Specifications.ExpressionFuncExtender.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Combines two given expressions by using the OR semantics.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="first">The first part of the expression.</param>
            <param name="second">The second part of the expression.</param>
            <returns>The combined expression.</returns>
        </member>
        <member name="T:Majid.Specifications.ExpressionSpecification`1">
            <summary>
            Represents the specification which is represented by the corresponding
            LINQ expression.
            </summary>
            <typeparam name="T">The type of the object to which the specification is applied.</typeparam>
        </member>
        <member name="M:Majid.Specifications.ExpressionSpecification`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Initializes a new instance of <c>ExpressionSpecification&lt;T&gt;</c> class.
            </summary>
            <param name="expression">The LINQ expression which represents the current
            specification.</param>
        </member>
        <member name="M:Majid.Specifications.ExpressionSpecification`1.ToExpression">
            <summary>
            Gets the LINQ expression which represents the current specification.
            </summary>
            <returns>The LINQ expression.</returns>
        </member>
        <member name="T:Majid.Specifications.ICompositeSpecification`1">
            <summary>
            Represents that the implemented classes are composite specifications.
            </summary>
            <typeparam name="T">The type of the object to which the specification is applied.</typeparam>
        </member>
        <member name="P:Majid.Specifications.ICompositeSpecification`1.Left">
            <summary>
            Gets the left side of the specification.
            </summary>
        </member>
        <member name="P:Majid.Specifications.ICompositeSpecification`1.Right">
            <summary>
            Gets the right side of the specification.
            </summary>
        </member>
        <member name="T:Majid.Specifications.ISpecification`1">
            <summary>
            Represents that the implemented classes are specifications. For more
            information about the specification pattern, please refer to
            http://martinfowler.com/apsupp/spec.pdf.
            </summary>
            <typeparam name="T">The type of the object to which the specification is applied.</typeparam>
        </member>
        <member name="M:Majid.Specifications.ISpecification`1.IsSatisfiedBy(`0)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> value which indicates whether the specification
            is satisfied by the given object.
            </summary>
            <param name="obj">The object to which the specification is applied.</param>
            <returns>True if the specification is satisfied, otherwise false.</returns>
        </member>
        <member name="M:Majid.Specifications.ISpecification`1.ToExpression">
            <summary>
            Gets the LINQ expression which represents the current specification.
            </summary>
            <returns>The LINQ expression.</returns>
        </member>
        <member name="T:Majid.Specifications.ISpecificationParser`1">
            <summary>
            Represents that the implemented classes are specification parsers that
            parses the given specification to a domain specific criteria object, such 
            as the <c>ICriteria</c> instance in NHibernate.
            </summary>
            <typeparam name="TCriteria">The type of the domain specific criteria.</typeparam>
        </member>
        <member name="M:Majid.Specifications.ISpecificationParser`1.Parse``1(Majid.Specifications.ISpecification{``0})">
            <summary>
            Parses the given specification to a domain specific criteria object.
            </summary>
            <typeparam name="T">The type of the object to which the specification is applied.</typeparam>
            <param name="specification">The specified specification instance.</param>
            <returns>The instance of the domain specific criteria.</returns>
        </member>
        <member name="T:Majid.Specifications.NoneSpecification`1">
            <summary>
            Represents the specification that can be satisfied by the given object
            in no circumstance.
            </summary>
            <typeparam name="T">The type of the object to which the specification is applied.</typeparam>
        </member>
        <member name="M:Majid.Specifications.NoneSpecification`1.ToExpression">
            <summary>
            Gets the LINQ expression which represents the current specification.
            </summary>
            <returns>The LINQ expression.</returns>
        </member>
        <member name="T:Majid.Specifications.NotSpecification`1">
            <summary>
            Represents the specification which indicates the semantics opposite to the given specification.
            </summary>
            <typeparam name="T">The type of the object to which the specification is applied.</typeparam>
        </member>
        <member name="M:Majid.Specifications.NotSpecification`1.#ctor(Majid.Specifications.ISpecification{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Majid.Specifications.NotSpecification`1"/> class.
            </summary>
            <param name="specification">The specification to be reversed.</param>
        </member>
        <member name="M:Majid.Specifications.NotSpecification`1.ToExpression">
            <summary>
            Gets the LINQ expression which represents the current specification.
            </summary>
            <returns>The LINQ expression.</returns>
        </member>
        <member name="T:Majid.Specifications.OrSpecification`1">
            <summary>
            Represents the combined specification which indicates that either of the given
            specification should be satisfied by the given object.
            </summary>
            <typeparam name="T">The type of the object to which the specification is applied.</typeparam>
        </member>
        <member name="M:Majid.Specifications.OrSpecification`1.#ctor(Majid.Specifications.ISpecification{`0},Majid.Specifications.ISpecification{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Majid.Specifications.OrSpecification`1"/> class.
            </summary>
            <param name="left">The first specification.</param>
            <param name="right">The second specification.</param>
        </member>
        <member name="M:Majid.Specifications.OrSpecification`1.ToExpression">
            <summary>
            Gets the LINQ expression which represents the current specification.
            </summary>
            <returns>The LINQ expression.</returns>
        </member>
        <member name="T:Majid.Specifications.ParameterRebinder">
            <summary>
            Represents the parameter rebinder used for rebinding the parameters
            for the given expressions. This is part of the solution which solves
            the expression parameter problem when going to Entity Framework.
            For more information about this solution please refer to http://blogs.msdn.com/b/meek/archive/2008/05/02/linq-to-entities-combining-predicates.aspx.
            </summary>
        </member>
        <member name="T:Majid.Specifications.Specification`1">
            <summary>
            Represents the base class for specifications.
            </summary>
            <typeparam name="T">The type of the object to which the specification is applied.</typeparam>
        </member>
        <member name="M:Majid.Specifications.Specification`1.IsSatisfiedBy(`0)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> value which indicates whether the specification
            is satisfied by the given object.
            </summary>
            <param name="obj">The object to which the specification is applied.</param>
            <returns>True if the specification is satisfied, otherwise false.</returns>
        </member>
        <member name="M:Majid.Specifications.Specification`1.ToExpression">
            <summary>
            Gets the LINQ expression which represents the current specification.
            </summary>
            <returns>The LINQ expression.</returns>
        </member>
        <member name="M:Majid.Specifications.Specification`1.op_Implicit(Majid.Specifications.Specification{`0})~System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}">
            <summary>
            Implicitly converts a specification to expression.
            </summary>
            <param name="specification"></param>
        </member>
        <member name="M:Majid.Specifications.SpecificationExtensions.And``1(Majid.Specifications.ISpecification{``0},Majid.Specifications.ISpecification{``0})">
            <summary>
            Combines the current specification instance with another specification instance
            and returns the combined specification which represents that both the current and
            the given specification must be satisfied by the given object.
            </summary>
            <param name="specification">The specification</param>
            <param name="other">The specification instance with which the current specification is combined.</param>
            <returns>The combined specification instance.</returns>
        </member>
        <member name="M:Majid.Specifications.SpecificationExtensions.Or``1(Majid.Specifications.ISpecification{``0},Majid.Specifications.ISpecification{``0})">
            <summary>
            Combines the current specification instance with another specification instance
            and returns the combined specification which represents that either the current or
            the given specification should be satisfied by the given object.
            </summary>
            <param name="specification">The specification</param>
            <param name="other">The specification instance with which the current specification
            is combined.</param>
            <returns>The combined specification instance.</returns>
        </member>
        <member name="M:Majid.Specifications.SpecificationExtensions.AndNot``1(Majid.Specifications.ISpecification{``0},Majid.Specifications.ISpecification{``0})">
            <summary>
            Combines the current specification instance with another specification instance
            and returns the combined specification which represents that the current specification
            should be satisfied by the given object but the specified specification should not.
            </summary>
            <param name="specification">The specification</param>
            <param name="other">The specification instance with which the current specification
            is combined.</param>
            <returns>The combined specification instance.</returns>
        </member>
        <member name="M:Majid.Specifications.SpecificationExtensions.Not``1(Majid.Specifications.ISpecification{``0})">
            <summary>
            Reverses the current specification instance and returns a specification which represents
            the semantics opposite to the current specification.
            </summary>
            <returns>The reversed specification instance.</returns>
        </member>
        <member name="T:Majid.Text.FormattedStringValueExtracter">
            <summary>
            This class is used to extract dynamic values from a formatted string.
            It works as reverse of <see cref="M:System.String.Format(System.String,System.Object)"/>
            </summary>
            <example>
            Say that str is "My name is Neo." and format is "My name is {name}.".
            Then Extract method gets "Neo" as "name".  
            </example>
        </member>
        <member name="M:Majid.Text.FormattedStringValueExtracter.Extract(System.String,System.String,System.Boolean,System.Nullable{System.Char})">
            <summary>
            Extracts dynamic values from a formatted string.
            </summary>
            <param name="str">String including dynamic values</param>
            <param name="format">Format of the string</param>
            <param name="ignoreCase">True, to search case-insensitive.</param>
            <param name="splitformatCharacter">format is splitted using this character when provided.</param>
        </member>
        <member name="M:Majid.Text.FormattedStringValueExtracter.IsMatch(System.String,System.String,System.String[]@,System.Boolean)">
            <summary>
            Checks if given <see cref="!:str"/> fits to given <see cref="!:format"/>.
            Also gets extracted values.
            </summary>
            <param name="str">String including dynamic values</param>
            <param name="format">Format of the string</param>
            <param name="values">Array of extracted values if matched</param>
            <param name="ignoreCase">True, to search case-insensitive</param>
            <returns>True, if matched.</returns>
        </member>
        <member name="T:Majid.Text.FormattedStringValueExtracter.ExtractionResult">
            <summary>
            Used as return value of <see cref="M:Majid.Text.FormattedStringValueExtracter.Extract(System.String,System.String,System.Boolean,System.Nullable{System.Char})"/> method.
            </summary>
        </member>
        <member name="P:Majid.Text.FormattedStringValueExtracter.ExtractionResult.IsMatch">
            <summary>
            Is fully matched.
            </summary>
        </member>
        <member name="P:Majid.Text.FormattedStringValueExtracter.ExtractionResult.Matches">
            <summary>
            List of matched dynamic values.
            </summary>
        </member>
        <member name="T:Majid.Threading.AsyncHelper">
            <summary>
            Provides some helper methods to work with async methods.
            </summary>
        </member>
        <member name="M:Majid.Threading.AsyncHelper.IsAsync(System.Reflection.MethodInfo)">
            <summary>
            Checks if given method is an async method.
            </summary>
            <param name="method">A method to check</param>
        </member>
        <member name="M:Majid.Threading.AsyncHelper.IsAsyncMethod(System.Reflection.MethodInfo)">
            <summary>
            Checks if given method is an async method.
            </summary>
            <param name="method">A method to check</param>
        </member>
        <member name="M:Majid.Threading.AsyncHelper.RunSync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Runs a async method synchronously.
            </summary>
            <param name="func">A function that returns a result</param>
            <typeparam name="TResult">Result type</typeparam>
            <returns>Result of the async operation</returns>
        </member>
        <member name="M:Majid.Threading.AsyncHelper.RunSync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Runs a async method synchronously.
            </summary>
            <param name="action">An async action</param>
        </member>
        <member name="T:Majid.Threading.BackgroundWorkers.BackgroundWorkerBase">
            <summary>
            Base class that can be used to implement <see cref="T:Majid.Threading.BackgroundWorkers.IBackgroundWorker"/>.
            </summary>
        </member>
        <member name="P:Majid.Threading.BackgroundWorkers.BackgroundWorkerBase.SettingManager">
            <summary>
            Reference to the setting manager.
            </summary>
        </member>
        <member name="P:Majid.Threading.BackgroundWorkers.BackgroundWorkerBase.UnitOfWorkManager">
            <summary>
            Reference to <see cref="T:Majid.Domain.Uow.IUnitOfWorkManager"/>.
            </summary>
        </member>
        <member name="P:Majid.Threading.BackgroundWorkers.BackgroundWorkerBase.CurrentUnitOfWork">
            <summary>
            Gets current unit of work.
            </summary>
        </member>
        <member name="P:Majid.Threading.BackgroundWorkers.BackgroundWorkerBase.LocalizationManager">
            <summary>
            Reference to the localization manager.
            </summary>
        </member>
        <member name="P:Majid.Threading.BackgroundWorkers.BackgroundWorkerBase.LocalizationSourceName">
            <summary>
            Gets/sets name of the localization source that is used in this application service.
            It must be set in order to use <see cref="M:Majid.Threading.BackgroundWorkers.BackgroundWorkerBase.L(System.String)"/> and <see cref="M:Majid.Threading.BackgroundWorkers.BackgroundWorkerBase.L(System.String,System.Globalization.CultureInfo)"/> methods.
            </summary>
        </member>
        <member name="P:Majid.Threading.BackgroundWorkers.BackgroundWorkerBase.LocalizationSource">
            <summary>
            Gets localization source.
            It's valid if <see cref="P:Majid.Threading.BackgroundWorkers.BackgroundWorkerBase.LocalizationSourceName"/> is set.
            </summary>
        </member>
        <member name="P:Majid.Threading.BackgroundWorkers.BackgroundWorkerBase.Logger">
            <summary>
            Reference to the logger to write logs.
            </summary>
        </member>
        <member name="M:Majid.Threading.BackgroundWorkers.BackgroundWorkerBase.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Majid.Threading.BackgroundWorkers.BackgroundWorkerBase.L(System.String)">
            <summary>
            Gets localized string for given key name and current language.
            </summary>
            <param name="name">Key name</param>
            <returns>Localized string</returns>
        </member>
        <member name="M:Majid.Threading.BackgroundWorkers.BackgroundWorkerBase.L(System.String,System.Object[])">
            <summary>
            Gets localized string for given key name and current language with formatting strings.
            </summary>
            <param name="name">Key name</param>
            <param name="args">Format arguments</param>
            <returns>Localized string</returns>
        </member>
        <member name="M:Majid.Threading.BackgroundWorkers.BackgroundWorkerBase.L(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets localized string for given key name and specified culture information.
            </summary>
            <param name="name">Key name</param>
            <param name="culture">culture information</param>
            <returns>Localized string</returns>
        </member>
        <member name="M:Majid.Threading.BackgroundWorkers.BackgroundWorkerBase.L(System.String,System.Globalization.CultureInfo,System.Object[])">
            <summary>
            Gets localized string for given key name and current language with formatting strings.
            </summary>
            <param name="name">Key name</param>
            <param name="culture">culture information</param>
            <param name="args">Format arguments</param>
            <returns>Localized string</returns>
        </member>
        <member name="T:Majid.Threading.BackgroundWorkers.BackgroundWorkerManager">
            <summary>
            Implements <see cref="T:Majid.Threading.BackgroundWorkers.IBackgroundWorkerManager"/>.
            </summary>
        </member>
        <member name="M:Majid.Threading.BackgroundWorkers.BackgroundWorkerManager.#ctor(Majid.Dependency.IIocResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Majid.Threading.BackgroundWorkers.BackgroundWorkerManager"/> class.
            </summary>
        </member>
        <member name="T:Majid.Threading.BackgroundWorkers.IBackgroundWorker">
            <summary>
            Interface for a worker (thread) that runs on background to perform some tasks.
            </summary>
        </member>
        <member name="T:Majid.Threading.BackgroundWorkers.IBackgroundWorkerManager">
            <summary>
            Used to manage background workers.
            </summary>
        </member>
        <member name="M:Majid.Threading.BackgroundWorkers.IBackgroundWorkerManager.Add(Majid.Threading.BackgroundWorkers.IBackgroundWorker)">
            <summary>
            Adds a new worker. Starts the worker immediately if <see cref="T:Majid.Threading.BackgroundWorkers.IBackgroundWorkerManager"/> has started.
            </summary>
            <param name="worker">
            The worker. It should be resolved from IOC.
            </param>
        </member>
        <member name="T:Majid.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase">
            <summary>
            Extends <see cref="T:Majid.Threading.BackgroundWorkers.BackgroundWorkerBase"/> to add a periodic running Timer. 
            </summary>
        </member>
        <member name="M:Majid.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.#ctor(Majid.Threading.Timers.MajidTimer)">
            <summary>
            Initializes a new instance of the <see cref="T:Majid.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase"/> class.
            </summary>
            <param name="timer">A timer.</param>
        </member>
        <member name="M:Majid.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.Timer_Elapsed(System.Object,System.EventArgs)">
            <summary>
            Handles the Elapsed event of the Timer.
            </summary>
        </member>
        <member name="M:Majid.Threading.BackgroundWorkers.PeriodicBackgroundWorkerBase.DoWork">
            <summary>
            Periodic works should be done by implementing this method.
            </summary>
        </member>
        <member name="T:Majid.Threading.Extensions.LockExtensions">
            <summary>
            Extension methods to make locking easier.
            </summary>
        </member>
        <member name="M:Majid.Threading.Extensions.LockExtensions.Locking(System.Object,System.Action)">
            <summary>
            Executes given <paramref name="action"/> by locking given <paramref name="source"/> object.
            </summary>
            <param name="source">Source object (to be locked)</param>
            <param name="action">Action (to be executed)</param>
        </member>
        <member name="M:Majid.Threading.Extensions.LockExtensions.Locking``1(``0,System.Action{``0})">
            <summary>
            Executes given <paramref name="action"/> by locking given <paramref name="source"/> object.
            </summary>
            <typeparam name="T">Type of the object (to be locked)</typeparam>
            <param name="source">Source object (to be locked)</param>
            <param name="action">Action (to be executed)</param>
        </member>
        <member name="M:Majid.Threading.Extensions.LockExtensions.Locking``1(System.Object,System.Func{``0})">
            <summary>
            Executes given <paramref name="func"/> and returns it's value by locking given <paramref name="source"/> object.
            </summary>
            <typeparam name="TResult">Return type</typeparam>
            <param name="source">Source object (to be locked)</param>
            <param name="func">Function (to be executed)</param>
            <returns>Return value of the <paramref name="func"/></returns>
        </member>
        <member name="M:Majid.Threading.Extensions.LockExtensions.Locking``2(``0,System.Func{``0,``1})">
            <summary>
            Executes given <paramref name="func"/> and returns it's value by locking given <paramref name="source"/> object.
            </summary>
            <typeparam name="T">Type of the object (to be locked)</typeparam>
            <typeparam name="TResult">Return type</typeparam>
            <param name="source">Source object (to be locked)</param>
            <param name="func">Function (to be executed)</param>
            <returns>Return value of the <paramnref name="func"/></returns>
        </member>
        <member name="T:Majid.Threading.IRunnable">
            <summary>
            Interface to start/stop self threaded services.
            </summary>
        </member>
        <member name="M:Majid.Threading.IRunnable.Start">
            <summary>
            Starts the service.
            </summary>
        </member>
        <member name="M:Majid.Threading.IRunnable.Stop">
            <summary>
            Sends stop command to the service.
            Service may return immediately and stop asynchronously.
            A client should then call <see cref="M:Majid.Threading.IRunnable.WaitToStop"/> method to ensure it's stopped.
            </summary>
        </member>
        <member name="M:Majid.Threading.IRunnable.WaitToStop">
            <summary>
            Waits the service to stop.
            </summary>
        </member>
        <member name="T:Majid.Threading.RunnableBase">
            <summary>
            Base implementation of <see cref="T:Majid.Threading.IRunnable"/>.
            </summary>
        </member>
        <member name="P:Majid.Threading.RunnableBase.IsRunning">
            <summary>
            A boolean value to control the running.
            </summary>
        </member>
        <member name="T:Majid.Threading.RunnableExtensions">
            <summary>
            Some extension methods for <see cref="T:Majid.Threading.IRunnable"/>.
            </summary>
        </member>
        <member name="M:Majid.Threading.RunnableExtensions.StopAndWaitToStop(Majid.Threading.IRunnable)">
            <summary>
            Calls <see cref="M:Majid.Threading.IRunnable.Stop"/> and then <see cref="M:Majid.Threading.IRunnable.WaitToStop"/>.
            </summary>
        </member>
        <member name="T:Majid.Threading.ThreadCultureSanitizer">
            <summary>
            This class is copied from here:
            http://www.zpqrtbnk.net/posts/appdomains-threads-cultureinfos-and-paracetamol
            It's a workaround for application startup problem.
            </summary>
        </member>
        <member name="T:Majid.Threading.Timers.MajidTimer">
            <summary>
            A roboust timer implementation that ensures no overlapping occurs. It waits exactly specified <see cref="P:Majid.Threading.Timers.MajidTimer.Period"/> between ticks.
            </summary>
        </member>
        <member name="E:Majid.Threading.Timers.MajidTimer.Elapsed">
            <summary>
            This event is raised periodically according to Period of Timer.
            </summary>
        </member>
        <member name="P:Majid.Threading.Timers.MajidTimer.Period">
            <summary>
            Task period of timer (as milliseconds).
            </summary>
        </member>
        <member name="P:Majid.Threading.Timers.MajidTimer.RunOnStart">
            <summary>
            Indicates whether timer raises Elapsed event on Start method of Timer for once.
            Default: False.
            </summary>
        </member>
        <member name="F:Majid.Threading.Timers.MajidTimer._taskTimer">
            <summary>
            This timer is used to perfom the task at spesified intervals.
            </summary>
        </member>
        <member name="F:Majid.Threading.Timers.MajidTimer._running">
            <summary>
            Indicates that whether timer is running or stopped.
            </summary>
        </member>
        <member name="F:Majid.Threading.Timers.MajidTimer._performingTasks">
            <summary>
            Indicates that whether performing the task or _taskTimer is in sleep mode.
            This field is used to wait executing tasks when stopping Timer.
            </summary>
        </member>
        <member name="M:Majid.Threading.Timers.MajidTimer.#ctor">
            <summary>
            Creates a new Timer.
            </summary>
        </member>
        <member name="M:Majid.Threading.Timers.MajidTimer.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates a new Timer.
            </summary>
            <param name="period">Task period of timer (as milliseconds)</param>
            <param name="runOnStart">Indicates whether timer raises Elapsed event on Start method of Timer for once</param>
        </member>
        <member name="M:Majid.Threading.Timers.MajidTimer.Start">
            <summary>
            Starts the timer.
            </summary>
        </member>
        <member name="M:Majid.Threading.Timers.MajidTimer.Stop">
            <summary>
            Stops the timer.
            </summary>
        </member>
        <member name="M:Majid.Threading.Timers.MajidTimer.WaitToStop">
            <summary>
            Waits the service to stop.
            </summary>
        </member>
        <member name="M:Majid.Threading.Timers.MajidTimer.TimerCallBack(System.Object)">
            <summary>
            This method is called by _taskTimer.
            </summary>
            <param name="state">Not used argument</param>
        </member>
        <member name="T:Majid.Timing.Clock">
            <summary>
            Used to perform some common date-time operations.
            </summary>
        </member>
        <member name="P:Majid.Timing.Clock.Provider">
            <summary>
            This object is used to perform all <see cref="T:Majid.Timing.Clock"/> operations.
            Default value: <see cref="T:Majid.Timing.UnspecifiedClockProvider"/>.
            </summary>
        </member>
        <member name="P:Majid.Timing.Clock.Now">
            <summary>
            Gets Now using current <see cref="P:Majid.Timing.Clock.Provider"/>.
            </summary>
        </member>
        <member name="P:Majid.Timing.Clock.SupportsMultipleTimezone">
            <summary>
            Returns true if multiple timezone is supported, returns false if not.
            </summary>
        </member>
        <member name="M:Majid.Timing.Clock.Normalize(System.DateTime)">
            <summary>
            Normalizes given <see cref="T:System.DateTime"/> using current <see cref="P:Majid.Timing.Clock.Provider"/>.
            </summary>
            <param name="dateTime">DateTime to be normalized.</param>
            <returns>Normalized DateTime</returns>
        </member>
        <member name="T:Majid.Timing.DateTimeRange">
            <summary>
            A basic implementation of <see cref="T:Majid.Timing.IDateTimeRange"/> to store a date range.
            </summary>
        </member>
        <member name="P:Majid.Timing.DateTimeRange.StartTime">
            <summary>
            Start time of the datetime range.
            </summary>
        </member>
        <member name="P:Majid.Timing.DateTimeRange.EndTime">
            <summary>
            End time of the datetime range.
            </summary>
        </member>
        <member name="P:Majid.Timing.DateTimeRange.TimeSpan">
            <summary>
            Gets the time span of the datetime range.  
            When set, EndTime is recalculated
            </summary>
        </member>
        <member name="M:Majid.Timing.DateTimeRange.#ctor">
            <summary>
            Creates a new <see cref="T:Majid.Timing.DateTimeRange"/> object.
            </summary>
        </member>
        <member name="M:Majid.Timing.DateTimeRange.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Creates a new <see cref="T:Majid.Timing.DateTimeRange"/> object from the given <paramref name="startTime"/> and <paramref name="endTime"/>.
            </summary>
            <param name="startTime">Start time of the datetime range</param>
            <param name="endTime">End time of the datetime range</param>
        </member>
        <member name="M:Majid.Timing.DateTimeRange.#ctor(System.DateTime,System.TimeSpan)">
            <summary>
            Creates a new <see cref="T:Majid.Timing.DateTimeRange"/> object from the given <paramref name="startTime"/> and <paramref name="timeSpan"/>.
            </summary>
            <param name="startTime">Start time of the datetime range</param>
            <param name="timeSpan">The span of time to calculate the EndTime</param>
        </member>
        <member name="M:Majid.Timing.DateTimeRange.#ctor(Majid.Timing.IDateTimeRange)">
            <summary>
            Creates a new <see cref="T:Majid.Timing.DateTimeRange"/> object from given the <paramref name="dateTimeRange"/> object.
            </summary>
            <param name="dateTimeRange">IDateTimeRange object</param>
        </member>
        <member name="P:Majid.Timing.DateTimeRange.Yesterday">
            <summary>
            Gets a date range representing yesterday.
            </summary>
        </member>
        <member name="P:Majid.Timing.DateTimeRange.Today">
            <summary>
            Gets a date range representing today.
            </summary>
        </member>
        <member name="P:Majid.Timing.DateTimeRange.Tomorrow">
            <summary>
            Gets a date range representing tomorrow.
            </summary>
        </member>
        <member name="P:Majid.Timing.DateTimeRange.LastMonth">
            <summary>
            Gets a date range representing the last month.
            </summary>
        </member>
        <member name="P:Majid.Timing.DateTimeRange.ThisMonth">
            <summary>
            Gets a date range representing this month.
            </summary>
        </member>
        <member name="P:Majid.Timing.DateTimeRange.NextMonth">
            <summary>
            Gets a date range representing the next month.
            </summary>
        </member>
        <member name="P:Majid.Timing.DateTimeRange.LastYear">
            <summary>
            Gets a date range representing the last year.
            </summary>
        </member>
        <member name="P:Majid.Timing.DateTimeRange.ThisYear">
            <summary>
            Gets a date range representing this year.
            </summary>
        </member>
        <member name="P:Majid.Timing.DateTimeRange.NextYear">
            <summary>
            Gets a date range representing the next year.
            </summary>
        </member>
        <member name="P:Majid.Timing.DateTimeRange.Last30Days">
            <summary>
            Gets a date range representing the last 30 days (30x24 hours) including today.
            </summary>
        </member>
        <member name="P:Majid.Timing.DateTimeRange.Last30DaysExceptToday">
            <summary>
            Gets a date range representing the last 30 days excluding today.
            </summary>
        </member>
        <member name="P:Majid.Timing.DateTimeRange.Last7Days">
            <summary>
            Gets a date range representing the last 7 days (7x24 hours) including today.
            </summary>
        </member>
        <member name="P:Majid.Timing.DateTimeRange.Last7DaysExceptToday">
            <summary>
            Gets a date range representing the last 7 days excluding today.
            </summary>
        </member>
        <member name="M:Majid.Timing.DateTimeRange.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Majid.Timing.DateTimeRange"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Majid.Timing.DateTimeRange"/>.</returns>
        </member>
        <member name="T:Majid.Timing.IClockProvider">
            <summary>
            Defines interface to perform some common date-time operations.
            </summary>
        </member>
        <member name="P:Majid.Timing.IClockProvider.Now">
            <summary>
            Gets Now.
            </summary>
        </member>
        <member name="P:Majid.Timing.IClockProvider.Kind">
            <summary>
            Gets kind.
            </summary>
        </member>
        <member name="P:Majid.Timing.IClockProvider.SupportsMultipleTimezone">
            <summary>
            Is that provider supports multiple time zone.
            </summary>
        </member>
        <member name="M:Majid.Timing.IClockProvider.Normalize(System.DateTime)">
            <summary>
            Normalizes given <see cref="T:System.DateTime"/>.
            </summary>
            <param name="dateTime">DateTime to be normalized.</param>
            <returns>Normalized DateTime</returns>
        </member>
        <member name="T:Majid.Timing.IDateTimeRange">
            <summary>
            Defines interface for a DateTime range.
            </summary>
        </member>
        <member name="P:Majid.Timing.IDateTimeRange.StartTime">
            <summary>
            Start time of the datetime range.
            </summary>
        </member>
        <member name="P:Majid.Timing.IDateTimeRange.EndTime">
            <summary>
            End time of the datetime range.
            </summary>
        </member>
        <member name="P:Majid.Timing.IDateTimeRange.TimeSpan">
            <summary>
            The time difference between the start and end times.
            </summary>
        </member>
        <member name="T:Majid.Timing.IZonedDateTimeRange">
            <summary>
            Defines interface for a DateTime range with timezone.
            </summary>
        </member>
        <member name="P:Majid.Timing.IZonedDateTimeRange.Timezone">
            <summary>
            The Timezone of the datetime range
            </summary>
        </member>
        <member name="P:Majid.Timing.IZonedDateTimeRange.StartTimeOffset">
            <summary>
            The StartTime with Offset
            </summary>
        </member>
        <member name="P:Majid.Timing.IZonedDateTimeRange.EndTimeOffset">
            <summary>
            The EndTime with Offset
            </summary>
        </member>
        <member name="P:Majid.Timing.IZonedDateTimeRange.StartTimeUtc">
            <summary>
            The StartTime in UTC
            </summary>
        </member>
        <member name="P:Majid.Timing.IZonedDateTimeRange.EndTimeUtc">
            <summary>
            The EndTime in UTC
            </summary>
        </member>
        <member name="T:Majid.Timing.LocalClockProvider">
            <summary>
            Implements <see cref="T:Majid.Timing.IClockProvider"/> to work with local times.
            </summary>
        </member>
        <member name="T:Majid.Timing.Timezone.ITimeZoneConverter">
            <summary>
            Interface for timezone converter
            </summary>
        </member>
        <member name="M:Majid.Timing.Timezone.ITimeZoneConverter.Convert(System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Int64)">
            <summary>
            Converts given date to user's time zone. 
            If timezone setting is not specified, returns given date.
            </summary>
            <param name="date">Base date to convert</param>
            <param name="tenantId">TenantId of user</param>
            <param name="userId">UserId to convert date for</param>
            <returns></returns>
        </member>
        <member name="M:Majid.Timing.Timezone.ITimeZoneConverter.Convert(System.Nullable{System.DateTime},System.Int32)">
            <summary>
            Converts given date to tenant's time zone. 
            If timezone setting is not specified, returns given date.
            </summary>
            <param name="date">Base date to convert</param>
            <param name="tenantId">TenantId  to convert date for</param>
            <returns></returns>
        </member>
        <member name="M:Majid.Timing.Timezone.ITimeZoneConverter.Convert(System.Nullable{System.DateTime})">
            <summary>
            Converts given date to application's time zone. 
            If timezone setting is not specified, returns given date.
            </summary>
            <param name="date">Base date to convert</param>
            <returns></returns>
        </member>
        <member name="T:Majid.Timing.Timezone.TimeZoneConverter">
            <summary>
            Time zone converter class
            </summary>
        </member>
        <member name="M:Majid.Timing.Timezone.TimeZoneConverter.#ctor(Majid.Configuration.ISettingManager)">
            <summary>
            Constructor
            </summary>
            <param name="settingManager"></param>
        </member>
        <member name="M:Majid.Timing.Timezone.TimeZoneConverter.Convert(System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Timing.Timezone.TimeZoneConverter.Convert(System.Nullable{System.DateTime},System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.Timing.Timezone.TimeZoneConverter.Convert(System.Nullable{System.DateTime})">
            <inheritdoc/>
        </member>
        <member name="T:Majid.Timing.Timezone.TimezoneHelper">
            <summary>
            A helper class for timezone operations
            </summary>
        </member>
        <member name="M:Majid.Timing.Timezone.TimezoneHelper.WindowsToIana(System.String)">
            <summary>
            Maps given windows timezone id to IANA timezone id
            </summary>
            <param name="windowsTimezoneId"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Majid.Timing.Timezone.TimezoneHelper.IanaToWindows(System.String)">
            <summary>
            Maps given IANA timezone id to windows timezone id
            </summary>
            <param name="ianaTimezoneId"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Majid.Timing.Timezone.TimezoneHelper.Convert(System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Converts a date from one timezone to another
            </summary>
            <param name="date"></param>
            <param name="fromTimeZoneId"></param>
            <param name="toTimeZoneId"></param>
            <returns></returns>
        </member>
        <member name="M:Majid.Timing.Timezone.TimezoneHelper.ConvertFromUtc(System.Nullable{System.DateTime},System.String)">
            <summary>
            Converts a utc datetime to a local time based on a timezone
            </summary>
            <param name="date"></param>
            <param name="toTimeZoneId"></param>
            <returns></returns>
        </member>
        <member name="M:Majid.Timing.Timezone.TimezoneHelper.ConvertFromUtcToDateTimeOffset(System.Nullable{System.DateTime},System.String)">
            <summary>
            Converts a utc datetime in to a datetimeoffset
            </summary>
            <param name="date"></param>
            <param name="timeZoneId"></param>
            <returns></returns>
        </member>
        <member name="M:Majid.Timing.Timezone.TimezoneHelper.ConvertToDateTimeOffset(System.Nullable{System.DateTime},System.String)">
            <summary>
            Converts a nullable date with a timezone to a nullable datetimeoffset
            </summary>
            <param name="date"></param>
            <param name="timeZoneId"></param>
            <returns></returns>
        </member>
        <member name="M:Majid.Timing.Timezone.TimezoneHelper.ConvertToDateTimeOffset(System.DateTime,System.String)">
            <summary>
            Converts a date with a timezone to a datetimeoffset
            </summary>
            <param name="date"></param>
            <param name="timeZoneId"></param>
            <returns></returns>
        </member>
        <member name="T:Majid.Timing.UtcClockProvider">
            <summary>
            Implements <see cref="T:Majid.Timing.IClockProvider"/> to work with UTC times.
            </summary>
        </member>
        <member name="T:Majid.Timing.ZonedDateTimeRange">
            <summary>
            A basic implementation of <see cref="T:Majid.Timing.IZonedDateTimeRange"/> to store a date range with a timezone.
            Default timezone is UTC
            </summary>
        </member>
        <member name="P:Majid.Timing.ZonedDateTimeRange.Timezone">
            <summary>
            The Timezone of the datetime range
            </summary>
        </member>
        <member name="P:Majid.Timing.ZonedDateTimeRange.StartTimeOffset">
            <summary>
            The StartTime with Offset
            </summary>
        </member>
        <member name="P:Majid.Timing.ZonedDateTimeRange.EndTimeOffset">
            <summary>
            The EndTime with Offset
            </summary>
        </member>
        <member name="P:Majid.Timing.ZonedDateTimeRange.StartTimeUtc">
            <summary>
            The StartTime in UTC
            </summary>
        </member>
        <member name="P:Majid.Timing.ZonedDateTimeRange.EndTimeUtc">
            <summary>
            The EndTime in UTC
            </summary>
        </member>
        <member name="P:Majid.Timing.ZonedDateTimeRange.Now">
            <summary>
            The current time based on the timezone
            </summary>
        </member>
        <member name="P:Majid.Timing.ZonedDateTimeRange.Yesterday">
            <summary>
            Gets a zoned date range representing yesterday.
            </summary>
        </member>
        <member name="P:Majid.Timing.ZonedDateTimeRange.Today">
            <summary>
            Gets a zoned date range representing today.
            </summary>
        </member>
        <member name="P:Majid.Timing.ZonedDateTimeRange.Tomorrow">
            <summary>
            Gets a zoned date range representing tomorrow.
            </summary>
        </member>
        <member name="P:Majid.Timing.ZonedDateTimeRange.LastMonth">
            <summary>
            Gets a zoned date range representing the last month.
            </summary>
        </member>
        <member name="P:Majid.Timing.ZonedDateTimeRange.ThisMonth">
            <summary>
            Gets a zoned date range representing this month.
            </summary>
        </member>
        <member name="P:Majid.Timing.ZonedDateTimeRange.NextMonth">
            <summary>
            Gets a zoned date range representing the next month.
            </summary>
        </member>
        <member name="P:Majid.Timing.ZonedDateTimeRange.LastYear">
            <summary>
            Gets a zoned date range representing the last year.
            </summary>
        </member>
        <member name="P:Majid.Timing.ZonedDateTimeRange.ThisYear">
            <summary>
            Gets a zoned date range representing this year.
            </summary>
        </member>
        <member name="P:Majid.Timing.ZonedDateTimeRange.NextYear">
            <summary>
            Gets a zoned date range representing the next year.
            </summary>
        </member>
        <member name="P:Majid.Timing.ZonedDateTimeRange.Last30Days">
            <summary>
            Gets a zoned date range representing the last 30 days (30x24 hours) including today.
            </summary>
        </member>
        <member name="P:Majid.Timing.ZonedDateTimeRange.Last30DaysExceptToday">
            <summary>
            Gets a zoned date range representing the last 30 days excluding today.
            </summary>
        </member>
        <member name="P:Majid.Timing.ZonedDateTimeRange.Last7Days">
            <summary>
            Gets a zoned date range representing the last 7 days (7x24 hours) including today.
            </summary>
        </member>
        <member name="P:Majid.Timing.ZonedDateTimeRange.Last7DaysExceptToday">
            <summary>
            Gets a zoned date range representing the last 7 days excluding today.
            </summary>
        </member>
        <member name="M:Majid.Transactions.Extensions.IsolationLevelExtensions.ToSystemDataIsolationLevel(System.Transactions.IsolationLevel)">
            <summary>
            Converts <see cref="T:System.Transactions.IsolationLevel"/> to <see cref="T:System.Data.IsolationLevel"/>.
            </summary>
        </member>
        <member name="T:Majid.UI.Inputs.ComboboxInputType">
            <summary>
            Combobox value UI type.
            </summary>
        </member>
        <member name="P:Majid.UI.Inputs.InputTypeBase.Item(System.String)">
            <summary>
            Gets/sets arbitrary objects related to this object.
            Gets null if given key does not exists.
            </summary>
            <param name="key">Key</param>
        </member>
        <member name="P:Majid.UI.Inputs.InputTypeBase.Attributes">
            <summary>
            Arbitrary objects related to this object.
            </summary>
        </member>
        <member name="T:Majid.UI.UserFriendlyException">
            <summary>
            This exception type is directly shown to the user.
            </summary>
        </member>
        <member name="P:Majid.UI.UserFriendlyException.Details">
            <summary>
            Additional information about the exception.
            </summary>
        </member>
        <member name="P:Majid.UI.UserFriendlyException.Code">
            <summary>
            An arbitrary error code.
            </summary>
        </member>
        <member name="P:Majid.UI.UserFriendlyException.Severity">
            <summary>
            Severity of the exception.
            Default: Warn.
            </summary>
        </member>
        <member name="M:Majid.UI.UserFriendlyException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Majid.UI.UserFriendlyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for serializing.
            </summary>
        </member>
        <member name="M:Majid.UI.UserFriendlyException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:Majid.UI.UserFriendlyException.#ctor(System.String,Majid.Logging.LogSeverity)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message</param>
            <param name="severity">Exception severity</param>
        </member>
        <member name="M:Majid.UI.UserFriendlyException.#ctor(System.Int32,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="code">Error code</param>
            <param name="message">Exception message</param>
        </member>
        <member name="M:Majid.UI.UserFriendlyException.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message</param>
            <param name="details">Additional information about the exception</param>
        </member>
        <member name="M:Majid.UI.UserFriendlyException.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="code">Error code</param>
            <param name="message">Exception message</param>
            <param name="details">Additional information about the exception</param>
        </member>
        <member name="M:Majid.UI.UserFriendlyException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="M:Majid.UI.UserFriendlyException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message</param>
            <param name="details">Additional information about the exception</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="T:Majid.UserIdentifier">
            <summary>
            Used to identify a user.
            </summary>
        </member>
        <member name="P:Majid.UserIdentifier.TenantId">
            <summary>
            Tenant Id of the user.
            Can be null for host users in a multi tenant application.
            </summary>
        </member>
        <member name="P:Majid.UserIdentifier.UserId">
            <summary>
            Id of the user.
            </summary>
        </member>
        <member name="M:Majid.UserIdentifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Majid.UserIdentifier"/> class.
            </summary>
        </member>
        <member name="M:Majid.UserIdentifier.#ctor(System.Nullable{System.Int32},System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Majid.UserIdentifier"/> class.
            </summary>
            <param name="tenantId">Tenant Id of the user.</param>
            <param name="userId">Id of the user.</param>
        </member>
        <member name="M:Majid.UserIdentifier.Parse(System.String)">
            <summary>
            Parses given string and creates a new <see cref="T:Majid.UserIdentifier"/> object.
            </summary>
            <param name="userIdentifierString">
            Should be formatted one of the followings:
            
            - "userId@tenantId". Ex: "42@3" (for tenant users).
            - "userId". Ex: 1 (for host users)
            </param>
        </member>
        <member name="M:Majid.UserIdentifier.ToUserIdentifierString">
            <summary>
            Creates a string represents this <see cref="T:Majid.UserIdentifier"/> instance.
            Formatted one of the followings:
            
            - "userId@tenantId". Ex: "42@3" (for tenant users).
            - "userId". Ex: 1 (for host users)
            
            Returning string can be used in <see cref="M:Majid.UserIdentifier.Parse(System.String)"/> method to re-create identical <see cref="T:Majid.UserIdentifier"/> object.
            </summary>
        </member>
        <member name="M:Majid.UserIdentifier.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Majid.UserIdentifier.op_Equality(Majid.UserIdentifier,Majid.UserIdentifier)">
            <inheritdoc/>
        </member>
        <member name="M:Majid.UserIdentifier.op_Inequality(Majid.UserIdentifier,Majid.UserIdentifier)">
            <inheritdoc/>
        </member>
        <member name="T:Majid.UserIdentifierExtensions">
            <summary>
            Extension methods for <see cref="T:Majid.UserIdentifier"/> and <see cref="T:Majid.IUserIdentifier"/>.
            </summary>
        </member>
        <member name="M:Majid.UserIdentifierExtensions.ToUserIdentifier(Majid.IUserIdentifier)">
            <summary>
            Creates a new <see cref="T:Majid.UserIdentifier"/> object from any object implements <see cref="T:Majid.IUserIdentifier"/>.
            </summary>
            <param name="userIdentifier">User identifier.</param>
        </member>
        <member name="T:Majid.Utils.Etc.NullDisposable">
            <summary>
            This class is used to simulate a Disposable that does nothing.
            </summary>
        </member>
        <member name="T:Majid.Web.Models.DontWrapResultAttribute">
            <summary>
            A shortcut for <see cref="T:Majid.Web.Models.WrapResultAttribute"/> to disable wrapping by default.
            It sets false to <see cref="P:Majid.Web.Models.WrapResultAttribute.WrapOnSuccess"/> and <see cref="P:Majid.Web.Models.WrapResultAttribute.WrapOnError"/>  properties.
            </summary>
        </member>
        <member name="M:Majid.Web.Models.DontWrapResultAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Majid.Web.Models.DontWrapResultAttribute"/> class.
            </summary>
        </member>
        <member name="T:Majid.Web.Models.WrapResultAttribute">
            <summary>
            Used to determine how MAJID should wrap response on the web layer.
            </summary>
        </member>
        <member name="P:Majid.Web.Models.WrapResultAttribute.WrapOnSuccess">
            <summary>
            Wrap result on success.
            </summary>
        </member>
        <member name="P:Majid.Web.Models.WrapResultAttribute.WrapOnError">
            <summary>
            Wrap result on error.
            </summary>
        </member>
        <member name="P:Majid.Web.Models.WrapResultAttribute.LogError">
            <summary>
            Log errors.
            Default: true.
            </summary>
        </member>
        <member name="M:Majid.Web.Models.WrapResultAttribute.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Majid.Web.Models.WrapResultAttribute"/> class.
            </summary>
            <param name="wrapOnSuccess">Wrap result on success.</param>
            <param name="wrapOnError">Wrap result on error.</param>
        </member>
        <member name="T:Majid.Xml.Extensions.XmlNodeExtensions">
            <summary>
            Extension methods for <see cref="T:System.Xml.XmlNode"/> class.
            </summary>
        </member>
        <member name="M:Majid.Xml.Extensions.XmlNodeExtensions.GetAttributeValueOrNull(System.Xml.XmlNode,System.String)">
            <summary>
            Gets an attribute's value from an Xml node.
            </summary>
            <param name="node">The Xml node</param>
            <param name="attributeName">Attribute name</param>
            <returns>Value of the attribute</returns>
        </member>
    </members>
</doc>
